Sjasm Z80 Assembler v0.42c - www.xl2s.tk             [2016.03.13 - 10:25:09]

SAT64TEST.asm
Errors: 0

       1   00:0000                      		output "SAT64TEST.rom"
       2   00:0000                      
       3   00:0000                      		defpage	 0,0x4000, 0x2000		; page 0 main code 
       4   00:0000                      		defpage	 1,0x6000, 0x2000		; page 1 
       5   00:0000                      		defpage	 2..7					; swapped data 
       6   00:0000                      	
       7   00:0000                      		;	konami scc
       8   00:0000                      		
       9   00:0000  (00:5000)           _kBank1:	equ 05000h ;- 57FFh (5000h used)
      10   00:0000  (00:7000)           _kBank2: 	equ 07000h ;- 77FFh (7000h used)
      11   00:0000  (00:9000)           _kBank3: 	equ 09000h ;- 97FFh (9000h used)
      12   00:0000  (00:B000)           _kBank4: 	equ 0B000h ;- B7FFh (B000h used)
      13   00:0000                      	
      14   00:0000  (00)                		page 0
      15   00:4000                      		
      16   00:4000                              org 4000h
      17   00:4000                              dw  4241h,START,0,0,0,0,0,0
      17   00:4000  41 42 10 40 00 00 00 00 00 00 00 00 00 00 00 00 
      18   00:4010                      
      19   00:4010  (00:0004)           CGTABL:			equ	0x0004		
      20   00:4010  (00:0040)           MAX_SPRITES:	equ	64		; System flikering
      21   00:4010  (00:3800)           SPRTBL:			equ	0x3800	; Tabla de Sprites
      22   00:4010  (00:1B00)           SPRATR:			equ	0x1B00	; Tabla de los atributos de los sprites
      23   00:4010  (00:5B00)           SATor64:		equ	0x5b00
      24   00:4010                      
      25   00:4010  (00:00D1)           SPR_Y_NODRAW:	equ	209
      26   00:4010                      
      27   00:4010  (00:0000)           SPRITE_Y		equ	0
      28   00:4010  (00:0001)           SPRITE_X		equ	1
      29   00:4010  (00:0002)           SPRITE_INDEX	equ	2
      30   00:4010  (00:0003)           SPRITE_COLOR	equ	3
      31   00:4010                      	
      32   00:4010                      
      33   00:4010                      START:  
      34   00:4010  CD 2B 40            		call	screeninit
      35   00:4013                      		
      36   00:4013  AF                  		xor		a
      37   00:4014  32 01 C1            		ld		[m_iSprDrawFrame],a		
      38   00:4017                      		
      39   00:4017                      				
      40   00:4017  AF                  1:		xor		a
      41   00:4018  32 00 C1            		ld		(ram_count),a
      42   00:401B  CD 9C 40            		call	sat_reset
      43   00:401E                      		
      44   00:401E  CD 4D 40            2:		call	addsprite
      45   00:4021  20 FB               		jr	nz,2b
      46   00:4023                      
      47   00:4023  76                  		halt              
      48   00:4024  CD 89 40            		call	DRAW_SPRITES
      49   00:4027                      
      50   00:4027                      		; ld	e,8
      51   00:4027                      		; call   	checkkbd      
      52   00:4027                      		; and		1
      53   00:4027                      		; call	z,addsprite
      54   00:4027                      				
      55   00:4027  C3 17 40            		jp	1b
      56   00:402A                      		
      57   00:402A  C9                  		ret    
      58   00:402B                      ;-----------------------------------------------------------
      59   00:402B                      		
      60   00:402B                      screeninit:
      61   00:402B  3E 02               		ld		a,2
      62   00:402D  CD 5F 00            		call	005fh		
      63   00:4030  21 00 38            		ld		hl,SPRTBL
      64   00:4033  CD 53 00            		call	0053h		
      65   00:4036                      
      66   00:4036  2A 04 00            		ld		hl,(CGTABL)
      67   00:4039  01 98 00            		ld		bc,098h
      68   00:403C                      [8]		otir
      68   00:403C  ED B3 ED B3 ED B3 ED B3 ED B3 ED B3 ED B3 ED B3 
      69   00:404C  C9                  		ret
      70   00:404D                      ;-----------------------------------------------------------
      71   00:404D                      
      72   00:404D                      addsprite
      73   00:404D  FD 21 05 C1         		ld	iy,ramdata
      74   00:4051  3A 00 C1            		ld	a,(ram_count)
      75   00:4054  E6 03               		and	00000011b
      76   00:4056  87 87 87 87 87 87   [6]		add	a,a					; x64
      77   00:405C  C6 20               		add	a,32
      78   00:405E  FD 77 01            		ld	(iy+SPRITE_X),a		; x
      79   00:4061                      
      80   00:4061  3A 00 C1            		ld	a,(ram_count)
      81   00:4064  E6 FC               		and	11111100b
      82   00:4066  87                  		add	a,a					; x8
      83   00:4067  FD 77 00            		ld	(iy+SPRITE_Y),a		; y
      84   00:406A                      
      85   00:406A  3A 00 C1            		ld	a,(ram_count)
      86   00:406D  E6 07               		and	7
      87   00:406F  C6 08               		add	a,8
      88   00:4071  FD 77 03            		ld	(iy+SPRITE_COLOR),a		; c
      89   00:4074  FD 36 02 41         		ld	(iy+SPRITE_INDEX),'A'	; sp
      90   00:4078                      
      91   00:4078  FD 21 05 C1         		ld	iy,ramdata
      92   00:407C  CD A7 40            		call	INSERT_SPRITE
      93   00:407F                      		
      94   00:407F  3A 00 C1            		ld	a,(ram_count)
      95   00:4082  3C                  		inc	a
      96   00:4083  E6 3F               		and	63
      97   00:4085  32 00 C1            		ld	(ram_count),a
      98   00:4088  C9                  		ret
      99   00:4089                      
     100   00:4089                      ;-----------------------------------------------------------
     101   00:4089                      ; Draw sprites
     102   00:4089                      ;-----------------------------------------------------------
     103   00:4089                      DRAW_SPRITES:
     104   00:4089                      	;---------------------------------------------------
     105   00:4089                      	; SISTEM FLIKERING----------------------------------
     106   00:4089                      	;---------------------------------------------------
     107   00:4089                      
     108   00:4089  3A 01 C1            	ld	a,[m_iSprDrawFrame]
     109   00:408C  B7                  	or	a
     110   00:408D  CC D2 40            	call	z,WRITESAT			; Note: WRITESAT returns always with Z
     111   00:4090  C4 00 41            	call	nz,revWRITESAT
     112   00:4093                      
     113   00:4093                      	;---------------------------------------------------
     114   00:4093                      	; par-inpar frame run
     115   00:4093                      
     116   00:4093  3A 01 C1            	ld	a,[m_iSprDrawFrame]
     117   00:4096  EE 01               	xor	1
     118   00:4098  32 01 C1            	ld	[m_iSprDrawFrame],a
     119   00:409B                      
     120   00:409B  C9                  	ret
     121   00:409C                      	
     122   00:409C                      sat_reset:
     123   00:409C                      	;---------------------------------------------------
     124   00:409C                      	; reset virtual sat
     125   00:409C  AF                  	xor	a
     126   00:409D  32 02 C1            	ld	[m_iNumSpr],a
     127   00:40A0  21 00 C0            	ld	hl,m_iSprAtr
     128   00:40A3  22 03 C1            	ld	[m_iSprAtrPointer],hl
     129   00:40A6  C9                  	ret
     130   00:40A7                      	;---------------------------------------------------
     131   00:40A7                      
     132   00:40A7                      
     133   00:40A7                      ;-----------------------------------------------------------
     134   00:40A7                      ; Sprite system
     135   00:40A7                      ; IY = position of buffer. The buffer format must be y, x, color, sprite
     136   00:40A7                      ;-----------------------------------------------------------
     137   00:40A7                      INSERT_SPRITE:
     138   00:40A7  2A 03 C1            	ld	hl,[m_iSprAtrPointer]
     139   00:40AA  11 00 40            	ld	de, 0xFFFF & (-m_iSprAtr) 
     140   00:40AD  19                  	add	hl,de
     141   00:40AE  25                  	dec	h					; if hl=64*4 return 
     142   00:40AF  C8                  	ret	z					
     143   00:40B0                      	; set values
     144   00:40B0  2A 03 C1            	ld	hl,[m_iSprAtrPointer]
     145   00:40B3  FD 7E 00            	ld	a,[iy+SPRITE_Y]		; +19c
     146   00:40B6  77                  	ld	[hl],a				; +7c add y data
     147   00:40B7  23                  	inc	hl					; +6c
     148   00:40B8  FD 7E 01            	ld	a,[iy+SPRITE_X]		; +19c
     149   00:40BB  77                  	ld	[hl],a				; +7c add x data
     150   00:40BC  23                  	inc	hl					; +6c
     151   00:40BD  FD 7E 02            	ld	a,[iy+SPRITE_INDEX]	; +19c
     152   00:40C0  77                  	ld	[hl],a				; +7c add color
     153   00:40C1  23                  	inc	hl					; +6c
     154   00:40C2  FD 7E 03            	ld	a,[iy+SPRITE_COLOR]	; +19c
     155   00:40C5  77                  	ld	[hl],a				; +7c add sprite index
     156   00:40C6  23                  	inc	hl					; +6c
     157   00:40C7  22 03 C1            	ld	[m_iSprAtrPointer],hl
     158   00:40CA                      							
     159   00:40CA                      	; increment num sprites index
     160   00:40CA  3A 02 C1            	ld	a,[m_iNumSpr]
     161   00:40CD  3C                  	inc	a
     162   00:40CE  32 02 C1            	ld	[m_iNumSpr],a
     163   00:40D1  C9                  	ret
     164   00:40D2                      	
     165   00:40D2                      ; -------------------
     166   00:40D2                      ; direct write sat
     167   00:40D2                      ; 
     168   00:40D2                      ; -------------------
     169   00:40D2                      WRITESAT:
     170   00:40D2  2A 03 C1            	ld	hl,[m_iSprAtrPointer]
     171   00:40D5  01 00 40            	ld	bc, 0xFFFF & (-m_iSprAtr) 
     172   00:40D8  09                  	add	hl,bc
     173   00:40D9                      	
     174   00:40D9  3E 00               	ld	a,SATor64 & 255
     175   00:40DB  D3 99               	out	[0x99],a
     176   00:40DD  3E 5B               	ld	a,SATor64/256
     177   00:40DF  D3 99               	out	[0x99],a
     178   00:40E1                      
     179   00:40E1  7D                  	ld	a,l
     180   00:40E2  B4                  	or	h
     181   00:40E3  28 16               	jr	z,ws2f
     182   00:40E5                      	
     183   00:40E5  45                  	ld	b,l			;	always safe, as we test for more than 64 sprites in INSERT_SPRITE
     184   00:40E6  3E 80               	ld	a,128
     185   00:40E8  B8                  	cp	b
     186   00:40E9  30 01               	jr	nc,1f
     187   00:40EB  47                  	ld	b,a
     188   00:40EC                      1:
     189   00:40EC                      	
     190   00:40EC  21 00 C0            	ld	hl,m_iSprAtr
     191   00:40EF  0E 98               	ld	c,0x98
     192   00:40F1                      ws1b:
     193   00:40F1                      [4]	outi
     193   00:40F1  ED A3 ED A3 ED A3 ED A3 
     194   00:40F9  20 F6               	jr	nz,ws1b
     195   00:40FB                      			
     196   00:40FB                      ws2f:	
     197   00:40FB  3E D0               	ld	a,208
     198   00:40FD  D3 98               	out	[0x98],a
     199   00:40FF  C9                  	ret 
     200   00:4100                      
     201   00:4100                      			
     202   00:4100                      ; -------------------
     203   00:4100                      ; reverse write sat
     204   00:4100                      ; 
     205   00:4100                      ; -------------------
     206   00:4100                      revWRITESAT:
     207   00:4100  2A 03 C1            	ld	hl,[m_iSprAtrPointer]
     208   00:4103  01 00 40            	ld	bc, 0xFFFF & (-m_iSprAtr) 
     209   00:4106  09                  	add	hl,bc
     210   00:4107                      	
     211   00:4107  3E 00               	ld a,SATor64 & 255
     212   00:4109  D3 99               	out (0x99),a
     213   00:410B  3E 5B               	ld a,SATor64/256
     214   00:410D  D3 99               	out (0x99),a
     215   00:410F                      
     216   00:410F  7D                  	ld	a,l
     217   00:4110  B4                  	or	h
     218   00:4111  28 1E               	jr	z,rw2f
     219   00:4113                      
     220   00:4113  45                  	ld	b,l			;	always safe, as we test for more than 64 sprites in INSERT_SPRITE
     221   00:4114  3E 80               	ld	a,128
     222   00:4116  B8                  	cp	b
     223   00:4117  30 01               	jr	nc,1f
     224   00:4119  47                  	ld	b,a
     225   00:411A                      1:
     226   00:411A                      
     227   00:411A  2A 03 C1            	ld	hl,[m_iSprAtrPointer]
     228   00:411D  11 FC FF            	ld	de,-4
     229   00:4120  19                  	add	hl,de
     230   00:4121  11 F8 FF            	ld	de,-8
     231   00:4124  0E 98               	ld c,0x98
     232   00:4126                      rw1b:
     233   00:4126                      [4]	outi
     233   00:4126  ED A3 ED A3 ED A3 ED A3 
     234   00:412E  19                  	add	hl,de		; it does not affect Z
     235   00:412F  20 F5               	jr	nz,rw1b
     236   00:4131                      
     237   00:4131                      rw2f:
     238   00:4131  3E D0               	ld	a,208
     239   00:4133  D3 98               	out	(0x98),a
     240   00:4135  C9                  	ret 	
     241   00:4136                      
     242   00:4136                      ; // Line Bit_7 Bit_6 Bit_5 Bit_4 Bit_3 Bit_2 Bit_1 Bit_0
     243   00:4136                      ; // 0 	   "7"  "6"   "5"   "4"   "3"   "2"   "1"   "0"
     244   00:4136                      ; // 1 	   ";"  "]"   "["   "\"   "="   "-"   "9"   "8"
     245   00:4136                      ; // 2 	   "B"  "A"   ???   "/"   "."   ","   "'"   "`"
     246   00:4136                      ; // 3 	   "J"  "I"   "H"   "G"   "F"   "E"   "D"   "C"
     247   00:4136                      ; // 4 	   "R"  "Q"   "P"   "O"   "N"   "M"   "L"   "K"
     248   00:4136                      ; // 5 	   "Z"  "Y"   "X"   "W"   "V"   "U"   "T"   "S"
     249   00:4136                      ; // 6 	   F3 	 F2    F1  CODE   CAP  GRAPH  CTRL SHIFT
     250   00:4136                      ; // 7 	   RET  SEL    BS  STOP   TAB   ESC    F5    F4
     251   00:4136                      ; // 8 	   RIGHT DOWN  UP  LEFT   DEL   INS   HOME SPACE
     252   00:4136                      
     253   00:4136                      checkkbd:
     254   00:4136                      		; di
     255   00:4136  DB AA               		in	a,(0aah)
     256   00:4138  E6 F0               		and 011110000B			; upper 4 bits contain info to preserve
     257   00:413A  B3                  		or	e
     258   00:413B  D3 AA               		out (0aah),a
     259   00:413D  DB A9               		in	a,(0a9h)
     260   00:413F  6F                  		ld	l,a
     261   00:4140                      		; ei
     262   00:4140  C9                  		ret
     263   00:4141                      
     264   00:4141                      
     265   00:4141                      ;	16 bit divide and modulus routines
     266   00:4141                      ;	called with dividend in hl and divisor in de
     267   00:4141                      ;	returns with result in hl.
     268   00:4141                      ;	adiv (amod) is signed divide (modulus), ldiv (lmod) is unsigned
     269   00:4141                      
     270   00:4141                      	;global	adiv,ldiv,amod,lmod
     271   00:4141                      	;psect	text,class=CODE
     272   00:4141                      
     273   00:4141                      amod:
     274   00:4141  CD 50 41            	call	adiv
     275   00:4144  EB                  	ex	de,hl		;put modulus in hl
     276   00:4145  C9                  	ret
     277   00:4146                      
     278   00:4146                      lmod:
     279   00:4146  CD 4B 41            	call	ldiv
     280   00:4149  EB                  	ex	de,hl
     281   00:414A  C9                  	ret
     282   00:414B                      
     283   00:414B                      ldiv:
     284   00:414B  AF                  	xor	a
     285   00:414C  F5                  	push	af
     286   00:414D  EB                  	ex	de,hl
     287   00:414E  18 0B               	jr	dv1
     288   00:4150                      
     289   00:4150                      
     290   00:4150                      adiv:
     291   00:4150  7C                  	ld	a,h
     292   00:4151  AA                  	xor	d		;set sign flag for quotient
     293   00:4152  7C                  	ld	a,h		;get sign of dividend
     294   00:4153  F5                  	push	af
     295   00:4154  CD A3 41            	call	negif
     296   00:4157  EB                  	ex	de,hl
     297   00:4158  CD A3 41            	call	negif
     298   00:415B                      dv1:	
     299   00:415B  06 01               	ld	b,1
     300   00:415D  7C                  	ld	a,h
     301   00:415E  B5                  	or	l
     302   00:415F  20 02               	jr	nz,dv8
     303   00:4161  F1                  	pop	af
     304   00:4162  C9                  	ret
     305   00:4163                      
     306   00:4163                      dv8:
     307   00:4163  E5                  	push	hl
     308   00:4164  29                  	add	hl,hl
     309   00:4165  38 10               	jr	c,dv2
     310   00:4167  7A                  	ld	a,d
     311   00:4168  BC                  	cp	h
     312   00:4169  38 0C               	jr	c,dv2
     313   00:416B  C2 72 41            	jp	nz,dv6
     314   00:416E  7B                  	ld	a,e
     315   00:416F  BD                  	cp	l
     316   00:4170  38 05               	jr	c,dv2
     317   00:4172                      dv6:
     318   00:4172  F1                  	pop	af
     319   00:4173  04                  	inc	b
     320   00:4174  C3 63 41            	jp	dv8
     321   00:4177                      
     322   00:4177                      dv2:
     323   00:4177  E1                  	pop	hl
     324   00:4178  EB                  	ex	de,hl
     325   00:4179  E5                  	push	hl
     326   00:417A  21 00 00            	ld	hl,0
     327   00:417D  E3                  	ex	(sp),hl
     328   00:417E                      
     329   00:417E                      dv4:
     330   00:417E  7C                  	ld	a,h
     331   00:417F  BA                  	cp	d
     332   00:4180  38 09               	jr	c,dv3
     333   00:4182  C2 89 41            	jp	nz,dv5
     334   00:4185  7D                  	ld	a,l
     335   00:4186  BB                  	cp	e
     336   00:4187  38 02               	jr	c,dv3
     337   00:4189                      dv5:	
     338   00:4189  ED 52               	sbc	hl,de
     339   00:418B                      dv3:	
     340   00:418B  E3                  	ex	(sp),hl
     341   00:418C  3F                  	ccf
     342   00:418D  ED 6A               	adc	hl,hl
     343   00:418F  CB 3A               	srl	d
     344   00:4191  CB 1B               	rr	e
     345   00:4193  E3                  	ex	(sp),hl
     346   00:4194  10 E8               	djnz	dv4
     347   00:4196  D1                  	pop	de
     348   00:4197  EB                  	ex	de,hl
     349   00:4198  F1                  	pop	af
     350   00:4199  FC A6 41            	call	m,negat
     351   00:419C  EB                  	ex	de,hl
     352   00:419D  B7                  	or	a			;test remainder sign bit
     353   00:419E  FC A6 41            	call	m,negat
     354   00:41A1  EB                  	ex	de,hl
     355   00:41A2  C9                  	ret
     356   00:41A3                      
     357   00:41A3                      negif:
     358   00:41A3  CB 7C               	bit	7,h
     359   00:41A5  C8                  	ret	z
     360   00:41A6                      negat:
     361   00:41A6  44                  	ld	b,h
     362   00:41A7  4D                  	ld	c,l
     363   00:41A8  21 00 00            	ld	hl,0
     364   00:41AB  B7                  	or	a
     365   00:41AC  ED 42               	sbc	hl,bc
     366   00:41AE  C9                  	ret
     367   00:41AF                      	
     368   00:41AF                      ; Square of a 8 bit value
     369   00:41AF                      ; in: A = 8 bit value, ZF = sign of A
     370   00:41AF                      ; out: HL = A*A
     371   00:41AF                      sqr:
     372   00:41AF  CA B4 41            	jp	z,1f
     373   00:41B2  ED 44               	neg
     374   00:41B4  6F                  1:	ld	l,a
     375   00:41B5  26 00               	ld	h,0
     376   00:41B7  29                  	add	hl,hl
     377   00:41B8  01 C1 41            	ld	bc,tab
     378   00:41BB  09                  	add	hl,bc
     379   00:41BC  7E                  	ld	a,(hl)
     380   00:41BD  23                  	inc	hl
     381   00:41BE  66                  	ld	h,(hl)
     382   00:41BF  6F                  	ld	l,a
     383   00:41C0  C9                  	ret
     384   00:41C1                      tab: dw 0,1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,256,289,324,361,400,441,484,529,576,625,676,729,784,841,900,961,1024,1089,1156,1225,1296,1369,1444,1521,1600,1681,1764,1849,1936,2025,2116,2209,2304,2401,2500,2601,2704,2809,2916,3025,3136,3249,3364,3481,3600,3721,3844,3969,4096,4225,4356,4489,4624,4761,4900,5041,5184,5329,5476,5625,5776,5929,6084,6241,6400,6561,6724,6889,7056,7225,7396,7569,7744,7921,8100,8281,8464,8649,8836,9025,9216,9409,9604,9801,10000,10201,10404,10609,10816,11025,11236,11449,11664,11881,12100,12321,12544,12769,12996,13225,13456,13689,13924,14161,14400,14641,14884,15129,15376,15625,15876,16129,16384,16641,16900,17161,17424,17689,17956,18225,18496,18769,19044,19321,19600,19881,20164,20449,20736,21025,21316,21609,21904,22201,22500,22801,23104,23409,23716,24025,24336,24649,24964,25281,25600,25921,26244,26569,26896,27225,27556,27889,28224,28561,28900,29241,29584,29929,30276,30625,30976,31329,31684,32041,32400,32761,33124,33489,33856,34225,34596,34969,35344,35721,36100,36481,36864,37249,37636,38025,38416,38809,39204,39601,40000,40401,40804,41209,41616,42025,42436,42849,43264,43681,44100,44521,44944,45369,45796,46225,46656,47089,47524,47961,48400,48841,49284,49729,50176,50625,51076,51529,51984,52441,52900,53361,53824,54289,54756,55225,55696,56169,56644,57121,57600,58081,58564,59049,59536,60025,60516,61009,61504,62001,62500,63001,63504,64009,64516,65025
     384   00:41C1  00 00 01 00 04 00 09 00 10 00 19 00 24 00 31 00 
     384   00:41D1  40 00 51 00 64 00 79 00 90 00 A9 00 C4 00 E1 00 
     384   00:41E1  00 01 21 01 44 01 69 01 90 01 B9 01 E4 01 11 02 
     384   00:41F1  40 02 71 02 A4 02 D9 02 10 03 49 03 84 03 C1 03 
     384   00:4201  00 04 41 04 84 04 C9 04 10 05 59 05 A4 05 F1 05 
     384   00:4211  40 06 91 06 E4 06 39 07 90 07 E9 07 44 08 A1 08 
     384   00:4221  00 09 61 09 C4 09 29 0A 90 0A F9 0A 64 0B D1 0B 
     384   00:4231  40 0C B1 0C 24 0D 99 0D 10 0E 89 0E 04 0F 81 0F 
     384   00:4241  00 10 81 10 04 11 89 11 10 12 99 12 24 13 B1 13 
     384   00:4251  40 14 D1 14 64 15 F9 15 90 16 29 17 C4 17 61 18 
     384   00:4261  00 19 A1 19 44 1A E9 1A 90 1B 39 1C E4 1C 91 1D 
     384   00:4271  40 1E F1 1E A4 1F 59 20 10 21 C9 21 84 22 41 23 
     384   00:4281  00 24 C1 24 84 25 49 26 10 27 D9 27 A4 28 71 29 
     384   00:4291  40 2A 11 2B E4 2B B9 2C 90 2D 69 2E 44 2F 21 30 
     384   00:42A1  00 31 E1 31 C4 32 A9 33 90 34 79 35 64 36 51 37 
     384   00:42B1  40 38 31 39 24 3A 19 3B 10 3C 09 3D 04 3E 01 3F 
     384   00:42C1  00 40 01 41 04 42 09 43 10 44 19 45 24 46 31 47 
     384   00:42D1  40 48 51 49 64 4A 79 4B 90 4C A9 4D C4 4E E1 4F 
     384   00:42E1  00 51 21 52 44 53 69 54 90 55 B9 56 E4 57 11 59 
     384   00:42F1  40 5A 71 5B A4 5C D9 5D 10 5F 49 60 84 61 C1 62 
     384   00:4301  00 64 41 65 84 66 C9 67 10 69 59 6A A4 6B F1 6C 
     384   00:4311  40 6E 91 6F E4 70 39 72 90 73 E9 74 44 76 A1 77 
     384   00:4321  00 79 61 7A C4 7B 29 7D 90 7E F9 7F 64 81 D1 82 
     384   00:4331  40 84 B1 85 24 87 99 88 10 8A 89 8B 04 8D 81 8E 
     384   00:4341  00 90 81 91 04 93 89 94 10 96 99 97 24 99 B1 9A 
     384   00:4351  40 9C D1 9D 64 9F F9 A0 90 A2 29 A4 C4 A5 61 A7 
     384   00:4361  00 A9 A1 AA 44 AC E9 AD 90 AF 39 B1 E4 B2 91 B4 
     384   00:4371  40 B6 F1 B7 A4 B9 59 BB 10 BD C9 BE 84 C0 41 C2 
     384   00:4381  00 C4 C1 C5 84 C7 49 C9 10 CB D9 CC A4 CE 71 D0 
     384   00:4391  40 D2 11 D4 E4 D5 B9 D7 90 D9 69 DB 44 DD 21 DF 
     384   00:43A1  00 E1 E1 E2 C4 E4 A9 E6 90 E8 79 EA 64 EC 51 EE 
     384   00:43B1  40 F0 31 F2 24 F4 19 F6 10 F8 09 FA 04 FC 01 FE 
     385   00:43C1                      	
     386   00:43C1                      ;Square root of 16-bit value
     387   00:43C1                      ;In: HL = value
     388   00:43C1                      ;Out: D = result (rounded down)
     389   00:43C1                      ;
     390   00:43C1                      sqrt:
     391   00:43C1  11 40 00            	ld de,0x0040
     392   00:43C4  7D                  	ld a,l
     393   00:43C5  6C                  	ld l,h
     394   00:43C6  62                  	ld h,d
     395   00:43C7  B7                  	or a
     396   00:43C8                      
     397   00:43C8                      	repeat	8			; unroll 8 times
     398   00:43C8                    < 		sbc hl,de
     399   00:43C8                    < 		jr nc,1f
     400   00:43C8                    < 		add hl,de
     401   00:43C8                    < 1:
     402   00:43C8                    < 		ccf
     403   00:43C8                    < 		rl d
     404   00:43C8                    < 		add a,a
     405   00:43C8                    < 		adc hl,hl
     406   00:43C8                    < 		add a,a
     407   00:43C8                    < 		adc hl,hl
     408   00:43C8                    < 	endrepeat
     408   00:43C8  ED 52 30 01 19 3F CB 12 87 ED 6A 87 ED 6A ED 52 
     408   00:43D8  30 01 19 3F CB 12 87 ED 6A 87 ED 6A ED 52 30 01 
     408   00:43E8  19 3F CB 12 87 ED 6A 87 ED 6A ED 52 30 01 19 3F 
     408   00:43F8  CB 12 87 ED 6A 87 ED 6A ED 52 30 01 19 3F CB 12 
     408   00:4408  87 ED 6A 87 ED 6A ED 52 30 01 19 3F CB 12 87 ED 
     408   00:4418  6A 87 ED 6A ED 52 30 01 19 3F CB 12 87 ED 6A 87 
     408   00:4428  ED 6A ED 52 30 01 19 3F CB 12 87 ED 6A 87 ED 6A 
     409   00:4438                      
     410   00:4438  C9                  	ret
     411   00:4439                      
     412   00:4439                      
     413   00:4439                      ;Divide a 17-bit value (with sign in ZF)
     414   00:4439                      ;In: Divide HL by divider D
     415   00:4439                      ;Out: HL = result
     416   00:4439                      ;
     417   00:4439                      	
     418   00:4439                      Div16:
     419   00:4439  D5                  	push	de
     420   00:443A  5A                  	ld	e,d
     421   00:443B  16 00               	ld	d,0
     422   00:443D  F5                  	push	af
     423   00:443E  28 07               	jr	z,1f
     424   00:4440  44                  	ld	b,h
     425   00:4441  4D                  	ld	c,l
     426   00:4442  AF                  	xor	a
     427   00:4443  6F                  	ld	l,a
     428   00:4444  67                  	ld	h,a
     429   00:4445  ED 42               	sbc	hl,bc
     430   00:4447                      1:
     431   00:4447  CD 4B 41            	call	ldiv
     432   00:444A  F1                  	pop	af
     433   00:444B  28 07               	jr	z,1f
     434   00:444D  44                  	ld	b,h
     435   00:444E  4D                  	ld	c,l
     436   00:444F  AF                  	xor	a
     437   00:4450  6F                  	ld	l,a
     438   00:4451  67                  	ld	h,a
     439   00:4452  ED 42               	sbc	hl,bc
     440   00:4454                      1:
     441   00:4454  D1                  	pop		de
     442   00:4455  C9                  	ret	
     443   00:4456                      		
     444   00:4456                      		
     445   00:4456                      ; This routine performs the operation HL = DE*A/256
     446   00:4456                      
     447   00:4456                      Mul24:              
     448   00:4456  CB 7A               	bit	7,d
     449   00:4458  CA 6D 44            	jp	z,UsignedMul
     450   00:445B                      
     451   00:445B  21 00 00            	ld	hl,0
     452   00:445E  B7                  	or	a
     453   00:445F  ED 52               	sbc	hl,de
     454   00:4461  EB                  	ex	de,hl						; DE = -DE
     455   00:4462                      	
     456   00:4462  CD 6D 44            	call	UsignedMul				; HL = DE*A/256
     457   00:4465                      
     458   00:4465  EB                  	ex	de,hl
     459   00:4466  21 00 00            	ld	hl,0
     460   00:4469  B7                  	or	a
     461   00:446A  ED 52               	sbc	hl,de						; HL = -HL
     462   00:446C  C9                  	ret
     463   00:446D                      
     464   00:446D                      UsignedMul:
     465   00:446D                      	
     466   00:446D  0E 00               	ld	c,0
     467   00:446F  69                  	ld	l,c
     468   00:4470  61                  	ld	h,c
     469   00:4471                      	
     470   00:4471                      ;Input: A = Multiplier, DE = Multiplicand, HL = 0, C = 0
     471   00:4471                      ;Output: A:HL = Product
     472   00:4471                      
     473   00:4471  87                  	add	a,a		; optimised 1st iteration
     474   00:4472  30 02               	jr	nc,$+4
     475   00:4474  62                  	ld	h,d
     476   00:4475  6B                  	ld	l,e
     477   00:4476                      
     478   00:4476                      	repeat	7
     479   00:4476                    < 
     480   00:4476                    < 	add	hl,hl		; unroll 7 times
     481   00:4476                    < 	rla			; ...
     482   00:4476                    < 	jr	nc,$+4		; ...
     483   00:4476                    < 	add	hl,de		; ...
     484   00:4476                    < 	adc	a,c		; ...
     485   00:4476                    < 	endrepeat
     485   00:4476  29 17 30 02 19 89 29 17 30 02 19 89 29 17 30 02 
     485   00:4486  19 89 29 17 30 02 19 89 29 17 30 02 19 89 29 17 
     485   00:4496  30 02 19 89 29 17 30 02 19 89 
     486   00:44A0                      
     487   00:44A0  6C                  	ld	l,h
     488   00:44A1  67                  	ld	h,a
     489   00:44A2                      	
     490   00:44A2  C9                  	ret
     491   00:44A3                      		
     492   00:44A3                      ; ix		 -> main bullet
     493   00:44A3                      ; iy 		-> 2nd bullet
     494   00:44A3                      ; iy+rsize	-> 3rd bullet		
     495   00:44A3                      
     496   00:44A3                      ; use as temporary area some dummy bios locations
     497   00:44A3  (00:F67A)           temp01	equ 0xF67A	
     498   00:44A3  (00:F67C)           temp02	equ	0xF67C
     499   00:44A3                      
     500   00:44A3                      ;;;;;;;;;;;;;;;;;;;;
     501   00:44A3  (00:0000)           ENEMY_Y		equ	0
     502   00:44A3  (00:0001)           ENEMY_Y_SUB	equ	1
     503   00:44A3  (00:0002)           ENEMY_X		equ	2
     504   00:44A3  (00:0003)           ENEMY_X_SUB	equ	3
     505   00:44A3  (00:0004)           ENEMY_SPRITE	equ	4
     506   00:44A3  (00:0005)           ENEMY_COLOR	equ	5
     507   00:44A3                      	
     508   00:44A3  (D000)              	map 0xd000
     509   00:44A3  00 (2)              m_iP1Y:		ds	2
     510   00:44A5  00 (2)              m_iP1X:		ds	2	
     511   00:44A7  (0000)              	endmap
     512   00:44A7                      	
     513   00:44A7                      ;;;;;;;;;;;;;;;;;;;;;;
     514   00:44A7                      
     515   00:44A7  (00:0000)           _NPC_y		equ	ENEMY_Y
     516   00:44A7  (00:0002)           _NPC_x		equ	ENEMY_X
     517   00:44A7                      
     518   00:44A7  (00:0003)           _NPC_dy		equ	3
     519   00:44A7  (00:0004)           _NPC_ddy	equ	4
     520   00:44A7  (00:0005)           _NPC_dx		equ	5
     521   00:44A7  (00:0006)           _NPC_ddx	equ	6
     522   00:44A7  (00:44A3)           myX			equ	m_iP1Y
     523   00:44A7  (00:44A5)           myY			equ	m_iP1X
     524   00:44A7                      
     525   00:44A7                      	; 1st bullet
     526   00:44A7                      
     527   00:44A7                      	; dx
     528   00:44A7  3A A3 44            	ld a,(myX)
     529   00:44AA  DD 96 02            	sub a,(ix+_NPC_x)
     530   00:44AD  DD 77 05            	ld (ix+_NPC_dx),a
     531   00:44B0  9F                  	sbc	a,a
     532   00:44B1  DD 77 06            	ld	(ix+_NPC_ddx),a					;DDX = HI byte, DX = LO byte
     533   00:44B4                      	
     534   00:44B4                      	; dy
     535   00:44B4  3A A5 44            	ld a,(myY)
     536   00:44B7  DD 96 00            	sub a,(ix+_NPC_y)
     537   00:44BA  DD 77 03            	ld (ix+_NPC_dy),a
     538   00:44BD  9F                  	sbc	a,a
     539   00:44BE  DD 77 04            	ld	(ix+_NPC_ddy),a					;DDY = HI byte, DY = LO byte
     540   00:44C1                      	
     541   00:44C1  DD 7E 05            	ld	a,(ix+_NPC_dx)	
     542   00:44C4  DD CB 06 7E         	bit	7,(ix+_NPC_ddx)
     543   00:44C8  CD AF 41            	call	sqr							;HL=|A|^2
     544   00:44CB  EB                  	ex	de,hl
     545   00:44CC                      	
     546   00:44CC  DD 7E 03            	ld	a,(ix+_NPC_dy)	
     547   00:44CF  DD CB 04 7E         	bit	7,(ix+_NPC_ddy)
     548   00:44D3  CD AF 41            	call	sqr							;HL=|A|^2
     549   00:44D6  19                  	add	hl,de							;HL = |DX|^2 + |DY|^2
     550   00:44D7                      	
     551   00:44D7  CD C1 43            	call sqrt							; D = sqrt(|DX|^2 + |DY|^2)
     552   00:44DA                      
     553   00:44DA  D5                  	push	de
     554   00:44DB  DD 66 03            	ld	h,(ix+_NPC_dy)
     555   00:44DE  2E 00               	ld	l,0
     556   00:44E0  DD CB 04 7E         	bit	7,(ix+_NPC_ddy)
     557   00:44E4  CD 39 44            	call	Div16						; HL = HL /D
     558   00:44E7  29                  	add	hl,hl							; here to increase bullet speed
     559   00:44E8  DD 75 03            	ld	(ix+_NPC_dy),l
     560   00:44EB  DD 74 04            	ld	(ix+_NPC_ddy),h
     561   00:44EE                      
     562   00:44EE  D1                  	pop	de
     563   00:44EF  DD 66 05            	ld	h,(ix+_NPC_dx)
     564   00:44F2  2E 00               	ld	l,0
     565   00:44F4  DD CB 06 7E         	bit	7,(ix+_NPC_ddx)
     566   00:44F8  CD 39 44            	call	Div16						; HL = HL /D
     567   00:44FB  29                  	add	hl,hl							; here to increase bullet speed
     568   00:44FC  DD 75 05            	ld	(ix+_NPC_dx),l
     569   00:44FF  DD 74 06            	ld	(ix+_NPC_ddx),h
     570   00:4502                      	
     571   00:4502                      					; now we have |dx|^2+|dy|^2=1
     572   00:4502                      
     573   00:4502                      
     574   00:4502                      	; a=15;
     575   00:4502                      	; cos_a = round(cos(2*pi*a/360)*256) 
     576   00:4502                      	; sin_a = round(sin(2*pi*a/360)*256) 
     577   00:4502                          
     578   00:4502  (00:00F7)           cos_a	equ 247
     579   00:4502  (00:0042)           sin_a	equ 66
     580   00:4502                      		
     581   00:4502                      	; dx' = dx*cos(a)-dy*sin(a)
     582   00:4502                      
     583   00:4502  DD 5E 05            	ld	e,(ix+_NPC_dx)
     584   00:4505  DD 56 06            	ld	d,(ix+_NPC_ddx)
     585   00:4508  3E F7               	ld	a,cos_a
     586   00:450A  CD 56 44            	call	Mul24
     587   00:450D  E5                  	push	hl				; dx*cos(a)
     588   00:450E                      	
     589   00:450E  DD 5E 03            	ld	e,(ix+_NPC_dy)
     590   00:4511  DD 56 04            	ld	d,(ix+_NPC_ddy)
     591   00:4514  3E 42               	ld	a,sin_a
     592   00:4516  CD 56 44            	call	Mul24			; dy*sin(a)
     593   00:4519  D1                  	pop		de				
     594   00:451A  EB                  	ex		de,hl
     595   00:451B                      	
     596   00:451B  A7                  	and	a
     597   00:451C  ED 52               	sbc	hl,de				; dx' = dx*cos(a)-dy*sin(a)
     598   00:451E  FD 75 05            	ld	(iy+_NPC_dx),l
     599   00:4521  FD 74 06            	ld	(iy+_NPC_ddx),h
     600   00:4524                      
     601   00:4524  19                  	add	hl,de
     602   00:4525  19                  	add	hl,de
     603   00:4526  22 7A F6            	ld	(temp01),hl			; dx*cos(a)+dy*sin(a)
     604   00:4529                      	
     605   00:4529                      	
     606   00:4529                      	; dy' = dy*cos(a)+dx*sin(a)
     607   00:4529                      
     608   00:4529  DD 5E 03            	ld	e,(ix+_NPC_dy)
     609   00:452C  DD 56 04            	ld	d,(ix+_NPC_ddy)
     610   00:452F  3E F7               	ld	a,cos_a
     611   00:4531  CD 56 44            	call	Mul24
     612   00:4534  E5                  	push	hl				; dy*cos(a)
     613   00:4535                      
     614   00:4535  DD 5E 05            	ld	e,(ix+_NPC_dx)
     615   00:4538  DD 56 06            	ld	d,(ix+_NPC_ddx)
     616   00:453B  3E 42               	ld	a,sin_a
     617   00:453D  CD 56 44            	call	Mul24			; dx*sin(a)
     618   00:4540  D1                  	pop	de					
     619   00:4541  EB                  	ex		de,hl
     620   00:4542                      
     621   00:4542  A7                  	and	a
     622   00:4543  ED 52               	sbc	hl,de
     623   00:4545  22 7C F6            	ld	(temp02),hl			; dy*cos(a)-dx*sin(a)
     624   00:4548                      	
     625   00:4548  19                  	add	hl,de
     626   00:4549  19                  	add	hl,de				; dy' = dy*cos(a)+dx*sin(a)
     627   00:454A  FD 75 03            	ld	(iy+_NPC_dy),l
     628   00:454D  FD 74 04            	ld	(iy+_NPC_ddy),h		
     629   00:4550                      		
     630   00:4550                      		
     631   00:4550  2A 7A F6            	ld	hl,(temp01)
     632   00:4553  FD 75 05            	ld	(iy+_NPC_dx),l
     633   00:4556  FD 74 06            	ld	(iy+_NPC_ddx),h
     634   00:4559                      	
     635   00:4559  2A 7C F6            	ld	hl,(temp02)
     636   00:455C  FD 75 03            	ld	(iy+_NPC_dy),l
     637   00:455F  FD 74 04            	ld	(iy+_NPC_ddy),h		
     638   00:4562                      	
     639   00:4562  (C000)              	map 0xc000
     640   00:4562                      	
     641   00:4562                      	; SPRITE MACHINE
     642   00:4562  (00:C000)           m_iSprAtr:			#(MAX_SPRITES*4)		; Sprite system buffers
     643   00:4562                      
     644   00:4562  (00:C100)           ram_count:			#1
     645   00:4562                      	
     646   00:4562  (00:C101)           m_iSprDrawFrame:	#1
     647   00:4562  (00:C102)           m_iNumSpr:			#1
     648   00:4562  (00:C103)           m_iSprAtrPointer:	#2
     649   00:4562                      
     650   00:4562                      
     651   00:4562  (00:C105)           ramdata:			#4
     652   00:4562  (0000)              	endmap

    LABELS
-------------------------------------------------
00:00005000 X _kBank1
00:00007000 X _kBank2
00:00009000 X _kBank3
00:0000B000 X _kBank4
00:00000004   CGTABL
00:00000040   MAX_SPRITES
00:00003800   SPRTBL
00:00001B00 X SPRATR
00:00005B00   SATor64
00:000000D1 X SPR_Y_NODRAW
00:00000000   SPRITE_Y
00:00000001   SPRITE_X
00:00000002   SPRITE_INDEX
00:00000003   SPRITE_COLOR
00:00004010   START
00:0000402B   screeninit
00:0000404D   addsprite
00:00004089   DRAW_SPRITES
00:0000409C   sat_reset
00:000040A7   INSERT_SPRITE
00:000040D2   WRITESAT
00:000040F1   ws1b
00:000040FB   ws2f
00:00004100   revWRITESAT
00:00004126   rw1b
00:00004131   rw2f
00:00004136 X checkkbd
00:00004141 X amod
00:00004146 X lmod
00:0000414B   ldiv
00:00004150   adiv
00:0000415B   dv1
00:00004163   dv8
00:00004172   dv6
00:00004177   dv2
00:0000417E   dv4
00:00004189   dv5
00:0000418B   dv3
00:000041A3   negif
00:000041A6   negat
00:000041AF   sqr
00:000041C1   tab
00:000043C1   sqrt
00:00004439   Div16
00:00004456   Mul24
00:0000446D   UsignedMul
00:0000F67A   temp01
00:0000F67C   temp02
00:00000000   ENEMY_Y
00:00000001 X ENEMY_Y_SUB
00:00000002   ENEMY_X
00:00000003 X ENEMY_X_SUB
00:00000004 X ENEMY_SPRITE
00:00000005 X ENEMY_COLOR
00:000044A3   m_iP1Y
00:000044A5   m_iP1X
00:00000000   _NPC_y
00:00000002   _NPC_x
00:00000003   _NPC_dy
00:00000004   _NPC_ddy
00:00000005   _NPC_dx
00:00000006   _NPC_ddx
00:000044A3   myX
00:000044A5   myY
00:000000F7   cos_a
00:00000042   sin_a
00:0000C000   m_iSprAtr
00:0000C100   ram_count
00:0000C101   m_iSprDrawFrame
00:0000C102   m_iNumSpr
00:0000C103   m_iSprAtrPointer
00:0000C105   ramdata


 Output: SAT64TEST.out
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: *  Used: 00000000

    No output

 Output: SAT64TEST.rom
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: 00002000  Used: 00000562

   Address   Length Align   Label
   00004000    1378         START
   00004562    6814       <empty>

 Page: 01
  Org: 00006000  Size: 00002000  Used: 00000000

   00006000    8192       <empty>

 Page: 02
  Org: 00006000  Size: 00002000  Used: 00000000

   00006000    8192       <empty>

 Page: 03
  Org: 00006000  Size: 00002000  Used: 00000000

   00006000    8192       <empty>

 Page: 04
  Org: 00006000  Size: 00002000  Used: 00000000

   00006000    8192       <empty>

 Page: 05
  Org: 00006000  Size: 00002000  Used: 00000000

   00006000    8192       <empty>

 Page: 06
  Org: 00006000  Size: 00002000  Used: 00000000

   00006000    8192       <empty>

 Page: 07
  Org: 00006000  Size: 00002000  Used: 00000000

   00006000    8192       <empty>
