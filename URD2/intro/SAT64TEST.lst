Sjasm Z80 Assembler v0.42c - www.xl2s.tk             [2016.03.10 - 09:02:15]

SAT64TEST.asm
Errors: 0

       1   00:0000                      		output "SAT64TEST.rom"
       2   00:0000                      
       3   00:0000                      		defpage	 0,0x4000, 0x2000		; page 0 main code 
       4   00:0000                      		defpage	 1,0x6000, 0x2000		; page 1 
       5   00:0000                      		defpage	 2..7					; swapped data 
       6   00:0000                      	
       7   00:0000                      		;	konami scc
       8   00:0000                      		
       9   00:0000  (00:5000)           _kBank1:	equ 05000h ;- 57FFh (5000h used)
      10   00:0000  (00:7000)           _kBank2: 	equ 07000h ;- 77FFh (7000h used)
      11   00:0000  (00:9000)           _kBank3: 	equ 09000h ;- 97FFh (9000h used)
      12   00:0000  (00:B000)           _kBank4: 	equ 0B000h ;- B7FFh (B000h used)
      13   00:0000                      	
      14   00:0000  (00)                		page 0
      15   00:4000                      		
      16   00:4000                              org 4000h
      17   00:4000                              dw  4241h,START,0,0,0,0,0,0
      17   00:4000  41 42 32 40 00 00 00 00 00 00 00 00 00 00 00 00 
      18   00:4010                      
      19   00:4010  (00:0004)           CGTABL:			equ	0x0004		
      20   00:4010  (00:0040)           MAX_SPRITES:	equ	64		; System flikering
      21   00:4010  (00:3800)           SPRTBL:			equ	0x3800	; Tabla de Sprites
      22   00:4010  (00:1B00)           SPRATR:			equ	0x1B00	; Tabla de los atributos de los sprites
      23   00:4010  (00:5B00)           SATor64:		equ	0x5b00
      24   00:4010                      
      25   00:4010  (00:00D1)           SPR_Y_NODRAW:	equ	209
      26   00:4010                      
      27   00:4010  (00:0000)           SPRITE_Y		equ	0
      28   00:4010  (00:0001)           SPRITE_X		equ	1
      29   00:4010  (00:0002)           SPRITE_INDEX	equ	2
      30   00:4010  (00:0003)           SPRITE_COLOR	equ	3
      31   00:4010                      	
      32   00:4010                      screeninit:
      33   00:4010  3E 02               		ld		a,2
      34   00:4012  CD 5F 00            		call	005fh		
      35   00:4015  21 00 38            		ld		hl,SPRTBL
      36   00:4018  CD 53 00            		call	0053h		
      37   00:401B                      
      38   00:401B  2A 04 00            		ld		hl,(CGTABL)
      39   00:401E  01 98 00            		ld		bc,098h
      40   00:4021                      [8]		otir
      40   00:4021  ED B3 ED B3 ED B3 ED B3 ED B3 ED B3 ED B3 ED B3 
      41   00:4031  C9                  		ret
      42   00:4032                      
      43   00:4032                      START:  
      44   00:4032  CD 10 40            		call	screeninit
      45   00:4035                      		
      46   00:4035  AF                  		xor		a
      47   00:4036  32 01 C1            		ld		[m_iSprDrawFrame],a		
      48   00:4039                      		
      49   00:4039                      				
      50   00:4039  AF                  1:		xor		a
      51   00:403A  32 00 C1            		ld		(ram_count),a
      52   00:403D  CD A6 40            		call	sat_reset
      53   00:4040                      		
      54   00:4040  CD 4D 40            2:		call	addsprite
      55   00:4043  20 FB               		jr	nz,2b
      56   00:4045                      
      57   00:4045  76                  		halt              
      58   00:4046  CD 93 40            		call	DRAW_SPRITES
      59   00:4049                      
      60   00:4049                      		; ld	e,8
      61   00:4049                      		; call   	checkkbd      
      62   00:4049                      		; and		1
      63   00:4049                      		; call	z,addsprite
      64   00:4049                      		
      65   00:4049                      		
      66   00:4049  C3 39 40            		jp	1b
      67   00:404C                      		
      68   00:404C  C9                  		ret    
      69   00:404D                      
      70   00:404D                      addsprite
      71   00:404D  FD 21 05 C1         		ld	iy,ramdata
      72   00:4051  ED 5F               		ld	a,r
      73   00:4053  E6 03               		and	3
      74   00:4055  57                  		ld	d,a
      75   00:4056  3A 00 C1            		ld	a,(ram_count)
      76   00:4059  E6 07               		and	7
      77   00:405B  87 87 87 87 87      [5]		add	a,a				;	x32
      78   00:4060  C6 10               		add	a,16
      79   00:4062  82                  		add	a,d
      80   00:4063  FD 77 01            		ld	(iy+SPRITE_X),a		; x
      81   00:4066                      
      82   00:4066  ED 5F               		ld	a,r
      83   00:4068  E6 03               		and	3
      84   00:406A  57                  		ld	d,a
      85   00:406B  3A 00 C1            		ld	a,(ram_count)
      86   00:406E  E6 F8               		and	0xF8
      87   00:4070  87                  		add	a,a				;	x16
      88   00:4071  82                  		add	a,d
      89   00:4072  FD 77 00            		ld	(iy+SPRITE_Y),a		; y
      90   00:4075                      
      91   00:4075  ED 5F               		ld	a,r
      92   00:4077  E6 03               		and	3
      93   00:4079  C6 0A               		add	a,10
      94   00:407B  FD 77 03            		ld	(iy+SPRITE_COLOR),a		; c
      95   00:407E  FD 36 02 41         		ld	(iy+SPRITE_INDEX),'A'		; sp
      96   00:4082                      
      97   00:4082  FD 21 05 C1         		ld	iy,ramdata
      98   00:4086  CD B1 40            		call	INSERT_SPRITE
      99   00:4089                      		
     100   00:4089  3A 00 C1            		ld	a,(ram_count)
     101   00:408C  3C                  		inc	a
     102   00:408D  E6 3F               		and	63
     103   00:408F  32 00 C1            		ld	(ram_count),a
     104   00:4092                      
     105   00:4092  C9                  		ret
     106   00:4093                      	   
     107   00:4093                      
     108   00:4093                      ;-----------------------------------------------------------
     109   00:4093                      ; Draw sprites
     110   00:4093                      ;-----------------------------------------------------------
     111   00:4093                      DRAW_SPRITES:
     112   00:4093                      	;---------------------------------------------------
     113   00:4093                      	; SISTEM FLIKERING----------------------------------
     114   00:4093                      	;---------------------------------------------------
     115   00:4093                      
     116   00:4093  3A 01 C1            	ld	a,[m_iSprDrawFrame]
     117   00:4096  B7                  	or	a
     118   00:4097  CC DC 40            	call	z,WRITESAT			; Note: WRITESAT returns always with Z
     119   00:409A  C4 06 41            	call	nz,revWRITESAT
     120   00:409D                      
     121   00:409D                      	;---------------------------------------------------
     122   00:409D                      	; par-inpar frame run
     123   00:409D                      
     124   00:409D  3A 01 C1            	ld	a,[m_iSprDrawFrame]
     125   00:40A0  EE 01               	xor	1
     126   00:40A2  32 01 C1            	ld	[m_iSprDrawFrame],a
     127   00:40A5                      
     128   00:40A5  C9                  	ret
     129   00:40A6                      	
     130   00:40A6                      sat_reset:
     131   00:40A6                      	;---------------------------------------------------
     132   00:40A6                      	; reset virtual sat
     133   00:40A6  AF                  	xor	a
     134   00:40A7  32 02 C1            	ld	[m_iNumSpr],a
     135   00:40AA  21 00 C0            	ld	hl,m_iSprAtr
     136   00:40AD  22 03 C1            	ld	[m_iSprAtrPointer],hl
     137   00:40B0  C9                  	ret
     138   00:40B1                      	;---------------------------------------------------
     139   00:40B1                      
     140   00:40B1                      
     141   00:40B1                      ;-----------------------------------------------------------
     142   00:40B1                      ; Sprite system
     143   00:40B1                      ; IY = position of buffer. The buffer format must be y, x, color, sprite
     144   00:40B1                      ;-----------------------------------------------------------
     145   00:40B1                      INSERT_SPRITE:
     146   00:40B1  2A 03 C1            	ld	hl,[m_iSprAtrPointer]
     147   00:40B4  11 00 40            	ld	de, 0xFFFF & (-m_iSprAtr) 
     148   00:40B7  19                  	add	hl,de
     149   00:40B8  25                  	dec	h					; if hl=64*4 return 
     150   00:40B9  C8                  	ret	z					
     151   00:40BA                      	; set values
     152   00:40BA  2A 03 C1            	ld	hl,[m_iSprAtrPointer]
     153   00:40BD  FD 7E 00            	ld	a,[iy+SPRITE_Y]		; +19c
     154   00:40C0  77                  	ld	[hl],a				; +7c add y data
     155   00:40C1  23                  	inc	hl					; +6c
     156   00:40C2  FD 7E 01            	ld	a,[iy+SPRITE_X]		; +19c
     157   00:40C5  77                  	ld	[hl],a				; +7c add x data
     158   00:40C6  23                  	inc	hl					; +6c
     159   00:40C7  FD 7E 02            	ld	a,[iy+SPRITE_INDEX]	; +19c
     160   00:40CA  77                  	ld	[hl],a				; +7c add color
     161   00:40CB  23                  	inc	hl					; +6c
     162   00:40CC  FD 7E 03            	ld	a,[iy+SPRITE_COLOR]	; +19c
     163   00:40CF  77                  	ld	[hl],a				; +7c add sprite index
     164   00:40D0  23                  	inc	hl					; +6c
     165   00:40D1  22 03 C1            	ld	[m_iSprAtrPointer],hl
     166   00:40D4                      							
     167   00:40D4                      	; increment num sprites index
     168   00:40D4  3A 02 C1            	ld	a,[m_iNumSpr]
     169   00:40D7  3C                  	inc	a
     170   00:40D8  32 02 C1            	ld	[m_iNumSpr],a
     171   00:40DB  C9                  	ret
     172   00:40DC                      	
     173   00:40DC                      ; -------------------
     174   00:40DC                      ; direct write sat
     175   00:40DC                      ; 
     176   00:40DC                      ; -------------------
     177   00:40DC                      WRITESAT:
     178   00:40DC  2A 03 C1            	ld	hl,[m_iSprAtrPointer]
     179   00:40DF  01 00 40            	ld	bc, 0xFFFF & (-m_iSprAtr) 
     180   00:40E2  09                  	add	hl,bc
     181   00:40E3                      	
     182   00:40E3  3E 00               	ld	a,SATor64 & 255
     183   00:40E5  D3 99               	out	[0x99],a
     184   00:40E7  3E 5B               	ld	a,SATor64/256
     185   00:40E9  D3 99               	out	[0x99],a
     186   00:40EB                      
     187   00:40EB  7D                  	ld	a,l
     188   00:40EC  B4                  	or	h
     189   00:40ED  28 12               	jr	z,ws2f
     190   00:40EF                      	
     191   00:40EF  45                  	ld	b,l						;	always safe, as we test for more than 64 sprites in INSERT_SPRITE
     192   00:40F0                      	
     193   00:40F0  06 80               	ld	b,128
     194   00:40F2                      	
     195   00:40F2  21 00 C0            	ld	hl,m_iSprAtr
     196   00:40F5  0E 98               	ld	c,0x98
     197   00:40F7                      ws1b:
     198   00:40F7  ED A3               	outi
     199   00:40F9  ED A3               	outi
     200   00:40FB  ED A3               	outi
     201   00:40FD  ED A3               	outi
     202   00:40FF  20 F6               	jr	nz,ws1b
     203   00:4101                      			
     204   00:4101                      ws2f:	
     205   00:4101  3E D0               	ld	a,208
     206   00:4103  D3 98               	out	[0x98],a
     207   00:4105  C9                  	ret 
     208   00:4106                      
     209   00:4106                      			
     210   00:4106                      ; -------------------
     211   00:4106                      ; reverse write sat
     212   00:4106                      ; 
     213   00:4106                      ; -------------------
     214   00:4106                      revWRITESAT:
     215   00:4106  2A 03 C1            	ld	hl,[m_iSprAtrPointer]
     216   00:4109  01 00 40            	ld	bc, 0xFFFF & (-m_iSprAtr) 
     217   00:410C  09                  	add	hl,bc
     218   00:410D                      	
     219   00:410D  3E 00               	ld a,SATor64 & 255
     220   00:410F  D3 99               	out (0x99),a
     221   00:4111  3E 5B               	ld a,SATor64/256
     222   00:4113  D3 99               	out (0x99),a
     223   00:4115                      
     224   00:4115  7D                  	ld	a,l
     225   00:4116  B4                  	or	h
     226   00:4117  28 1A               	jr	z,rw2f
     227   00:4119                      
     228   00:4119  45                  	ld	b,l					;	always safe, as we test for more than 64 sprites in INSERT_SPRITE
     229   00:411A  06 80               	ld	b,128
     230   00:411C                      
     231   00:411C  2A 03 C1            	ld	hl,[m_iSprAtrPointer]
     232   00:411F  11 FC FF            	ld	de,-4
     233   00:4122  19                  	add	hl,de
     234   00:4123  11 F8 FF            	ld	de,-8
     235   00:4126  0E 98               	ld c,0x98
     236   00:4128                      rw1b:
     237   00:4128  ED A3               	outi
     238   00:412A  ED A3               	outi
     239   00:412C  ED A3               	outi
     240   00:412E  ED A3               	outi
     241   00:4130  19                  	add	hl,de				; it does not affect Z
     242   00:4131  20 F5               	jr	nz,rw1b
     243   00:4133                      
     244   00:4133                      rw2f:
     245   00:4133  3E D0               	ld	a,208
     246   00:4135  D3 98               	out	(0x98),a
     247   00:4137  C9                  	ret 	
     248   00:4138                      
     249   00:4138                      ; // Line Bit_7 Bit_6 Bit_5 Bit_4 Bit_3 Bit_2 Bit_1 Bit_0
     250   00:4138                      ; // 0 	   "7"  "6"   "5"   "4"   "3"   "2"   "1"   "0"
     251   00:4138                      ; // 1 	   ";"  "]"   "["   "\"   "="   "-"   "9"   "8"
     252   00:4138                      ; // 2 	   "B"  "A"   ???   "/"   "."   ","   "'"   "`"
     253   00:4138                      ; // 3 	   "J"  "I"   "H"   "G"   "F"   "E"   "D"   "C"
     254   00:4138                      ; // 4 	   "R"  "Q"   "P"   "O"   "N"   "M"   "L"   "K"
     255   00:4138                      ; // 5 	   "Z"  "Y"   "X"   "W"   "V"   "U"   "T"   "S"
     256   00:4138                      ; // 6 	   F3 	 F2    F1  CODE   CAP  GRAPH  CTRL SHIFT
     257   00:4138                      ; // 7 	   RET  SEL    BS  STOP   TAB   ESC    F5    F4
     258   00:4138                      ; // 8 	   RIGHT DOWN  UP  LEFT   DEL   INS   HOME SPACE
     259   00:4138                      
     260   00:4138                      checkkbd:
     261   00:4138                      		; di
     262   00:4138  DB AA               		in	a,(0aah)
     263   00:413A  E6 F0               		and 011110000B			; upper 4 bits contain info to preserve
     264   00:413C  B3                  		or	e
     265   00:413D  D3 AA               		out (0aah),a
     266   00:413F  DB A9               		in	a,(0a9h)
     267   00:4141  6F                  		ld	l,a
     268   00:4142                      		; ei
     269   00:4142  C9                  		ret
     270   00:4143                      
     271   00:4143  (C000)              	map 0xc000
     272   00:4143                      	
     273   00:4143                      	; SPRITE MACHINE
     274   00:4143  (00:C000)           m_iSprAtr:			#(MAX_SPRITES*4)		; Sprite system buffers
     275   00:4143                      
     276   00:4143  (00:C100)           ram_count:			#1
     277   00:4143                      	
     278   00:4143  (00:C101)           m_iSprDrawFrame:	#1
     279   00:4143  (00:C102)           m_iNumSpr:			#1
     280   00:4143  (00:C103)           m_iSprAtrPointer:	#2
     281   00:4143                      
     282   00:4143                      
     283   00:4143  (00:C105)           ramdata:			#4
     284   00:4143  (0000)              	endmap

    LABELS
-------------------------------------------------
00:00005000 X _kBank1
00:00007000 X _kBank2
00:00009000 X _kBank3
00:0000B000 X _kBank4
00:00000004   CGTABL
00:00000040   MAX_SPRITES
00:00003800   SPRTBL
00:00001B00 X SPRATR
00:00005B00   SATor64
00:000000D1 X SPR_Y_NODRAW
00:00000000   SPRITE_Y
00:00000001   SPRITE_X
00:00000002   SPRITE_INDEX
00:00000003   SPRITE_COLOR
00:00004010   screeninit
00:00004032   START
00:0000404D   addsprite
00:00004093   DRAW_SPRITES
00:000040A6   sat_reset
00:000040B1   INSERT_SPRITE
00:000040DC   WRITESAT
00:000040F7   ws1b
00:00004101   ws2f
00:00004106   revWRITESAT
00:00004128   rw1b
00:00004133   rw2f
00:00004138 X checkkbd
00:0000C000   m_iSprAtr
00:0000C100   ram_count
00:0000C101   m_iSprDrawFrame
00:0000C102   m_iNumSpr
00:0000C103   m_iSprAtrPointer
00:0000C105   ramdata


 Output: SAT64TEST.out
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: *  Used: 00000000

    No output

 Output: SAT64TEST.rom
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: 00002000  Used: 00000143

   Address   Length Align   Label
   00004000     323         screeninit
   00004143    7869       <empty>

 Page: 01
  Org: 00006000  Size: 00002000  Used: 00000000

   00006000    8192       <empty>

 Page: 02
  Org: 00006000  Size: 00002000  Used: 00000000

   00006000    8192       <empty>

 Page: 03
  Org: 00006000  Size: 00002000  Used: 00000000

   00006000    8192       <empty>

 Page: 04
  Org: 00006000  Size: 00002000  Used: 00000000

   00006000    8192       <empty>

 Page: 05
  Org: 00006000  Size: 00002000  Used: 00000000

   00006000    8192       <empty>

 Page: 06
  Org: 00006000  Size: 00002000  Used: 00000000

   00006000    8192       <empty>

 Page: 07
  Org: 00006000  Size: 00002000  Used: 00000000

   00006000    8192       <empty>
