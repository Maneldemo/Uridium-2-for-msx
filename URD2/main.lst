Sjasm Z80 Assembler v0.42c - www.xl2s.tk             [2016.01.12 - 01:05:41]

main.asm
Errors: 0

       1   00:0000                      ;----------------------------------------------------------------------------
       2   00:0000                      ;
       3   00:0000                      ;----------------------------------------------------------------------------
       4   00:0000                      
       5   00:0000                              output "urd2.rom"
       6   00:0000                      
       7   00:0000                      		;	konami scc
       8   00:0000                      		
       9   00:0000  (00:5000)           _kBank1:	equ 05000h ;- 57FFh (5000h used)
      10   00:0000  (00:7000)           _kBank2: 	equ 07000h ;- 77FFh (7000h used)
      11   00:0000  (00:9000)           _kBank3: 	equ 09000h ;- 97FFh (9000h used)
      12   00:0000  (00:B000)           _kBank4: 	equ 0B000h ;- B7FFh (B000h used)
      13   00:0000                      
      14   00:0000                      
      15   00:0000                      
      16   00:0000                      		defpage	 0,0x4000, 0x2000		; page 0 main code + far call routines
      17   00:0000                      		defpage	 1,0x6000, 0x2000		; page 1 main code + far call routines
      18   00:0000                      		defpage	 2,0x8000, 0x2000		; swapped data 
      19   00:0000                      		defpage	 3,0xA000, 0x2000		; swapped data 
      20   00:0000                      		
      21   00:0000                      		defpage	 4..15					; 64KB of swapped data 
      22   00:0000                      
      23   00:0000                      
      24   00:0000                      
      25   00:0000                        		include "header.asm"
       1.  00:0000                      
       2.  00:0000                        // MSX 1 
       3.  00:0000  (00:F3DF)           RG0SAV  equ 0xF3DF  
       4.  00:0000  (00:F3E0)           RG1SAV  equ 0xF3E0  
       5.  00:0000  (00:F3E1)           RG2SAV  equ 0xF3E1
       6.  00:0000  (00:F3E2)           RG3SAV  equ 0xF3E2
       7.  00:0000  (00:F3E3)           RG4SAV  equ 0xF3E3
       8.  00:0000  (00:F3E4)           RG5SAV  equ 0xF3E4
       9.  00:0000  (00:F3E5)           RG6SAV  equ 0xF3E5
      10.  00:0000  (00:F3E6)           RG7SAV  equ 0xF3E6
      11.  00:0000                      // MSX 2
      12.  00:0000  (00:FFE7)           RG8SAV  equ 0xFFE7 
      13.  00:0000  (00:FFE8)           RG9SAV  equ 0xFFE8 
      14.  00:0000  (00:FFE9)           RG10SAV equ 0xFFE9 
      15.  00:0000  (00:FFEA)           RG11SAV equ 0xFFEA 
      16.  00:0000  (00:FFEB)           RG12SAV equ 0xFFEB 
      17.  00:0000  (00:FFEC)           RG13SAV equ 0xFFEC 
      18.  00:0000  (00:FFED)           RG14SAV equ 0xFFED 
      19.  00:0000  (00:FFEE)           RG15SAV equ 0xFFEE 
      20.  00:0000  (00:FFEF)           RG16SAV equ 0xFFEF 
      21.  00:0000  (00:FFF0)           RG17SAV equ 0xFFF0 
      22.  00:0000  (00:FFF1)           RG18SAV equ 0xFFF1 
      23.  00:0000  (00:FFF2)           RG19SAV equ 0xFFF2 
      24.  00:0000  (00:FFF3)           RG20SAV equ 0xFFF3 
      25.  00:0000  (00:FFF4)           RG21SAV equ 0xFFF4 
      26.  00:0000  (00:FFF5)           RG22SAV equ 0xFFF5 
      27.  00:0000  (00:FFF7)           RG23SAV equ 0xFFF7 
      28.  00:0000                      
      29.  00:0000  (00:FC9E)           _jiffy: equ 0xFC9E 
      30.  00:0000                      
      31.  00:0000                      	
      32.  00:0000                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      33.  00:0000                      
      34.  00:0000  (00:000C)           max_enem:					equ 12		; max 12
      35.  00:0000  (00:0003)           max_enem_bullets:			equ 3
      36.  00:0000  (00:0002)           max_bullets:				equ 2		; max number of enemies*2 + ms_bullets + enem_bullets + 3 for ms	<= 32 sprites
      37.  00:0000                      
      38.  00:0000  (00:0004)           maxspeed:					equ 4		; the actual speed is divided by 4
      39.  00:0000  (00:00B4)           assault_wave_timer_preset:	equ	3*60	; a wave each 3 seconds
      40.  00:0000  (00:0002)           enemy_bullet_speed:			equ	2	
      41.  00:0000  (00:0078)           xship_rel:					equ (128-8)
      42.  00:0000                      
      43.  00:0000  (00:0100)           mapWidth	equ	256
      44.  00:0000  (00:000B)           mapHeight	equ	11
      45.  00:0000  (00:00A8)           YSIZE		equ	10*16+8
      46.  00:0000                      
      47.  00:0000                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      48.  00:0000                      
      49.  00:0000                      
      50.  00:0000                      	macro setpage_a
      51.  00:0000                    < 		ld	(_kBank3),a
      52.  00:0000                    < 		inc	a
      53.  00:0000                    < 		ld	(_kBank4),a
      54.  00:0000                    < 	endmacro
      55.  00:0000                      	
      56.  00:0000                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
      26   00:0000                      		
      27   00:0000                      		
      28   00:0000                      		
      29   00:0000  (00)                		page 0
      30   00:4000                      		
      31   00:4000                              org 4000h
      32   00:4000                              dw  4241h,START,0,0,0,0,0,0
      32   00:4000  41 42 E8 45 00 00 00 00 00 00 00 00 00 00 00 00 
      33   00:4010                      
      34   00:4010                      	;-------------------------------------		
      35   00:4010                      
      36   00:4010                      
      37   00:4010                      		include rominit64.asm
       1.  00:4010                      
       2.  00:4010                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       3.  00:4010                      ; set pages and subslot
       4.  00:4010                      ;
       5.  00:4010                      
       6.  00:4010                      
       7.  00:4010  (00:0024)           ENASLT:			equ		024h
       8.  00:4010  (00:0138)           RSLREG:			equ		0138h
       9.  00:4010  (00:FCC1)           EXPTBL:			equ		0FCC1h	; Bios Slot / Expansion Slot
      10.  00:4010                      
      11.  00:4010                      
      12.  00:4010                      ; ----------------------------
      13.  00:4010                      ; pre-set main slot for page 3
      14.  00:4010                      ; and set sub-slot for page 3
      15.  00:4010                      ; ----------------------------
      16.  00:4010                      	macro	mainslot_setup n
      17.  00:4010                    < 	and		3
      18.  00:4010                    < [2]	rrca
      19.  00:4010                    < 	and		0xC0
      20.  00:4010                    < 	ld		c,a
      21.  00:4010                    < 	ld		a,d
      22.  00:4010                    < 	and		0x3F
      23.  00:4010                    < 	or		c
      24.  00:4010                    < 	ld		c,a					; Primary slot value with main slot in page 3
      25.  00:4010                    < 
      26.  00:4010                    < 	ld		a,b
      27.  00:4010                    < 	and		0x0C
      28.  00:4010                    < [2]	rrca
      29.  00:4010                    < 	and		3
      30.  00:4010                    < 	ld		b,a					; B = Expanded slot in page 3
      31.  00:4010                    < 	ld		a,c
      32.  00:4010                    < 	out		(0A8h),a			; Slot : Main Slot, xx, xx, Main slot
      33.  00:4010                    < 	ld		a,(0FFFFh)
      34.  00:4010                    < 	cpl
      35.  00:4010                    < 	if (n<=4)
      36.  00:4010                    < [n]	RLCA
      37.  00:4010                    < 	else
      38.  00:4010                    < [8-n] RRCA	
      39.  00:4010                    < 	endif
      40.  00:4010                    < 	and		0xFC
      41.  00:4010                    < 	or		b
      42.  00:4010                    < 	if (n<=4)
      43.  00:4010                    < [n]	RRCA
      44.  00:4010                    < 	else
      45.  00:4010                    < [8-n] RLCA
      46.  00:4010                    < 	endif
      47.  00:4010                    < 	ld		(0FFFFh),a		; Expanded slot selected
      48.  00:4010                    < 	ld		b,a				; save for later	
      49.  00:4010                    < 	endmacro
      50.  00:4010                      		
      51.  00:4010                      
      52.  00:4010                      ; ------------------------------
      53.  00:4010                      ; SEARCH_SLOT
      54.  00:4010                      ; look for the slot of our rom
      55.  00:4010                      ; active in page 1
      56.  00:4010                      ; ------------------------------
      57.  00:4010                      
      58.  00:4010                      search_slot:
      59.  00:4010  CD 38 01            	call	RSLREG
      60.  00:4013  0F 0F               [2]	rrca
      61.  00:4015  E6 03               	and		3
      62.  00:4017  4F                  	ld		c,a
      63.  00:4018  06 00               	ld		b,0
      64.  00:401A  21 C1 FC            	ld		hl,EXPTBL
      65.  00:401D  09                  	add		hl,bc
      66.  00:401E  7E                  	ld		a,(hl)
      67.  00:401F  E6 80               	and		080h
      68.  00:4021  B1                  	or		c
      69.  00:4022  4F                  	ld		c,a
      70.  00:4023  23 23 23 23         [4]	inc		hl
      71.  00:4027  7E                  	ld		a,(hl)
      72.  00:4028  E6 0C               	and		0Ch
      73.  00:402A  B1                  	or		c
      74.  00:402B  32 00 C0            	ld		(slotvar),a
      75.  00:402E  C9                  	ret
      76.  00:402F                      	
      77.  00:402F                      ; ------------------------------
      78.  00:402F                      ; look for the slot of ram
      79.  00:402F                      ; active in page 3
      80.  00:402F                      ; ------------------------------
      81.  00:402F                      
      82.  00:402F                      search_slotram:
      83.  00:402F  F3                  	di
      84.  00:4030  CD 38 01            	call	RSLREG
      85.  00:4033  07 07               [2]	rlca
      86.  00:4035  E6 03               	and		3
      87.  00:4037  4F                  	ld		c,a
      88.  00:4038  06 00               	ld		b,0
      89.  00:403A  21 C1 FC            	ld		hl,EXPTBL
      90.  00:403D  09                  	add		hl,bc
      91.  00:403E  7E                  	ld		a,(hl)
      92.  00:403F  E6 80               	and		080h
      93.  00:4041  28 0D               	jr		z,search_slotram0
      94.  00:4043  B1                  	or		c
      95.  00:4044  4F                  	ld		c,a
      96.  00:4045  23 23 23 23         [4]	inc		hl
      97.  00:4049  7E                  	ld		a,(hl)
      98.  00:404A  07 07 07 07         [4]	rlca
      99.  00:404E  E6 0C               	and		0Ch
     100.  00:4050                      search_slotram0:
     101.  00:4050  B1                  	or		c
     102.  00:4051  32 01 C0            	ld		(slotram),a
     103.  00:4054  C9                  	ret
     104.  00:4055                      	
     105.  00:4055                      ; ------------------------------
     106.  00:4055                      ; SETROMPAGE0
     107.  00:4055                      ; Set the chart in
     108.  00:4055                      ; Page 0
     109.  00:4055                      ; -----------------------------
     110.  00:4055                      
     111.  00:4055                      setrompage0:
     112.  00:4055  3A 00 C0            	ld		a,(slotvar)
     113.  00:4058  C3 7C 40            	jp		setslotpage0
     114.  00:405B                      
     115.  00:405B                      setrampage0:
     116.  00:405B  3A 01 C0            	ld		a,(slotram)
     117.  00:405E  C3 7C 40            	jp		setslotpage0
     118.  00:4061                      
     119.  00:4061                      setrompage2:
     120.  00:4061  3A 00 C0            	ld		a,(slotvar)
     121.  00:4064  C3 F2 40            	jp		setslotpage2
     122.  00:4067                      
     123.  00:4067                      setrampage2:
     124.  00:4067  3A 01 C0            	ld		a,(slotram)
     125.  00:406A  C3 F2 40            	jp		setslotpage2
     126.  00:406D                      	
     127.  00:406D                      setrompage3:
     128.  00:406D  3A 00 C0            	ld		a,(slotvar)
     129.  00:4070  C3 39 41            	jp		setslotpage3
     130.  00:4073                      
     131.  00:4073                      setrampage3:
     132.  00:4073  3A 01 C0            	ld		a,(slotram)
     133.  00:4076  C3 39 41            	jp		setslotpage3
     134.  00:4079                      	
     135.  00:4079                      ; ------------------------------
     136.  00:4079                      ; RECBIOS
     137.  00:4079                      ; set the bios ROM
     138.  00:4079                      ; -------------------------------
     139.  00:4079                      recbios:
     140.  00:4079  3A C1 FC            	ld		a,(EXPTBL)
     141.  00:407C                      
     142.  00:407C                      ; ---------------------------
     143.  00:407C                      ; SETSLOTPAGE0
     144.  00:407C                      ; Set the slot passed in A
     145.  00:407C                      ; at page 0 in the Z80 address space
     146.  00:407C                      ; A: Format FxxxSSPP
     147.  00:407C                      ; ----------------------------
     148.  00:407C                      
     149.  00:407C                      setslotpage0:
     150.  00:407C  F3                  	di
     151.  00:407D  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     152.  00:407E  DB A8               	in		a,(0A8h)
     153.  00:4080  E6 FC               	and		0xFC
     154.  00:4082  57                  	ld		d,a					; D = Primary slot value
     155.  00:4083  78                  	ld		a,b
     156.  00:4084  E6 03               	and		3
     157.  00:4086  B2                  	or		d
     158.  00:4087  57                  	ld		d,a		; D = Final Value for primary slot
     159.  00:4088  78                  	ld		a,b		; Check if expanded
     160.  00:4089  CB 7F               	bit		7,a
     161.  00:408B  28 22               	jr		z,1f	; Not Expanded
     162.  00:408D                      	mainslot_setup	0
     162.  00:408D  E6 03             >  and  3
     162.  00:408F  0F 0F             > [2] rrca
     162.  00:4091  E6 C0             >  and  0xC0
     162.  00:4093  4F                >  ld  c,a
     162.  00:4094  7A                >  ld  a,d
     162.  00:4095  E6 3F             >  and  0x3F
     162.  00:4097  B1                >  or  c
     162.  00:4098  4F                >  ld  c,a
     162.  00:4099                    > 
     162.  00:4099  78                >  ld  a,b
     162.  00:409A  E6 0C             >  and  0x0C
     162.  00:409C  0F 0F             > [2] rrca
     162.  00:409E  E6 03             >  and  3
     162.  00:40A0  47                >  ld  b,a
     162.  00:40A1  79                >  ld  a,c
     162.  00:40A2  D3 A8             >  out  (0A8h),a
     162.  00:40A4  3A FF FF          >  ld  a,(0FFFFh)
     162.  00:40A7  2F                >  cpl
     162.  00:40A8                    >  if (n<=4)
     162.  00:40A8                    > [n] RLCA
     162.  00:40A8                    >  else
     162.  00:40A8                    ~ [8-n] RRCA
     162.  00:40A8                    ~  endif
     162.  00:40A8  E6 FC             >  and  0xFC
     162.  00:40AA  B0                >  or  b
     162.  00:40AB                    >  if (n<=4)
     162.  00:40AB                    > [n] RRCA
     162.  00:40AB                    >  else
     162.  00:40AB                    ~ [8-n] RLCA
     162.  00:40AB                    ~  endif
     162.  00:40AB  32 FF FF          >  ld  (0FFFFh),a
     162.  00:40AE  47                >  ld  b,a
     163.  00:40AF  7A                  1:	ld		a,d				; A = Final value
     164.  00:40B0  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     165.  00:40B2  C9                  	ret
     166.  00:40B3                      
     167.  00:40B3                      ; ---------------------------
     168.  00:40B3                      ; SETSLOTPAGE1
     169.  00:40B3                      ; Set the slot passed in A
     170.  00:40B3                      ; at page 1 in the Z80 address space
     171.  00:40B3                      ; A: Format FxxxSSPP
     172.  00:40B3                      ; ----------------------------
     173.  00:40B3                      
     174.  00:40B3                      setslotpage1:
     175.  00:40B3  F3                  	di
     176.  00:40B4  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     177.  00:40B5  DB A8               	in		a,(0A8h)
     178.  00:40B7  0F 0F               [2]	RRCA
     179.  00:40B9  E6 FC               	and		0xFC
     180.  00:40BB  57                  	ld		d,a					; D = Primary slot value
     181.  00:40BC  78                  	ld		a,b
     182.  00:40BD  E6 03               	and		3
     183.  00:40BF  B2                  	or		d
     184.  00:40C0  07 07               [2]	RLCA
     185.  00:40C2  57                  	ld		d,a		; D = Final Value for primary slot
     186.  00:40C3  78                  	ld		a,b		; Check if expanded
     187.  00:40C4  CB 7F               	bit		7,a
     188.  00:40C6  28 26               	jr		z,1f	; Not Expanded
     189.  00:40C8                      	mainslot_setup	6
     189.  00:40C8  E6 03             >  and  3
     189.  00:40CA  0F 0F             > [2] rrca
     189.  00:40CC  E6 C0             >  and  0xC0
     189.  00:40CE  4F                >  ld  c,a
     189.  00:40CF  7A                >  ld  a,d
     189.  00:40D0  E6 3F             >  and  0x3F
     189.  00:40D2  B1                >  or  c
     189.  00:40D3  4F                >  ld  c,a
     189.  00:40D4                    > 
     189.  00:40D4  78                >  ld  a,b
     189.  00:40D5  E6 0C             >  and  0x0C
     189.  00:40D7  0F 0F             > [2] rrca
     189.  00:40D9  E6 03             >  and  3
     189.  00:40DB  47                >  ld  b,a
     189.  00:40DC  79                >  ld  a,c
     189.  00:40DD  D3 A8             >  out  (0A8h),a
     189.  00:40DF  3A FF FF          >  ld  a,(0FFFFh)
     189.  00:40E2  2F                >  cpl
     189.  00:40E3                    >  if (n<=4)
     189.  00:40E3                    ~ [n] RLCA
     189.  00:40E3                    ~  else
     189.  00:40E3  0F 0F             > [8-n] RRCA
     189.  00:40E5                    >  endif
     189.  00:40E5  E6 FC             >  and  0xFC
     189.  00:40E7  B0                >  or  b
     189.  00:40E8                    >  if (n<=4)
     189.  00:40E8                    ~ [n] RRCA
     189.  00:40E8                    ~  else
     189.  00:40E8  07 07             > [8-n] RLCA
     189.  00:40EA                    >  endif
     189.  00:40EA  32 FF FF          >  ld  (0FFFFh),a
     189.  00:40ED  47                >  ld  b,a
     190.  00:40EE  7A                  1:	ld		a,d				; A = Final value
     191.  00:40EF  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     192.  00:40F1  C9                  	ret
     193.  00:40F2                      	
     194.  00:40F2                      
     195.  00:40F2                      ; ---------------------------
     196.  00:40F2                      ; SETSLOTPAGE2
     197.  00:40F2                      ; Set the slot passed in A
     198.  00:40F2                      ; at page 2 in the Z80 address space
     199.  00:40F2                      ; A: Format FxxxSSPP
     200.  00:40F2                      ; ----------------------------
     201.  00:40F2                      
     202.  00:40F2                      setslotpage2:
     203.  00:40F2  F3                  	di
     204.  00:40F3  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     205.  00:40F4  DB A8               	in		a,(0A8h)
     206.  00:40F6  07 07 07 07         [4]	RLCA
     207.  00:40FA  E6 FC               	and		0xFC
     208.  00:40FC  57                  	ld		d,a					; D = Primary slot value
     209.  00:40FD  78                  	ld		a,b
     210.  00:40FE  E6 03               	and		3
     211.  00:4100  B2                  	or		d
     212.  00:4101  0F 0F 0F 0F         [4]	RRCA
     213.  00:4105  57                  	ld		d,a		; D = Final Value for primary slot
     214.  00:4106  78                  	ld		a,b		; Check if expanded
     215.  00:4107  CB 7F               	bit		7,a
     216.  00:4109  28 2A               	jr		z,1f	; Not Expanded
     217.  00:410B                      	mainslot_setup	4
     217.  00:410B  E6 03             >  and  3
     217.  00:410D  0F 0F             > [2] rrca
     217.  00:410F  E6 C0             >  and  0xC0
     217.  00:4111  4F                >  ld  c,a
     217.  00:4112  7A                >  ld  a,d
     217.  00:4113  E6 3F             >  and  0x3F
     217.  00:4115  B1                >  or  c
     217.  00:4116  4F                >  ld  c,a
     217.  00:4117                    > 
     217.  00:4117  78                >  ld  a,b
     217.  00:4118  E6 0C             >  and  0x0C
     217.  00:411A  0F 0F             > [2] rrca
     217.  00:411C  E6 03             >  and  3
     217.  00:411E  47                >  ld  b,a
     217.  00:411F  79                >  ld  a,c
     217.  00:4120  D3 A8             >  out  (0A8h),a
     217.  00:4122  3A FF FF          >  ld  a,(0FFFFh)
     217.  00:4125  2F                >  cpl
     217.  00:4126                    >  if (n<=4)
     217.  00:4126  07 07 07 07       > [n] RLCA
     217.  00:412A                    >  else
     217.  00:412A                    ~ [8-n] RRCA
     217.  00:412A                    ~  endif
     217.  00:412A  E6 FC             >  and  0xFC
     217.  00:412C  B0                >  or  b
     217.  00:412D                    >  if (n<=4)
     217.  00:412D  0F 0F 0F 0F       > [n] RRCA
     217.  00:4131                    >  else
     217.  00:4131                    ~ [8-n] RLCA
     217.  00:4131                    ~  endif
     217.  00:4131  32 FF FF          >  ld  (0FFFFh),a
     217.  00:4134  47                >  ld  b,a
     218.  00:4135  7A                  1:	ld		a,d				; A = Final value
     219.  00:4136  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     220.  00:4138  C9                  	ret
     221.  00:4139                      	
     222.  00:4139                      ; ---------------------------
     223.  00:4139                      ; SETSLOTPAGE3
     224.  00:4139                      ; Set the slot passed in A
     225.  00:4139                      ; at page 3 in the Z80 address space
     226.  00:4139                      ; A: Format FxxxSSPP
     227.  00:4139                      ; ----------------------------
     228.  00:4139                      	
     229.  00:4139                      setslotpage3:
     230.  00:4139  F3                  	di
     231.  00:413A  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     232.  00:413B  DB A8               	in		a,(0A8h)
     233.  00:413D  07 07               [2]	RLCA
     234.  00:413F  E6 FC               	and		0xFC
     235.  00:4141  57                  	ld		d,a					; D = Primary slot value
     236.  00:4142  78                  	ld		a,b
     237.  00:4143  E6 03               	and		3
     238.  00:4145  B2                  	or		d
     239.  00:4146  0F 0F               [2]	RRCA	
     240.  00:4148  57                  	ld		d,a		; D = Final Value for primary slot
     241.  00:4149  78                  	ld		a,b		; Check if expanded
     242.  00:414A  CB 7F               	bit		7,a
     243.  00:414C  28 26               	jr		z,1f	; Not Expanded
     244.  00:414E                      	mainslot_setup	2
     244.  00:414E  E6 03             >  and  3
     244.  00:4150  0F 0F             > [2] rrca
     244.  00:4152  E6 C0             >  and  0xC0
     244.  00:4154  4F                >  ld  c,a
     244.  00:4155  7A                >  ld  a,d
     244.  00:4156  E6 3F             >  and  0x3F
     244.  00:4158  B1                >  or  c
     244.  00:4159  4F                >  ld  c,a
     244.  00:415A                    > 
     244.  00:415A  78                >  ld  a,b
     244.  00:415B  E6 0C             >  and  0x0C
     244.  00:415D  0F 0F             > [2] rrca
     244.  00:415F  E6 03             >  and  3
     244.  00:4161  47                >  ld  b,a
     244.  00:4162  79                >  ld  a,c
     244.  00:4163  D3 A8             >  out  (0A8h),a
     244.  00:4165  3A FF FF          >  ld  a,(0FFFFh)
     244.  00:4168  2F                >  cpl
     244.  00:4169                    >  if (n<=4)
     244.  00:4169  07 07             > [n] RLCA
     244.  00:416B                    >  else
     244.  00:416B                    ~ [8-n] RRCA
     244.  00:416B                    ~  endif
     244.  00:416B  E6 FC             >  and  0xFC
     244.  00:416D  B0                >  or  b
     244.  00:416E                    >  if (n<=4)
     244.  00:416E  0F 0F             > [n] RRCA
     244.  00:4170                    >  else
     244.  00:4170                    ~ [8-n] RLCA
     244.  00:4170                    ~  endif
     244.  00:4170  32 FF FF          >  ld  (0FFFFh),a
     244.  00:4173  47                >  ld  b,a
     245.  00:4174  7A                  1:	ld		a,d				; A = Final value
     246.  00:4175  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     247.  00:4177  C9                  	ret
     248.  00:4178                      
     249.  00:4178                      	
      38   00:4178                      		include vdpio.asm
       1.  00:4178                      
       2.  00:4178                             
       3.  00:4178                      ;-------------------------------------
       4.  00:4178                      _cls:		
       5.  00:4178  0E 00               		ld		c,0
       6.  00:417A  51                  		ld		d,c
       7.  00:417B  59                  		ld		e,c
       8.  00:417C  F3                  		di
       9.  00:417D  CD A5 41            		call	_vdpsetvramwr
      10.  00:4180  41                  		ld		b,c
      11.  00:4181  1E 01               		ld		e,1
      12.  00:4183  AF                  1:		xor		a
      13.  00:4184  D3 98               		out		(0x98),a
      14.  00:4186  ED A1                       cpi
      15.  00:4188  EA 83 41                    jp   	pe,1b
      16.  00:418B  1D                  		dec	e
      17.  00:418C  C2 83 41            		jp		nz,1b
      18.  00:418F  C9                  		ret
      19.  00:4190                      _cls0:
      20.  00:4190  0E 00               		ld		c,0
      21.  00:4192  51                  		ld		d,c
      22.  00:4193  59                  		ld		e,c
      23.  00:4194  F3                  		di
      24.  00:4195  CD A5 41            		call	_vdpsetvramwr
      25.  00:4198  FB                  		ei
      26.  00:4199  01 00 B0            		ld		bc,mapHeight*16*256
      27.  00:419C  AF                  		xor		a
      28.  00:419D  D3 98               1:		out		(0x98),a
      29.  00:419F  ED A1                       cpi
      30.  00:41A1  EA 9D 41                    jp   	pe,1b
      31.  00:41A4  C9                  		ret
      32.  00:41A5                      		
      33.  00:41A5                      ;-------------------------------------
      34.  00:41A5                      		
      35.  00:41A5  (00:0099)           vdpport1 equ 0x99
      36.  00:41A5  (00:009A)           vdpport2 equ 0x9A
      37.  00:41A5                      
      38.  00:41A5                      ; levelcolors:
      39.  00:41A5                      	;  incbin "palette.bin"
      40.  00:41A5                      
      41.  00:41A5                      ; _SetPalet:   
      42.  00:41A5                      		; di
      43.  00:41A5                      		; xor a 			;Set pointer to zero.
      44.  00:41A5                      		; out (vdpport1),a        
      45.  00:41A5                      		; ld  a,16 | 010000000B
      46.  00:41A5                      		; out (vdpport1),a
      47.  00:41A5                      
      48.  00:41A5                      		; ld  hl,levelcolors
      49.  00:41A5                      		; ld bc,vdpport2+32*256
      50.  00:41A5                      		; otir
      51.  00:41A5                      		; ei
      52.  00:41A5                      		; ret
      53.  00:41A5                      
      54.  00:41A5                      ;Set VDP for writing at address CDE (17-bit) 
      55.  00:41A5                      
      56.  00:41A5                      _vdpsetvramwr:
      57.  00:41A5  79                  		ld a,c
      58.  00:41A6                      _vdpsetvramwr2:
      59.  00:41A6                      ;Set VDP for writing at address ADE (17-bit) ;
      60.  00:41A6  CB 02               		rlc d
      61.  00:41A8  17                  		rla
      62.  00:41A9  CB 02               		rlc d
      63.  00:41AB  17                  		rla
      64.  00:41AC  CB 3A               		srl d ; primo shift, il secondo dopo la out
      65.  00:41AE                      
      66.  00:41AE  D3 99               		out (0x99),a ;set bits 14-16
      67.  00:41B0  3E 8E               		ld a,14+128
      68.  00:41B2  D3 99               		out (0x99),a
      69.  00:41B4                      
      70.  00:41B4  CB 3A               		srl d ; secondo shift.     
      71.  00:41B6                      _vdpsetvramwr14
      72.  00:41B6  7B                  		ld a,e ;set bits 0-7
      73.  00:41B7  D3 99               		out (0x99),a
      74.  00:41B9  7A                  		ld a,d ;set bits 8-13
      75.  00:41BA  F6 40               		or 0x40 ; + write access
      76.  00:41BC  D3 99               		out (0x99),a
      77.  00:41BE  C9                  		ret
      78.  00:41BF                      	
      79.  00:41BF                      ;Set VDP port #98 to start reading at address CDE (17-bit) ;
      80.  00:41BF                      
      81.  00:41BF                      _vdpsetvramrd:
      82.  00:41BF  79                  		ld a,c
      83.  00:41C0                      ;Set VDP port #98 to start reading at address ADE (17-bit) ;
      84.  00:41C0  CB 02               		rlc d
      85.  00:41C2  17                  		rla
      86.  00:41C3  CB 02               		rlc d
      87.  00:41C5  17                  		rla
      88.  00:41C6  CB 3A               		srl d 			; primo shift, il secondo dopo la out
      89.  00:41C8                      
      90.  00:41C8  D3 99               		out (0x99),a 	; set bits 14-16
      91.  00:41CA  3E 8E               		ld a,14+128
      92.  00:41CC  D3 99               		out (0x99),a
      93.  00:41CE                      
      94.  00:41CE  CB 3A               		srl d 	; secondo shift.            
      95.  00:41D0  7B                  		ld a,e 	; set bits 0-7
      96.  00:41D1  D3 99               		out (0x99),a
      97.  00:41D3  7A                  		ld a,d 	; set bits 8-13
      98.  00:41D4  E6 3F               		and 0x3F
      99.  00:41D6  D3 99               		out (0x99),a
     100.  00:41D8  C9                  		ret
     101.  00:41D9                      
     102.  00:41D9                      ;Display page E in screen 5
     103.  00:41D9                      _setpage:
     104.  00:41D9  7B                  	ld a,e
     105.  00:41DA  87 87 87 87 87      [5]	add a,a ;x32
     106.  00:41DF  F6 1F               	or	 00011111B
     107.  00:41E1  F3                  	di
     108.  00:41E2  D3 99               	out (0x99),a
     109.  00:41E4  3E 82               	ld a,2+128
     110.  00:41E6  D3 99               	out (0x99),a
     111.  00:41E8  FB                  	ei            
     112.  00:41E9  C9                  	ret
     113.  00:41EA                      
     114.  00:41EA  (00:005F)           chgmod        equ     0x005f      ;change graphic mode
     115.  00:41EA  (00:000C)           RDSLT         equ     0x000c      ;read address HL in slot A
     116.  00:41EA  (00:0156)           KILBUF        equ     0x0156      ;clear keyboard buffer
     117.  00:41EA                      
     118.  00:41EA                      set_scr:
     119.  00:41EA                      	
     120.  00:41EA                      	// sprites 16x16
     121.  00:41EA  3A E0 F3            	ld		a,(RG1SAV)
     122.  00:41ED  F6 02               	or		00000010B
     123.  00:41EF  32 E0 F3            	ld		(RG1SAV),a
     124.  00:41F2                      
     125.  00:41F2                      	// enable sprites + TP
     126.  00:41F2  3A E7 FF            	ld		a,(RG8SAV)
     127.  00:41F5                      	; or		00100010B
     128.  00:41F5  F6 20               	or		00100000B
     129.  00:41F7  32 E7 FF            	ld		(RG8SAV),a
     130.  00:41FA                      		
     131.  00:41FA                      	// Set @50Hz (only PAL is supported)
     132.  00:41FA  3A 02 C0            	ld	a,(SEL_NTSC)
     133.  00:41FD  A7                  	and 	a
     134.  00:41FE  20 07               	jr		nz,1f
     135.  00:4200                      	
     136.  00:4200  3A E8 FF            	ld		a,(RG9SAV)		
     137.  00:4203  F6 02               	or		00000010B		; PAL
     138.  00:4205  18 05               	jr	2f
     139.  00:4207                      1:		
     140.  00:4207  3A E8 FF            	ld		a,(RG9SAV)		
     141.  00:420A  E6 FD               	and		11111101B		; NTSC 
     142.  00:420C  32 E8 FF            2:	ld		(RG9SAV),a
     143.  00:420F                      
     144.  00:420F  3E 08               	ld  	a,8
     145.  00:4211  CD 5F 00            	call	chgmod
     146.  00:4214                      
     147.  00:4214  3A E8 FF            	ld		a,(RG9SAV)		
     148.  00:4217  E6 7F               	and		01111111B		; 192 lines	
     149.  00:4219  32 E8 FF            	ld		(RG9SAV),a
     150.  00:421C  D3 99               	out		(0x99),a
     151.  00:421E  3E 89               	ld		a,9+128
     152.  00:4220  D3 99               	out		(0x99),a
     153.  00:4222                      	
     154.  00:4222                      	// border color
     155.  00:4222  AF                  	xor		a
     156.  00:4223  32 E6 F3            	ld		(RG7SAV),a
     157.  00:4226  D3 99               	out		(0x99),a
     158.  00:4228  3E 87               	ld		a,7+128
     159.  00:422A  D3 99               	out		(0x99),a
     160.  00:422C  C9                  	ret
     161.  00:422D                      
     162.  00:422D                      
     163.  00:422D                      _waitvdp:
     164.  00:422D  3E 02               	ld a,2
     165.  00:422F  D3 99               	out (0x99),a
     166.  00:4231  3E 8F               	ld a, 128+15
     167.  00:4233  D3 99               	out (0x99),a
     168.  00:4235  DB 99               1:  in	a,(0x99)
     169.  00:4237  0F                  	rrca
     170.  00:4238  DA 35 42            	jp c,1b
     171.  00:423B                      
     172.  00:423B  C9                  	ret
     173.  00:423C                      
     174.  00:423C                      ; .inf:
     175.  00:423C                      	; ld	a,r			; random colour
     176.  00:423C                      	; out		(0x99),a
     177.  00:423C                      	; ld		a,7+128
     178.  00:423C                      	; out		(0x99),a
     179.  00:423C                      	; jp	1b
     180.  00:423C                      	
      39   00:423C                      		include isr.asm
       1.  00:423C                      
       2.  00:423C                      		; include "header.asm"
       3.  00:423C                      
       4.  00:423C                      
       5.  00:423C                      _fake_isr
       6.  00:423C  F5                  		push	af
       7.  00:423D                      		; xor		a
       8.  00:423D                      		; out		(0x99),a
       9.  00:423D                      		; ld		a,7+128
      10.  00:423D                      		; out		(0x99),a
      11.  00:423D                      		
      12.  00:423D                      		; ld	a,(halfrate)
      13.  00:423D                      		; xor	255
      14.  00:423D                      		; ld	(halfrate),a				
      15.  00:423D                      		; jr	z,1f
      16.  00:423D                      		
      17.  00:423D  E5                  		push   hl         
      18.  00:423E  D5                  		push   de         
      19.  00:423F  C5                  		push   bc         
      20.  00:4240  D9                  		exx               
      21.  00:4241  08                  		ex     af,af'     
      22.  00:4242  E5                  		push   hl         
      23.  00:4243  D5                  		push   de         
      24.  00:4244  C5                  		push   bc         
      25.  00:4245  F5                  		push   af         
      26.  00:4246  FD E5               		push   iy         
      27.  00:4248  DD E5               		push   ix         
      28.  00:424A                      
      29.  00:424A  3E E0               		ld		a,11100000B
      30.  00:424C  D3 99               		out		(0x99),a
      31.  00:424E  3E 87               		ld		a,7+128
      32.  00:4250  D3 99               		out		(0x99),a
      33.  00:4252                      
      34.  00:4252  CD 75 42            		call	fsm
      35.  00:4255                      		
      36.  00:4255                      		; ld		e,240-16
      37.  00:4255                      		; ld		d,240-32
      38.  00:4255                      		; call	move_slice
      39.  00:4255                      		
      40.  00:4255                      		; call	brdrs
      41.  00:4255                      
      42.  00:4255                      		; ld		a,11100011B
      43.  00:4255                      		; out		(0x99),a
      44.  00:4255                      		; ld		a,7+128
      45.  00:4255                      		; out		(0x99),a
      46.  00:4255                      
      47.  00:4255                      		; call 	_waitvdp		
      48.  00:4255                      		
      49.  00:4255  AF                  		xor		a
      50.  00:4256  D3 99               		out		(0x99),a
      51.  00:4258  3E 87               		ld		a,7+128
      52.  00:425A  D3 99               		out		(0x99),a
      53.  00:425C                      		
      54.  00:425C  DD E1               		pop    ix         
      55.  00:425E  FD E1               		pop    iy         
      56.  00:4260  F1                  		pop    af         
      57.  00:4261  C1                  		pop    bc         
      58.  00:4262  D1                  		pop    de         
      59.  00:4263  E1                  		pop    hl         
      60.  00:4264  08                  		ex     af,af'     
      61.  00:4265  D9                  		exx               
      62.  00:4266  C1                  		pop    bc         
      63.  00:4267  D1                  		pop    de         
      64.  00:4268  E1                  		pop    hl         
      65.  00:4269                      
      66.  00:4269                      1:		
      67.  00:4269  AF                  		xor	a 			; read S#0
      68.  00:426A  D3 99               		out (0x99),a
      69.  00:426C  3E 8F               		ld a,128+15
      70.  00:426E  D3 99               		out (0x99),a
      71.  00:4270  DB 99               		in	a,(0x99)
      72.  00:4272  F1                  		pop	af
      73.  00:4273  FB                  		ei
      74.  00:4274  C9                  		ret
      75.  00:4275                      
      76.  00:4275                      
      77.  00:4275                      ; _isrinit:
      78.  00:4275                      		; di
      79.  00:4275                      		; ld	hl,0x0038
      80.  00:4275                      		; ld	(hl),0xC3
      81.  00:4275                      		; inc	hl
      82.  00:4275                      		; ld	(hl),low _scroll
      83.  00:4275                      		; inc	hl
      84.  00:4275                      		; ld	(hl),high _scroll
      85.  00:4275                      
      86.  00:4275                      ; ; set interrupt line
      87.  00:4275                      		; LD    A,YSIZE-1
      88.  00:4275                      		; out (0x99),a
      89.  00:4275                      		; LD    A,19+128
      90.  00:4275                      		; out (0x99),a
      91.  00:4275                      	
      92.  00:4275                      ; ; enable line interrupt
      93.  00:4275                      		; LD    A,(RG0SAV)
      94.  00:4275                      		; OR    00010000B
      95.  00:4275                      		; LD    (RG0SAV),A
      96.  00:4275                      		; out (0x99),a
      97.  00:4275                      		; LD    A,0+128
      98.  00:4275                      		; out (0x99),a
      99.  00:4275                      		; ei
     100.  00:4275                      		; ret
     101.  00:4275                      	
     102.  00:4275                      ; _intreset:
     103.  00:4275                      		; di
     104.  00:4275                      		; ld	hl,0x0038
     105.  00:4275                      		; ld	(hl),0xC3
     106.  00:4275                      		; inc	hl
     107.  00:4275                      		; ld	(hl),low _fake_isr
     108.  00:4275                      		; inc	hl
     109.  00:4275                      		; ld	(hl),high _fake_isr
     110.  00:4275                      
     111.  00:4275                      ; ; disable line interrupt		
     112.  00:4275                      		; LD    A,(RG0SAV)
     113.  00:4275                      		; and    11101111B
     114.  00:4275                      		; LD    (RG0SAV),A
     115.  00:4275                      		; out (0x99),a
     116.  00:4275                      		; LD    A,0+128
     117.  00:4275                      		; out (0x99),a
     118.  00:4275                      		; ei
     119.  00:4275                      		; ret
     120.  00:4275                      	
     121.  00:4275                      ; ;;;;;;;;;;;;;;;;;;;;;;
     122.  00:4275                      ; ; actual ISR handler
     123.  00:4275                      ; ;;;;;;;;;;;;;;;;;;;;;;
     124.  00:4275                      
     125.  00:4275                      ; _scroll:
     126.  00:4275                      		; push	af
     127.  00:4275                      		
     128.  00:4275                      		; ld a,1 			; read S#1
     129.  00:4275                      		; out (0x99),a
     130.  00:4275                      		; ld a,128+15
     131.  00:4275                      		; out (0x99),a
     132.  00:4275                      		 
     133.  00:4275                      		; in	a,(0x99)
     134.  00:4275                      		; rra
     135.  00:4275                      		; jp	c,lint	
     136.  00:4275                      
     137.  00:4275                      		; xor	a 			; read S#0
     138.  00:4275                      		; out (0x99),a
     139.  00:4275                      		; ld a,128+15
     140.  00:4275                      		; out (0x99),a
     141.  00:4275                      		 
     142.  00:4275                      		; in	a,(0x99)
     143.  00:4275                      		; rlca
     144.  00:4275                      		; jp	c,vblank
     145.  00:4275                      		
     146.  00:4275                      		; pop	af			; none of them (?)
     147.  00:4275                      		; ei
     148.  00:4275                      		; ret
     149.  00:4275                      	
     150.  00:4275                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
     151.  00:4275                      ; ; manage score bar at YSIZE
     152.  00:4275                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
     153.  00:4275                      ; waitHBLANK
     154.  00:4275                      		; ld a,2 				; read S#2
     155.  00:4275                      		; out (0x99),a
     156.  00:4275                      		; ld a,128+15
     157.  00:4275                      		; out (0x99),a		; poll for HBLANK
     158.  00:4275                      		 
     159.  00:4275                      ; ; 1:	in	a,(0x99)		; we are in HBLANK already, so wait until end of HBLANK
     160.  00:4275                      ; ; 		and	0x20
     161.  00:4275                      ; ; 		jp	nz,1b			
     162.  00:4275                      
     163.  00:4275                      ; 2:		in	a,(0x99)		; wait until end of the active area
     164.  00:4275                      		; and	0x20
     165.  00:4275                      		; jp	z,2b
     166.  00:4275                      		; ret
     167.  00:4275                      	
     168.  00:4275                      ; lint:	
     169.  00:4275                      		; ; call	waitHBLANK
     170.  00:4275                      		; ; now we are at the start of HBLANK
     171.  00:4275                      	
     172.  00:4275                      		; ; ld	a,(RG1SAV)
     173.  00:4275                      		; ; and	010111111B			; disable screen
     174.  00:4275                      		; ; ld	(RG1SAV),a
     175.  00:4275                      		; ; out	(0x99),a
     176.  00:4275                      		; ; ld	a,1+128
     177.  00:4275                      		; ; out	(0x99),a
     178.  00:4275                      
     179.  00:4275                      
     180.  00:4275                      		; ld a,00011111B		; 0XX11111B
     181.  00:4275                      		; out (0x99),a
     182.  00:4275                      		; ld a,2+128			; R#2 
     183.  00:4275                      		; out (0x99),a		; score bar in page 0
     184.  00:4275                      
     185.  00:4275                      		; LD    A,mapHeight*16-(YSIZE-2)	; SCROLL DOWN
     186.  00:4275                      		; out (0x99),a
     187.  00:4275                      		; LD    A,23+128
     188.  00:4275                      		; out (0x99),a
     189.  00:4275                      
     190.  00:4275                      		; xor		a
     191.  00:4275                      		; out	(099h),a
     192.  00:4275                      		; ld	a,18+128
     193.  00:4275                      		; out	(099h),a		; set adjust 0,0
     194.  00:4275                      
     195.  00:4275                      
     196.  00:4275                      		; ld	a,(RG8SAV)
     197.  00:4275                      		; or	000000010B		; disable sprites
     198.  00:4275                      		; ld	(RG8SAV),a
     199.  00:4275                      		; out	(0x99),a
     200.  00:4275                      		; ld	a,8+128
     201.  00:4275                      		; out	(0x99),a
     202.  00:4275                      
     203.  00:4275                      		; ; call	waitHBLANK
     204.  00:4275                      		
     205.  00:4275                      		; ; ld	a,(RG1SAV)
     206.  00:4275                      		; ; or 	01000010B		; enable screen
     207.  00:4275                      		; ; ld	(RG1SAV),a
     208.  00:4275                      		; ; out	(0x99),a
     209.  00:4275                      		; ; ld	a,1+128
     210.  00:4275                      		; ; out	(0x99),a
     211.  00:4275                      	
     212.  00:4275                      		; push   hl         
     213.  00:4275                      		; push   de         
     214.  00:4275                      		; push   bc         
     215.  00:4275                      		; exx               
     216.  00:4275                      		; ex     af,af'     
     217.  00:4275                      		; push   hl         
     218.  00:4275                      		; push   de         
     219.  00:4275                      		; push   bc         
     220.  00:4275                      		; push   af         
     221.  00:4275                      		; push   iy         
     222.  00:4275                      		; push   ix         
     223.  00:4275                      
     224.  00:4275                      		
     225.  00:4275                      		; ld	hl,.exit
     226.  00:4275                      		; push	hl
     227.  00:4275                      		; ld		a,(dxmap)
     228.  00:4275                      		; rlc a
     229.  00:4275                      
     230.  00:4275                      		; jp	nc,_blank_line_lft		; >0 == dx
     231.  00:4275                      		; jp	 c,_blank_line_rgt		; <0 == sx
     232.  00:4275                      ; 1:		pop	hl
     233.  00:4275                      ; .exit:
     234.  00:4275                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     235.  00:4275                      		; ; ld		a,00001000B
     236.  00:4275                      		; ; out		(0x99),a
     237.  00:4275                      		; ; ld		a,7+128
     238.  00:4275                      		; ; out		(0x99),a
     239.  00:4275                      		
     240.  00:4275                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     241.  00:4275                      		; call	test_star
     242.  00:4275                      
     243.  00:4275                      		; xor		a
     244.  00:4275                      		; out		(0x99),a
     245.  00:4275                      		; ld		a,7+128
     246.  00:4275                      		; out		(0x99),a
     247.  00:4275                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     248.  00:4275                      		
     249.  00:4275                      		; pop    ix         
     250.  00:4275                      		; pop    iy         
     251.  00:4275                      		; pop    af         
     252.  00:4275                      		; pop    bc         
     253.  00:4275                      		; pop    de         
     254.  00:4275                      		; pop    hl         
     255.  00:4275                      		; ex     af,af'     
     256.  00:4275                      		; exx               
     257.  00:4275                      		; pop    bc         
     258.  00:4275                      		; pop    de         
     259.  00:4275                      		; pop    hl         
     260.  00:4275                      
     261.  00:4275                      		; pop		af
     262.  00:4275                      		; ei
     263.  00:4275                      		; ret
     264.  00:4275                      
     265.  00:4275                      ; ;-------------------------------------		
     266.  00:4275                      
     267.  00:4275                      ; border_color	equ 	0;	00100101B
     268.  00:4275                      		
     269.  00:4275                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
     270.  00:4275                      ; ;   manage normal vblank routine
     271.  00:4275                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
     272.  00:4275                      
     273.  00:4275                      ; vblank:
     274.  00:4275                      		; call	activate_window	
     275.  00:4275                      
     276.  00:4275                      		; push   hl         
     277.  00:4275                      		; push   de         
     278.  00:4275                      		; push   bc         
     279.  00:4275                      		; exx               
     280.  00:4275                      		; ex     af,af'     
     281.  00:4275                      		; push   hl         
     282.  00:4275                      		; push   de         
     283.  00:4275                      		; push   bc         
     284.  00:4275                      		; push   af         
     285.  00:4275                      		; push   iy         
     286.  00:4275                      		; push   ix         
     287.  00:4275                      
     288.  00:4275                      		; ; ld	a,00011100B		; red
     289.  00:4275                      		; ; out		(0x99),a
     290.  00:4275                      		; ; ld		a,7+128
     291.  00:4275                      		; ; out		(0x99),a
     292.  00:4275                      
     293.  00:4275                      		; call	changedir
     294.  00:4275                      				
     295.  00:4275                      		; ld	hl,(_jiffy)
     296.  00:4275                      		; inc	hl
     297.  00:4275                      		; ld	(_jiffy),hl
     298.  00:4275                      				
     299.  00:4275                      		; ; ld	a,00011100B		; red
     300.  00:4275                      		; ; out	(0x99),a
     301.  00:4275                      		; ; ld	a,7+128
     302.  00:4275                      		; ; out	(0x99),a
     303.  00:4275                      		
     304.  00:4275                      
     305.  00:4275                      		; ; xor		a		; black
     306.  00:4275                      		; ; out	(0x99),a
     307.  00:4275                      		; ; ld	a,7+128
     308.  00:4275                      		; ; out	(0x99),a
     309.  00:4275                      	
     310.  00:4275                      		; pop    ix         
     311.  00:4275                      		; pop    iy         
     312.  00:4275                      		; pop    af         
     313.  00:4275                      		; pop    bc         
     314.  00:4275                      		; pop    de         
     315.  00:4275                      		; pop    hl         
     316.  00:4275                      		; ex     af,af'     
     317.  00:4275                      		; exx               
     318.  00:4275                      		; pop    bc         
     319.  00:4275                      		; pop    de         
     320.  00:4275                      		; pop    hl         
     321.  00:4275                      
     322.  00:4275                      		; pop		af
     323.  00:4275                      		; ei
     324.  00:4275                      		; ret
     325.  00:4275                      ; ;-------------------------------------
     326.  00:4275                      ; ;-------------------------------------
     327.  00:4275                      
     328.  00:4275                      ; _blank_line_lft:
     329.  00:4275                      		; ; ld	a,00000111B		; blue
     330.  00:4275                      		; ; out	(0x99),a
     331.  00:4275                      		; ; ld	a,7+128
     332.  00:4275                      		; ; out	(0x99),a
     333.  00:4275                      
     334.  00:4275                      		; ld	e,0
     335.  00:4275                      		; call	blank_line
     336.  00:4275                      
     337.  00:4275                      		
     338.  00:4275                      		
     339.  00:4275                      		; ; xor	a
     340.  00:4275                      		; ; out	(0x99),a
     341.  00:4275                      		; ; ld	a,7+128
     342.  00:4275                      		; ; out	(0x99),a
     343.  00:4275                      		; ret
     344.  00:4275                      
     345.  00:4275                      ; ;-------------------------------------	
     346.  00:4275                      
     347.  00:4275                      ; _blank_line_rgt
     348.  00:4275                      		; ; ld	a,00000111B		; blue
     349.  00:4275                      		; ; out	(0x99),a
     350.  00:4275                      		; ; ld	a,7+128
     351.  00:4275                      		; ; out	(0x99),a
     352.  00:4275                      
     353.  00:4275                      		; ld	e,240
     354.  00:4275                      		; call	blank_line
     355.  00:4275                      
     356.  00:4275                      		; ; xor	a
     357.  00:4275                      		; ; out	(0x99),a
     358.  00:4275                      		; ; ld	a,7+128
     359.  00:4275                      		; ; out	(0x99),a
     360.  00:4275                      		; ret
     361.  00:4275                      		
     362.  00:4275                      ; ;-------------------------------------	
     363.  00:4275                      		
     364.  00:4275                      ; inc_xoffset
     365.  00:4275                      		; call	plot_line_rgt1
     366.  00:4275                      		; call	.movex
     367.  00:4275                      		; call	plot_line_rgt2
     368.  00:4275                      				
     369.  00:4275                      		; ; ld	a,00000010B		; blue
     370.  00:4275                      		; ; out	(0x99),a
     371.  00:4275                      		; ; ld	a,7+128
     372.  00:4275                      		; ; out	(0x99),a
     373.  00:4275                      		
     374.  00:4275                      		; jp		newxmap
     375.  00:4275                      		
     376.  00:4275                      ; .movex
     377.  00:4275                      		; ld		a,(_xoffset)
     378.  00:4275                      		; and		a
     379.  00:4275                      		; jr		nz,.case1_15
     380.  00:4275                      ; .case0
     381.  00:4275                      		; ld 		a,(_displaypage)
     382.  00:4275                      		; xor		1
     383.  00:4275                      		; ld 		d,a
     384.  00:4275                      		; ld		e,240
     385.  00:4275                      		; jp		clrboder
     386.  00:4275                      		
     387.  00:4275                      ; .case1_15
     388.  00:4275                      ; [4]		add		a,a
     389.  00:4275                      		; ld		e,a
     390.  00:4275                      		; sub		a,16
     391.  00:4275                      		; ld		d,a
     392.  00:4275                      		; jp		move_block
     393.  00:4275                      
     394.  00:4275                      
     395.  00:4275                      ; ;-------------------------------------	
     396.  00:4275                      	
     397.  00:4275                      ; dec_xoffset
     398.  00:4275                      		; call	plot_line_lft1
     399.  00:4275                      		; call	.movex
     400.  00:4275                      		; call	plot_line_lft2
     401.  00:4275                      				
     402.  00:4275                      		; ; ld	a,00000011B		; blue
     403.  00:4275                      		; ; out	(0x99),a
     404.  00:4275                      		; ; ld	a,7+128
     405.  00:4275                      		; ; out	(0x99),a
     406.  00:4275                      
     407.  00:4275                      		; jp		newxmap
     408.  00:4275                      		
     409.  00:4275                      ; .movex
     410.  00:4275                      		; ld		a,(_xoffset)
     411.  00:4275                      		; cp	15
     412.  00:4275                      		; jr		nz,.case0_14
     413.  00:4275                      ; .case15
     414.  00:4275                      		; ld 		a,(_displaypage)
     415.  00:4275                      		; xor		1
     416.  00:4275                      		; ld 		d,a
     417.  00:4275                      		; ld		e,0
     418.  00:4275                      		; jp		clrboder
     419.  00:4275                      		
     420.  00:4275                      ; .case0_14
     421.  00:4275                      ; [4]		add		a,a
     422.  00:4275                      		; ld		e,a
     423.  00:4275                      		; add		a,16
     424.  00:4275                      		; ld		d,a
     425.  00:4275                      		; jp		move_block
     426.  00:4275                      
     427.  00:4275                      
     428.  00:4275                      ; ;-------------------------------------
     429.  00:4275                      ; newxmap
     430.  00:4275                      		; call 	plot_enemy		
     431.  00:4275                      		; call	color_enemy
     432.  00:4275                      
     433.  00:4275                      		; ld		hl,(_xmapx4)
     434.  00:4275                      		; ld		a,(dxmap)
     435.  00:4275                      		; ld		e,a
     436.  00:4275                      		; add 	a,a
     437.  00:4275                      		; sbc 	a,a
     438.  00:4275                      		; ld		d,a
     439.  00:4275                      		; add 	hl,de
     440.  00:4275                      		; ld		(_xmapx4),hl
     441.  00:4275                      		; repeat 2
     442.  00:4275                      		; sra		h
     443.  00:4275                      		; rr  	l
     444.  00:4275                      		; endrepeat
     445.  00:4275                      		; ld		(xmap),hl
     446.  00:4275                      		; ld 		a,l
     447.  00:4275                      		; and		15
     448.  00:4275                      		; ld		(_xoffset),a
     449.  00:4275                      		; repeat 4
     450.  00:4275                      		; sra		h
     451.  00:4275                      		; rr  	l
     452.  00:4275                      		; endrepeat
     453.  00:4275                      		; ld 		a,l
     454.  00:4275                      		; and		1
     455.  00:4275                      		; ld		(_displaypage),a
     456.  00:4275                      		; ld		de,_levelmap
     457.  00:4275                      		; add		hl,de
     458.  00:4275                      		; ld		(_levelmap_pos),hl
     459.  00:4275                      		; ret
     460.  00:4275                      		
     461.  00:4275                      ; ;-------------------------------------
     462.  00:4275                      
     463.  00:4275                      ; activate_window	
     464.  00:4275                      		; ld	a,(_displaypage)
     465.  00:4275                      ; [5]		add a,a 			; x32
     466.  00:4275                      		; or	00011111B
     467.  00:4275                      		; out (0x99),a
     468.  00:4275                      		; ld a,2+128
     469.  00:4275                      		; out (0x99),a
     470.  00:4275                      		
     471.  00:4275                      		; LD    A,(_yoffset)		; SCROLL DOWN
     472.  00:4275                      		; out (0x99),a
     473.  00:4275                      		; add    A,YSIZE-1
     474.  00:4275                      		; ld		l,a
     475.  00:4275                      		; LD    A,23+128
     476.  00:4275                      		; out (0x99),a
     477.  00:4275                      
     478.  00:4275                      		; ld    a,l
     479.  00:4275                      		; out (0x99),a			; set interrupt line
     480.  00:4275                      		; LD    A,19+128
     481.  00:4275                      		; out (0x99),a
     482.  00:4275                      		
     483.  00:4275                      		; ld	a,(_xoffset)		; set R#18 only if not scrolling
     484.  00:4275                      		; add	a,-8
     485.  00:4275                      		; and	0Fh
     486.  00:4275                      		; out	(099h),a
     487.  00:4275                      		; ld	a,18+128
     488.  00:4275                      		; out	(099h),a
     489.  00:4275                      
     490.  00:4275                      		; ld	a,(RG8SAV)		; enable sprites
     491.  00:4275                      		; and	11111101B
     492.  00:4275                      		; ld	(RG8SAV),a
     493.  00:4275                      		; out	(0x99),a
     494.  00:4275                      		; ld	a,8+128
     495.  00:4275                      		; out	(0x99),a
     496.  00:4275                      
     497.  00:4275                      		; ret
     498.  00:4275                      			
     499.  00:4275                      ; ;-------------------------------------
     500.  00:4275                      	
     501.  00:4275                      ; changedir:
     502.  00:4275                      		; ld		a,(_dxmap)
     503.  00:4275                      		; and		128
     504.  00:4275                      		; ld		b,a
     505.  00:4275                      		; inc		hl
     506.  00:4275                      		; ld		a,(dxmap)		; dxmap
     507.  00:4275                      		; ld		c,a
     508.  00:4275                      		; and		128
     509.  00:4275                      		; xor		b				; compare signs
     510.  00:4275                      		; jp		z,nodirchange
     511.  00:4275                      		; ld		(_dxchng),a		; a<>0
     512.  00:4275                      		; bit		7,c
     513.  00:4275                      		; jr		z,.right
     514.  00:4275                      ; .left
     515.  00:4275                      		; call	plot_line_lft1
     516.  00:4275                      		; ld 		a,(_displaypage)
     517.  00:4275                      		; xor		1
     518.  00:4275                      		; ld 		d,a
     519.  00:4275                      		; ld		e,0
     520.  00:4275                      		; call	clrboder
     521.  00:4275                      		; call	plot_line_lft2
     522.  00:4275                      		; jp		newxmap
     523.  00:4275                      
     524.  00:4275                      ; .right
     525.  00:4275                      		; call	plot_line_rgt1
     526.  00:4275                      		; ld 		a,(_displaypage)
     527.  00:4275                      		; xor		1
     528.  00:4275                      		; ld 		d,a
     529.  00:4275                      		; ld		e,240
     530.  00:4275                      		; call	clrboder
     531.  00:4275                      		; call	plot_line_rgt2
     532.  00:4275                      		; jp		newxmap
     533.  00:4275                      
     534.  00:4275                      ; nodirchange:
     535.  00:4275                      		; ld		a,(_dxchng)
     536.  00:4275                      		; and		a
     537.  00:4275                      		; jr		nz,1f
     538.  00:4275                      		; bit		7,c
     539.  00:4275                      		; jp		z,inc_xoffset
     540.  00:4275                      		; jp		dec_xoffset
     541.  00:4275                      	
     542.  00:4275                      ; 1:		xor	a
     543.  00:4275                      		; ld		(_dxchng),a
     544.  00:4275                      		; bit		7,c
     545.  00:4275                      		; jp		z,.right
     546.  00:4275                      ; .left
     547.  00:4275                      		; call	plot_line_lft1
     548.  00:4275                      		; ld		e,240-16
     549.  00:4275                      		; ld		d,240
     550.  00:4275                      		; call	move_block
     551.  00:4275                      		; call	plot_line_lft2
     552.  00:4275                      		; jp		newxmap
     553.  00:4275                      
     554.  00:4275                      ; .right
     555.  00:4275                      		; call	plot_line_rgt1
     556.  00:4275                      		; ld		e,16
     557.  00:4275                      		; ld		d,0
     558.  00:4275                      		; call	move_block
     559.  00:4275                      		; call	plot_line_rgt2
     560.  00:4275                      		; jp		newxmap
     561.  00:4275                      
     562.  00:4275                      ; ;-------------------------------------
      40   00:4275                      		include fsmscroll.asm
       1.  00:4275                      
       2.  00:4275                      
       3.  00:4275                      fsm:
       4.  00:4275  3A 05 C0            		ld		a,(_xoffset)		; set R#18 only if not scrolling
       5.  00:4278  47                  		ld		b,a
       6.  00:4279                      
       7.  00:4279  C6 F8               		add		a,-8
       8.  00:427B  E6 0F               		and		0Fh
       9.  00:427D  D3 99               		out		(099h),a
      10.  00:427F                      
      11.  00:427F  3E 92               		ld		a,18+128
      12.  00:4281  D3 99               		out		(099h),a
      13.  00:4283                      	
      14.  00:4283  10 03               		djnz	99f
      15.  00:4285  C3 DB 42            		jp		x1
      16.  00:4288  10 03               99:		djnz	99f
      17.  00:428A  C3 EB 42            		jp		x2
      18.  00:428D  10 03               99:		djnz	99f
      19.  00:428F  C3 FB 42            		jp		x3
      20.  00:4292  10 03               99:		djnz	99f
      21.  00:4294  C3 0B 43            		jp		x4
      22.  00:4297  10 03               99:		djnz	99f
      23.  00:4299  C3 1B 43            		jp		x5
      24.  00:429C  10 03               99:		djnz	99f
      25.  00:429E  C3 2B 43            		jp		x6
      26.  00:42A1  10 03               99:		djnz	99f
      27.  00:42A3  C3 3B 43            		jp		x7
      28.  00:42A6  10 03               99:		djnz	99f
      29.  00:42A8  C3 4B 43            		jp		x8
      30.  00:42AB  10 03               99:		djnz	99f
      31.  00:42AD  C3 5B 43            		jp		x9
      32.  00:42B0  10 03               99:		djnz	99f
      33.  00:42B2  C3 6B 43            		jp		x10
      34.  00:42B5  10 03               99:		djnz	99f
      35.  00:42B7  C3 7B 43            		jp		x11
      36.  00:42BA  10 03               99:		djnz	99f
      37.  00:42BC  C3 8B 43            		jp		x12
      38.  00:42BF  10 03               99:		djnz	99f
      39.  00:42C1  C3 9B 43            		jp		x13
      40.  00:42C4  10 03               99:		djnz	99f
      41.  00:42C6  C3 AB 43            		jp		x14
      42.  00:42C9  10 03               99:		djnz	99f
      43.  00:42CB  C3 BB 43            		jp		x15
      44.  00:42CE  C3 D1 42            99:		jp		x0
      45.  00:42D1                      
      46.  00:42D1  3A 04 C0            x0:		ld		a,(_displaypage)
      47.  00:42D4  57                  		ld		d,a
      48.  00:42D5  1E F0               		ld		e,240
      49.  00:42D7  CD 06 44            		call 	clear_slice
      50.  00:42DA  C9                  		ret
      51.  00:42DB  1E 10               x1:		ld		e,16
      52.  00:42DD  16 00               		ld		d,0
      53.  00:42DF  CD CB 43            		call	move_slice
      54.  00:42E2  DD 2E 00            		ld		ixl,0
      55.  00:42E5  1E F0               		ld		e,240
      56.  00:42E7  CD 3E 44            		call	_brdrs
      57.  00:42EA  C9                  		ret
      58.  00:42EB  1E 20               x2:		ld		e,16*2
      59.  00:42ED  16 10               		ld		d,16
      60.  00:42EF  CD CB 43            		call	move_slice
      61.  00:42F2  DD 2E 01            		ld		ixl,1
      62.  00:42F5  1E F1               		ld		e,241
      63.  00:42F7  CD 3E 44            		call	_brdrs
      64.  00:42FA  C9                  		ret
      65.  00:42FB  1E 30               x3:		ld		e,16*3
      66.  00:42FD  16 20               		ld		d,16*2
      67.  00:42FF  CD CB 43            		call	move_slice
      68.  00:4302  DD 2E 02            		ld		ixl,2
      69.  00:4305  1E F2               		ld		e,242
      70.  00:4307  CD 3E 44            		call	_brdrs
      71.  00:430A  C9                  		ret
      72.  00:430B  1E 40               x4:		ld		e,16*4
      73.  00:430D  16 30               		ld		d,16*3
      74.  00:430F  CD CB 43            		call	move_slice
      75.  00:4312  DD 2E 03            		ld		ixl,3
      76.  00:4315  1E F3               		ld		e,243
      77.  00:4317  CD 3E 44            		call	_brdrs
      78.  00:431A  C9                  		ret
      79.  00:431B  1E 50               x5:		ld		e,16*5
      80.  00:431D  16 40               		ld		d,16*4
      81.  00:431F  CD CB 43            		call	move_slice
      82.  00:4322  DD 2E 04            		ld		ixl,4
      83.  00:4325  1E F4               		ld		e,244
      84.  00:4327  CD 3E 44            		call	_brdrs
      85.  00:432A  C9                  		ret
      86.  00:432B  1E 60               x6:		ld		e,16*6
      87.  00:432D  16 50               		ld		d,16*5
      88.  00:432F  CD CB 43            		call	move_slice
      89.  00:4332  DD 2E 05            		ld		ixl,5
      90.  00:4335  1E F5               		ld		e,245
      91.  00:4337  CD 3E 44            		call	_brdrs
      92.  00:433A  C9                  		ret
      93.  00:433B  1E 70               x7:		ld		e,16*7
      94.  00:433D  16 60               		ld		d,16*6
      95.  00:433F  CD CB 43            		call	move_slice
      96.  00:4342  DD 2E 06            		ld		ixl,6
      97.  00:4345  1E F6               		ld		e,246
      98.  00:4347  CD 3E 44            		call	_brdrs
      99.  00:434A  C9                  		ret
     100.  00:434B  1E 80               x8:		ld		e,16*8
     101.  00:434D  16 70               		ld		d,16*7
     102.  00:434F  CD CB 43            		call	move_slice
     103.  00:4352  DD 2E 07            		ld		ixl,7
     104.  00:4355  1E F7               		ld		e,247
     105.  00:4357  CD 3E 44            		call	_brdrs
     106.  00:435A  C9                  		ret
     107.  00:435B  1E 90               x9:		ld		e,16*9
     108.  00:435D  16 80               		ld		d,16*8
     109.  00:435F  CD CB 43            		call	move_slice
     110.  00:4362  DD 2E 08            		ld		ixl,8
     111.  00:4365  1E F8               		ld		e,248
     112.  00:4367  CD 3E 44            		call	_brdrs
     113.  00:436A  C9                  		ret
     114.  00:436B  1E A0               x10:	ld		e,16*10
     115.  00:436D  16 90               		ld		d,16*9
     116.  00:436F  CD CB 43            		call	move_slice
     117.  00:4372  DD 2E 09            		ld		ixl,9
     118.  00:4375  1E F9               		ld		e,249
     119.  00:4377  CD 3E 44            		call	_brdrs
     120.  00:437A  C9                  		ret
     121.  00:437B  1E B0               x11:	ld		e,16*11
     122.  00:437D  16 A0               		ld		d,16*10
     123.  00:437F  CD CB 43            		call	move_slice
     124.  00:4382  DD 2E 0A            		ld		ixl,10
     125.  00:4385  1E FA               		ld		e,250
     126.  00:4387  CD 3E 44            		call	_brdrs
     127.  00:438A  C9                  		ret
     128.  00:438B  1E C0               x12:	ld		e,16*12
     129.  00:438D  16 B0               		ld		d,16*11
     130.  00:438F  CD CB 43            		call	move_slice
     131.  00:4392  DD 2E 0B            		ld		ixl,11
     132.  00:4395  1E FB               		ld		e,251
     133.  00:4397  CD 3E 44            		call	_brdrs
     134.  00:439A  C9                  		ret
     135.  00:439B  1E D0               x13:	ld		e,16*13
     136.  00:439D  16 C0               		ld		d,16*12
     137.  00:439F  CD CB 43            		call	move_slice
     138.  00:43A2  DD 2E 0C            		ld		ixl,12
     139.  00:43A5  1E FC               		ld		e,252
     140.  00:43A7  CD 3E 44            		call	_brdrs
     141.  00:43AA  C9                  		ret	
     142.  00:43AB  1E E0               x14:	ld		e,16*14
     143.  00:43AD  16 D0               		ld		d,16*13
     144.  00:43AF  CD CB 43            		call	move_slice
     145.  00:43B2  DD 2E 0D            		ld		ixl,13
     146.  00:43B5  1E FD               		ld		e,253
     147.  00:43B7  CD 3E 44            		call	_brdrs
     148.  00:43BA  C9                  		ret
     149.  00:43BB  1E F0               x15:	ld		e,16*15
     150.  00:43BD  16 E0               		ld		d,16*14
     151.  00:43BF  CD CB 43            		call	move_slice
     152.  00:43C2  DD 2E 0E            		ld		ixl,14
     153.  00:43C5  1E FE               		ld		e,254
     154.  00:43C7  CD 3E 44            		call	_brdrs
     155.  00:43CA  C9                  		ret
     156.  00:43CB                      		
     157.  00:43CB                      		
     158.  00:43CB                      		
     159.  00:43CB                      		
     160.  00:43CB                      		
     161.  00:43CB                      		
      41   00:43CB                      		include vdpcmds.asm
       1.  00:43CB                      
       2.  00:43CB                      
       3.  00:43CB                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       4.  00:43CB                      ; input
       5.  00:43CB                      ; e = sx	from not _displaypage
       6.  00:43CB                      ; d = dx	to _displaypage
       7.  00:43CB                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       8.  00:43CB                      
       9.  00:43CB                      move_slice:
      10.  00:43CB  3E 20               		ld 		a, 32
      11.  00:43CD  D3 99               		out 	(0x99),a
      12.  00:43CF  3E 91               		ld 		a, 17+128
      13.  00:43D1  D3 99               		out 	(0x99),a
      14.  00:43D3                      
      15.  00:43D3  0E 9B               		ld 		c, 0x9B
      16.  00:43D5                      		
      17.  00:43D5                      		; call _waitvdp				; no need ATM
      18.  00:43D5                      		
      19.  00:43D5  ED 59               		out		(c), e 				; sx
      20.  00:43D7  AF                  		xor a
      21.  00:43D8  D3 9B               		out		(0x9B), a 			; sx (high)
      22.  00:43DA                      		
      23.  00:43DA  D3 9B               		out		(0x9B), a 			; sy
      24.  00:43DC  3A 04 C0            		ld 		a,(_displaypage)	; source page
      25.  00:43DF  D3 9B               		out 	(0x9B), a 			; sy 	(high-> page 0 or 1)
      26.  00:43E1                      
      27.  00:43E1  ED 51               		out 	(c), d 				; dx
      28.  00:43E3  AF                  		xor a
      29.  00:43E4  D3 9B               		out 	(0x9B), a			; dx (high)
      30.  00:43E6                      		
      31.  00:43E6  D3 9B               		out 	(0x9B), a 			; dy
      32.  00:43E8  3A 04 C0            		ld 		a,(_displaypage)	; destination page
      33.  00:43EB  EE 01               		xor	1				
      34.  00:43ED  D3 9B               		out 	(0x9B), a			; dy 	(high-> page 0 or 1)
      35.  00:43EF                      
      36.  00:43EF  3E 10               		ld 		a,16 				; block size
      37.  00:43F1  D3 9B               		out 	(0x9B), a
      38.  00:43F3  AF                  		xor a
      39.  00:43F4  D3 9B               		out 	(0x9B), a	
      40.  00:43F6  3E A0               		ld		a,10*16				; mapHeight*16
      41.  00:43F8  D3 9B               		out 	(0x9B), a			; y block size
      42.  00:43FA  AF                  		xor		a
      43.  00:43FB  D3 9B               		out 	(0x9B), a
      44.  00:43FD  D3 9B               		out 	(0x9B), a
      45.  00:43FF  D3 9B               		out 	(0x9B), a
      46.  00:4401                      
      47.  00:4401  3E D0               		ld		a,11010000B
      48.  00:4403  D3 9B               		out 	(0x9B), a			; command HMMM
      49.  00:4405  C9                  		ret
      50.  00:4406                      		
      51.  00:4406                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      52.  00:4406                      ; input
      53.  00:4406                      ; d = page
      54.  00:4406                      ; e = dx
      55.  00:4406                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      56.  00:4406                      		
      57.  00:4406                      clear_slice:
      58.  00:4406  3E 24               		ld 		a, 36
      59.  00:4408  D3 99               		out 	(0x99),a
      60.  00:440A  3E 91               		ld 		a, 17+128
      61.  00:440C  D3 99               		out 	(0x99),a
      62.  00:440E                      		
      63.  00:440E                      		; call _waitvdp
      64.  00:440E                      		
      65.  00:440E  7B                  		ld		a,e
      66.  00:440F  D3 9B               		out 	(0x9B), a 			; dx
      67.  00:4411  AF                  		xor		a
      68.  00:4412  D3 9B               		out 	(0x9B), a			; dx (high)
      69.  00:4414                      		
      70.  00:4414  D3 9B               		out 	(0x9B), a			; dy
      71.  00:4416  7A                  		ld 		a,d					; destination page
      72.  00:4417  D3 9B               		out 	(0x9B), a			; dy (high-> page 0 or 1)
      73.  00:4419                      		
      74.  00:4419  3E 10               		ld 		a,16
      75.  00:441B  D3 9B               		out 	(0x9B), a			; x block size
      76.  00:441D  AF                  		xor	a
      77.  00:441E  D3 9B               		out 	(0x9B), a
      78.  00:4420                      
      79.  00:4420  3E A0               		ld		a,10*16				; mapHeight*16
      80.  00:4422  D3 9B               		out 	(0x9B), a			; y block size
      81.  00:4424  AF                  		xor a
      82.  00:4425  D3 9B               		out 	(0x9B), a
      83.  00:4427                      
      84.  00:4427  3E 1C               		ld	a,00011100B
      85.  00:4429  D3 9B               		out 	(0x9B), a			; border_color
      86.  00:442B  AF                  		xor a
      87.  00:442C  D3 9B               		out 	(0x9B), a
      88.  00:442E                      
      89.  00:442E  3E C0               		ld		a,11000000B
      90.  00:4430  D3 9B               		out 	(0x9B), a			; command HMMV
      91.  00:4432  C9                  		ret
      42   00:4433                      		include brdrs.asm
       1.  00:4433                      
       2.  00:4433                      brdrs:
       3.  00:4433  21 4D 46            		ld	hl,_levelmap
       4.  00:4436                      		
       5.  00:4436  3A 05 C0            		ld	a,(_xoffset)
       6.  00:4439  DD 6F               		ld	ixl,a	; ixl = x
       7.  00:443B  C6 F0               		add a,240
       8.  00:443D  5F                  		ld	e,a		; e = x+240
       9.  00:443E                      
      10.  00:443E                      _brdrs:
      11.  00:443E  21 4D 46            		ld	hl,_levelmap
      12.  00:4441                      
      13.  00:4441  0E 98               		ld	c,0x98
      14.  00:4443                      				
      15.  00:4443  3A 04 C0            		ld	a,(_displaypage)
      16.  00:4446  87 87               [2] 	add a,a
      17.  00:4448  D3 99               		out (0x99),a 	; set bits 14-16
      18.  00:444A  3E 8E               		ld a,14+128
      19.  00:444C  D3 99               		out (0x99),a
      20.  00:444E                      
      21.  00:444E  16 40               		ld	d,0x40		; write access
      22.  00:4450  CD 78 44            		call	plot_col64
      23.  00:4453                      
      24.  00:4453  3A 04 C0            		ld	a,(_displaypage)
      25.  00:4456  87 87               [2] 	add a,a
      26.  00:4458  F6 01               		or	1
      27.  00:445A  D3 99               		out (0x99),a 	; set bits 14-16
      28.  00:445C  3E 8E               		ld a,14+128
      29.  00:445E  D3 99               		out (0x99),a
      30.  00:4460                      
      31.  00:4460  16 40               		ld	d,0x40		; write access	
      32.  00:4462  CD 78 44            		call	plot_col64
      33.  00:4465                      		
      34.  00:4465  3A 04 C0            		ld	a,(_displaypage)
      35.  00:4468  87 87               [2] 	add a,a
      36.  00:446A  F6 02               		or	2
      37.  00:446C  D3 99               		out (0x99),a 	; set bits 14-16
      38.  00:446E  3E 8E               		ld a,14+128
      39.  00:4470  D3 99               		out (0x99),a
      40.  00:4472                      
      41.  00:4472  16 40               		ld	d,0x40		; write access	
      42.  00:4474  CD 84 44            		call	plot_col32
      43.  00:4477                      				
      44.  00:4477  C9                  		ret
      45.  00:4478                      
      46.  00:4478                      plot_col64:
      47.  00:4478                      	; hl -> tile in the map
      48.  00:4478                      		repeat 2
      49.  00:4478                    < 		push	hl
      50.  00:4478                    < 		call	plot_col16
      51.  00:4478                    < 		pop		hl
      52.  00:4478                    < 	; inc h			; next line in the map
      53.  00:4478                    < 		inc l
      54.  00:4478                    < 		endrepeat
      54.  00:4478  E5 CD 91 44 E1 2C E5 CD 91 44 E1 2C 
      55.  00:4484                      plot_col32:		
      56.  00:4484                      		repeat 2
      57.  00:4484                    < 		push	hl
      58.  00:4484                    < 		call	plot_col16
      59.  00:4484                    < 		pop		hl
      60.  00:4484                    < 	; inc h			; next line in the map
      61.  00:4484                    < 		inc l
      62.  00:4484                    < 		endrepeat
      62.  00:4484  E5 CD 91 44 E1 2C E5 CD 91 44 E1 2C 
      63.  00:4490  C9                  		ret
      64.  00:4491                      
      65.  00:4491                      
      66.  00:4491                      plot_col16:
      67.  00:4491  7E                  		ld	a,(hl)
      68.  00:4492  07 07 07            [3]		rlca
      69.  00:4495  E6 07               		and	00000111B
      70.  00:4497  C6 03               		add	a,:_tiles0
      71.  00:4499  32 00 B0            		ld	(_kBank4),a
      72.  00:449C  7E                  		ld	a,(hl)
      73.  00:449D  E6 1F               		and	00011111B
      74.  00:449F  C6 A0               		add	a,high _tiles0
      75.  00:44A1  67                  		ld	h,a
      76.  00:44A2  3A 05 C0            		ld	a,(_xoffset)
      77.  00:44A5  87 87 87 87         [4]		add	a,a
      78.  00:44A9  6F                  		ld	l,a
      79.  00:44AA                      
      80.  00:44AA                      	; hl -> tile column in the tileset
      81.  00:44AA                      	
      82.  00:44AA                      		repeat 16
      83.  00:44AA                    < 		ld	a,ixl 		;set bits 0-7
      84.  00:44AA                    < 		out (0x99),a
      85.  00:44AA                    < 		ld a,d 			;set bits 8-13
      86.  00:44AA                    < 		out (0x99),a
      87.  00:44AA                    < 		ld	a,e
      88.  00:44AA                    < 		out	(0x98),a
      89.  00:44AA                    < 		ld a,e 			;set bits 0-7
      90.  00:44AA                    < 		out (0x99),a
      91.  00:44AA                    < 		ld a,d 			;set bits 8-13
      92.  00:44AA                    < 		out (0x99),a
      93.  00:44AA                    < 		inc	d
      94.  00:44AA                    < 		outi			; 18
      95.  00:44AA                    < 		endrepeat
      95.  00:44AA  DD 7D D3 99 7A D3 99 7B D3 98 7B D3 99 7A D3 99 
      95.  00:44BA  14 ED A3 DD 7D D3 99 7A D3 99 7B D3 98 7B D3 99 
      95.  00:44CA  7A D3 99 14 ED A3 DD 7D D3 99 7A D3 99 7B D3 98 
      95.  00:44DA  7B D3 99 7A D3 99 14 ED A3 DD 7D D3 99 7A D3 99 
      95.  00:44EA  7B D3 98 7B D3 99 7A D3 99 14 ED A3 DD 7D D3 99 
      95.  00:44FA  7A D3 99 7B D3 98 7B D3 99 7A D3 99 14 ED A3 DD 
      95.  00:450A  7D D3 99 7A D3 99 7B D3 98 7B D3 99 7A D3 99 14 
      95.  00:451A  ED A3 DD 7D D3 99 7A D3 99 7B D3 98 7B D3 99 7A 
      95.  00:452A  D3 99 14 ED A3 DD 7D D3 99 7A D3 99 7B D3 98 7B 
      95.  00:453A  D3 99 7A D3 99 14 ED A3 DD 7D D3 99 7A D3 99 7B 
      95.  00:454A  D3 98 7B D3 99 7A D3 99 14 ED A3 DD 7D D3 99 7A 
      95.  00:455A  D3 99 7B D3 98 7B D3 99 7A D3 99 14 ED A3 DD 7D 
      95.  00:456A  D3 99 7A D3 99 7B D3 98 7B D3 99 7A D3 99 14 ED 
      95.  00:457A  A3 DD 7D D3 99 7A D3 99 7B D3 98 7B D3 99 7A D3 
      95.  00:458A  99 14 ED A3 DD 7D D3 99 7A D3 99 7B D3 98 7B D3 
      95.  00:459A  99 7A D3 99 14 ED A3 DD 7D D3 99 7A D3 99 7B D3 
      95.  00:45AA  98 7B D3 99 7A D3 99 14 ED A3 DD 7D D3 99 7A D3 
      95.  00:45BA  99 7B D3 98 7B D3 99 7A D3 99 14 ED A3 DD 7D D3 
      95.  00:45CA  99 7A D3 99 7B D3 98 7B D3 99 7A D3 99 14 ED A3 
      96.  00:45DA  C9                  		ret
      97.  00:45DB                      		
      43   00:45DB                      		
      44   00:45DB                      		include checkkbd.asm
       1.  00:45DB                      
       2.  00:45DB                      ; // Line Bit_7 Bit_6 Bit_5 Bit_4 Bit_3 Bit_2 Bit_1 Bit_0
       3.  00:45DB                      ; // 0 "7" "6" "5" "4" "3" "2" "1" "0"
       4.  00:45DB                      ; // 1 ";" "]" "[" "\" "=" "-" "9" "8"
       5.  00:45DB                      ; // 2 "B" "A" ??? "/" "." "," "'" "`"
       6.  00:45DB                      ; // 3 "J" "I" "H" "G" "F" "E" "D" "C"
       7.  00:45DB                      ; // 4 "R" "Q" "P" "O" "N" "M" "L" "K"
       8.  00:45DB                      ; // 5 "Z" "Y" "X" "W" "V" "U" "T" "S"
       9.  00:45DB                      ; // 6 F3 F2 F1 CODE CAP GRAPH CTRL SHIFT
      10.  00:45DB                      ; // 7 RET SEL BS STOP TAB ESC F5 F4
      11.  00:45DB                      ; // 8 RIGHT DOWN UP LEFT DEL INS HOME SPACE
      12.  00:45DB                      
      13.  00:45DB                      checkkbd:
      14.  00:45DB  F3                  		di
      15.  00:45DC  DB AA               		in	a,(0aah)
      16.  00:45DE  E6 F0               		and 011110000B			; upper 4 bits contain info to preserve
      17.  00:45E0  B3                  		or	e
      18.  00:45E1  D3 AA               		out (0aah),a
      19.  00:45E3  DB A9               		in	a,(0a9h)
      20.  00:45E5  6F                  		ld	l,a
      21.  00:45E6  FB                  		ei
      22.  00:45E7  C9                  		ret
      45   00:45E8                      		
      46   00:45E8                      ;-------------------------------------
      47   00:45E8                      ; Entry point
      48   00:45E8                      ;-------------------------------------
      49   00:45E8                      START:
      50   00:45E8  AF                  		xor	a
      51   00:45E9                      		; dec	a
      52   00:45E9  32 02 C0            		ld	(SEL_NTSC),a
      53   00:45EC  CD EA 41            		call	set_scr
      54   00:45EF  F3                  		di
      55   00:45F0                      		
      56   00:45F0                      ;-------------------------------------
      57   00:45F0                      ;   Power-up routine for 32K ROM
      58   00:45F0                      ;   set pages and sub slot
      59   00:45F0                      ;-------------------------------------
      60   00:45F0  CD 10 40                    call    search_slot
      61   00:45F3  CD 2F 40                    call    search_slotram
      62   00:45F6  CD 61 40            		call	setrompage2
      63   00:45F9  CD 5B 40            		call	setrampage0
      64   00:45FC                      
      65   00:45FC                      
      66   00:45FC  AF                  		xor	a
      67   00:45FD  32 00 50            		ld	(_kBank1),a
      68   00:4600  3C                  		inc	a
      69   00:4601  32 00 70            		ld	(_kBank2),a
      70   00:4604  3C                  		inc	a
      71   00:4605  32 00 90            		ld	(_kBank3),a
      72   00:4608                      
      73   00:4608  CD 78 41            		call	_cls
      74   00:460B                      		
      75   00:460B                      		;--- initialise ISR in RAM
      76   00:460B                      		
      77   00:460B  F3                  		di
      78   00:460C  21 38 00            		ld	hl,0x0038
      79   00:460F  36 C3               		ld	(hl),0xC3
      80   00:4611  23                  		inc	hl
      81   00:4612  36 3C               		ld	(hl),low _fake_isr
      82   00:4614  23                  		inc	hl
      83   00:4615  36 42               		ld	(hl),high _fake_isr
      84   00:4617                      
      85   00:4617  3E 00               		ld	a,0
      86   00:4619  32 05 C0            		ld	(_xoffset),a		
      87   00:461C  AF                  		xor	a
      88   00:461D  32 04 C0            		ld	(_displaypage),a		
      89   00:4620  32 03 C0            		ld	(halfrate),a		
      90   00:4623                      		
      91   00:4623  FB                  		ei
      92   00:4624  76                  1:		halt
      93   00:4625  3A 05 C0            		ld	a,(_xoffset)		
      94   00:4628  3C                  		inc	a
      95   00:4629  E6 0F               		and	15
      96   00:462B  32 05 C0            		ld	(_xoffset),a		
      97   00:462E  C2 24 46            		jp	nz,1b
      98   00:4631                      		
      99   00:4631  1E 08               		ld	e,8
     100   00:4633  CD DB 45            		call	checkkbd
     101   00:4636  E6 01               		and	1
     102   00:4638  CC 3E 46            		call	z,PAL_ntsc
     103   00:463B                      		
     104   00:463B  C3 24 46            		jp	1b
     105   00:463E                      		
     106   00:463E                      PAL_ntsc
     107   00:463E  3A E8 FF            		ld		a,(RG9SAV)		
     108   00:4641  EE 02               		xor		00000010B		; PAL or NTSC 
     109   00:4643  32 E8 FF            		ld		(RG9SAV),a
     110   00:4646  D3 99               		out		(0x99),a
     111   00:4648  3E 89               		ld		a,9+128
     112   00:464A  D3 99               		out		(0x99),a
     113   00:464C  C9                  		ret
     114   00:464D                      		
     115   00:464D                      _levelmap
     116   00:464D                      		repeat 16
     117   00:464D                    < 		db	0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
     118   00:464D                    < 		endrepeat
     118   00:464D  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 
     118   00:465D  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 
     118   00:466D  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 
     118   00:467D  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 
     118   00:468D  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 
     118   00:469D  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 
     118   00:46AD  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 
     118   00:46BD  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 
     118   00:46CD  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 
     118   00:46DD  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 
     118   00:46ED  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 
     118   00:46FD  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 
     118   00:470D  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 
     118   00:471D  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 
     118   00:472D  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 
     118   00:473D  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 
     119   00:474D                      		
     120   00:474D  (03)                		page 3
     121   03:A000                      _tiles0:
     122   03:A000                      		repeat 16
     123   03:A000                    < 		ds 256,255-@#
     124   03:A000  FF (256)          < 		endrepeat
     125   03:B000                      		; call	opening
     126   03:B000                      		
     127   03:B000                      
     128   03:B000                      		; call 	_hw_sprite_init
     129   03:B000                      
     130   03:B000                      		; ld		c,0
     131   03:B000                      		; ld		de,256*(mapHeight*16+3)
     132   03:B000                      		; call	_vdpsetvramwr
     133   03:B000                      
     134   03:B000                      		; ld		de, 256*:_scorebar+1
     135   03:B000                      		; call	outvram
     136   03:B000                      		
     137   03:B000                      		; ld		c,1
     138   03:B000                      		; ld		de,256*mapHeight*16
     139   03:B000                      		; call	_vdpsetvramwr
     140   03:B000                      
     141   03:B000                      		; ld		de, 256*:_animated+2
     142   03:B000                      		; call	outvram
     143   03:B000                      
     144   03:B000                      	
     145   03:B000                      		; ; ld	a,:demo_song
     146   03:B000                      		; ; setpage_a
     147   03:B000                      		
     148   03:B000                      		; ; ld	bc,	end_demo_song-musbuff
     149   03:B000                      		; ; ld	hl,	demo_song
     150   03:B000                      		; ; ld	de,	musbuff
     151   03:B000                      		; ; ldir
     152   03:B000                      			
     153   03:B000                      		; ; call	replay_init
     154   03:B000                      		; ; ld		hl,musbuff
     155   03:B000                      		; ; call	replay_loadsong
     156   03:B000                      
     157   03:B000                      
     158   03:B000                      		; ld		e,0
     159   03:B000                      		; call	_setpage
     160   03:B000                      				
     161   03:B000                      		; ld	a, :_level
     162   03:B000                      		; ld	(_kBank4),a
     163   03:B000                      		
     164   03:B000                      		; ld		hl,_level
     165   03:B000                      		; ld		de,_levelmap
     166   03:B000                      		; ld		bc,mapWidth*mapHeight
     167   03:B000                      		; ldir
     168   03:B000                      
     169   03:B000                      
     170   03:B000                      		; ; call	init_page0
     171   03:B000                      
     172   03:B000                      		; ld		a,0
     173   03:B000                      		; ld		(cur_level),a
     174   03:B000                      
     175   03:B000                      		; ei
     176   03:B000                      
     177   03:B000                      ; restart:
     178   03:B000                      		; call	_intreset
     179   03:B000                      
     180   03:B000                      		
     181   03:B000                      
     182   03:B000                      		; ld		a,1
     183   03:B000                      		; ld		(_displaypage),a		
     184   03:B000                      		; call 	_cls0
     185   03:B000                      		; ld		hl,_levelmap
     186   03:B000                      		; ld		(_levelmap_pos),hl
     187   03:B000                      		
     188   03:B000                      		; xor		a
     189   03:B000                      		; ld		h,a
     190   03:B000                      		; ld		l,a
     191   03:B000                      		; ld		(flip_flop),a
     192   03:B000                      		; ld		(god_mode),a
     193   03:B000                      		; ld		(_ymappos),a
     194   03:B000                      		; ld		(_xmappos),hl
     195   03:B000                      		
     196   03:B000                      		; ld		(_nframes),hl
     197   03:B000                      		; ld		(_mcdx),hl
     198   03:B000                      		; ld		(_mcframe),a
     199   03:B000                      		
     200   03:B000                      		; ld		(_yoffset),a		;  0 tutto su
     201   03:B000                      		; ld		(_xoffset),a		;  0 tutto su
     202   03:B000                      								
     203   03:B000                      		; ld		(aniframe),a
     204   03:B000                      		; ld		(anispeed),a
     205   03:B000                      		; ld		(ms_state),a
     206   03:B000                      		; inc 	a
     207   03:B000                      		; ld		(old_aniframe),a		; old_aniframe!=aniframe
     208   03:B000                      	
     209   03:B000                      		; ld		(dxmap),a		; moving right
     210   03:B000                      		; ld		(_dxmap),a		; moving right
     211   03:B000                      
     212   03:B000                      		; ld		(xmap),hl
     213   03:B000                      		; ld		(_xmapx4),hl
     214   03:B000                      		; ld		bc,xship_rel
     215   03:B000                      		; add 	hl,bc
     216   03:B000                      		; ld		(xship),hl
     217   03:B000                      		; ld		a,80
     218   03:B000                      		; ld		(yship),a
     219   03:B000                      
     220   03:B000                      		; call 	npc_init								
     221   03:B000                      		; call 	load_colors
     222   03:B000                      
     223   03:B000                      		; xor	a
     224   03:B000                      		; ld		(_kBank1),a
     225   03:B000                      		; inc	a
     226   03:B000                      		; ld		(_kBank2),a
     227   03:B000                      		; inc	a
     228   03:B000                      		; ld		(_kBank3),a
     229   03:B000                      		
     230   03:B000                      
     231   03:B000                      		; call	_isrinit
     232   03:B000                      
     233   03:B000                      ; main_loop: 
     234   03:B000                      				
     235   03:B000                      		; ld	hl,0
     236   03:B000                      		; ld	(_jiffy),hl
     237   03:B000                      
     238   03:B000                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     239   03:B000                      ; ; run ms FSM and place its sprites in the SAT in RAM
     240   03:B000                      		; call	ms_ctrl
     241   03:B000                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     242   03:B000                      ; ; test for game restart
     243   03:B000                      		; ld	a,(ms_state)
     244   03:B000                      		; cp	ms_reset
     245   03:B000                      		; jp	z,restart
     246   03:B000                      
     247   03:B000                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     248   03:B000                      ; ; place MS in the SAT and test for collision
     249   03:B000                      		; call	put_ms_sprt
     250   03:B000                      		; ld		a,(god_mode)
     251   03:B000                      		; and 	a
     252   03:B000                      		; ; call	z,test_obstacles
     253   03:B000                      
     254   03:B000                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     255   03:B000                      ; ; run NCPS FSM
     256   03:B000                      		; call	wave_timer
     257   03:B000                      		; call	npc_loop
     258   03:B000                      		; call	enemy_bullet_loop
     259   03:B000                      
     260   03:B000                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     261   03:B000                      ; ; run MS bullets FSM
     262   03:B000                      		; call	bullet_loop
     263   03:B000                      
     264   03:B000                      		; ; ld	a,00100101B			; random colour
     265   03:B000                      		; ; out		(0x99),a
     266   03:B000                      		; ; ld		a,7+128
     267   03:B000                      		; ; out		(0x99),a
     268   03:B000                      		
     269   03:B000                      		; ; call	_waitvdp
     270   03:B000                      
     271   03:B000                      		; ; ld	a,10100101B			; random colour
     272   03:B000                      		; ; out		(0x99),a
     273   03:B000                      		; ; ld		a,7+128
     274   03:B000                      		; ; out		(0x99),a
     275   03:B000                      				
     276   03:B000                      		; ld	a,(joystick)
     277   03:B000                      		; and	32
     278   03:B000                      		; ; call	z,_plot_distrucable
     279   03:B000                      
     280   03:B000                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     281   03:B000                      		; ; ld		a,3
     282   03:B000                      		; ; out		(0x99),a
     283   03:B000                      		; ; ld		a,7+128
     284   03:B000                      		; ; out		(0x99),a
     285   03:B000                      		
     286   03:B000                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     287   03:B000                      		; ; call	test_star
     288   03:B000                      
     289   03:B000                      		; ; xor		a
     290   03:B000                      		; ; out		(0x99),a
     291   03:B000                      		; ; ld		a,7+128
     292   03:B000                      		; ; out		(0x99),a
     293   03:B000                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     294   03:B000                      
     295   03:B000                      		
     296   03:B000                      ; 1:		ld	a,(_jiffy)		; wait for vblank (and not for linit)
     297   03:B000                      		; or	a
     298   03:B000                      		; jr	z,1b
     299   03:B000                      	
     300   03:B000                      		; ld	hl,(xmap)
     301   03:B000                      		; ld	bc,xship_rel
     302   03:B000                      		; add hl,bc
     303   03:B000                      		; ld	(xship),hl
     304   03:B000                      
     305   03:B000                      		; ld		a,(dxmap)
     306   03:B000                      		; ld		(_dxmap),a
     307   03:B000                      
     308   03:B000                      		; jp      main_loop
     309   03:B000                      
     310   03:B000                      ; ;-------------------------------------
     311   03:B000                      ; AFXPLAY:
     312   03:B000                      		; ret
     313   03:B000                      ; ;	include vuitpakker.asm
     314   03:B000                      	; include print.asm
     315   03:B000                      	; include plot_line.asm
     316   03:B000                      	; include plot_line2.asm
     317   03:B000                      	; include color_update.asm
     318   03:B000                      ; ms_bllts_col_win:
     319   03:B000                      	; include ms_bllts_frm_coll_wind.asm
     320   03:B000                      	; include	ms_bllts.asm
     321   03:B000                      		
     322   03:B000                      ; ;-------------------------------------
     323   03:B000                      
     324   03:B000                      	
     325   03:B000                      		; page 1
     326   03:B000                      
     327   03:B000                      		; include	ms_crtl.asm
     328   03:B000                      		; include	put_ms_sprt.asm
     329   03:B000                      		; include probe_level.asm				
     330   03:B000                      		; include opening.asm		
     331   03:B000                      ; outvram:
     332   03:B000                      ; 2:		ld	a,d
     333   03:B000                      		; ld	(_kBank4),a
     334   03:B000                      		; ld	hl,0xA000
     335   03:B000                      		; ld	bc,0x98
     336   03:B000                      		; ld	a,32
     337   03:B000                      ; 1:		otir
     338   03:B000                      		; dec	a
     339   03:B000                      		; jp	nz,1b
     340   03:B000                      		; inc	d
     341   03:B000                      		; dec	e
     342   03:B000                      		; jr	nz,2b
     343   03:B000                      		; ret
     344   03:B000                      		
     345   03:B000                      		; page 2
     346   03:B000                      	; ; include mainhero_LMMM.asm
     347   03:B000                      
     348   03:B000                      	
     349   03:B000                      		; page 3
     350   03:B000                      ; manta_color:
     351   03:B000                      		; incbin mship03_clr.bin
     352   03:B000                      ; ms_spt:
     353   03:B000                      		; incbin mship03_frm.bin
     354   03:B000                      		
     355   03:B000                      		; page 4
     356   03:B000                      ; _tiles0:
     357   03:B000                      		; incbin "tiles.bin",0x0000,0x2000
     358   03:B000                      		; page 5
     359   03:B000                      		; incbin "tiles.bin",0x2000,0x2000
     360   03:B000                      		; page 6
     361   03:B000                      		; incbin "tiles.bin",0x4000,0x2000
     362   03:B000                      		; page 7
     363   03:B000                      		; incbin "tiles.bin",0x6000,0x2000
     364   03:B000                      		; page 8
     365   03:B000                      		; incbin "tiles.bin",0x8000,0x2000
     366   03:B000                      		; page 9
     367   03:B000                      		; incbin "tiles.bin",0xA000,0x2000
     368   03:B000                      		; page 10
     369   03:B000                      		; incbin "tiles.bin",0xC000,0x2000
     370   03:B000                      		; page 11
     371   03:B000                      		; incbin "tiles.bin",0xE000;,0x2000
     372   03:B000                      
     373   03:B000                      		; page 12
     374   03:B000                      
     375   03:B000                      		; page 15
     376   03:B000                      ; _level:
     377   03:B000                      		; incbin "datamap.bin"
     378   03:B000                      	
     379   03:B000                      		; page 16
     380   03:B000                      ; _opening:
     381   03:B000                      		; incbin "opening.bin",0x0000,0x2000
     382   03:B000                      		; page 17
     383   03:B000                      		; incbin "opening.bin",0x2000,0x2000
     384   03:B000                      		; page 18
     385   03:B000                      		; incbin "opening.bin",0x4000,0x2000
     386   03:B000                      		; page 19
     387   03:B000                      		; incbin "opening.bin",0x6000,0x2000
     388   03:B000                      		; page 20
     389   03:B000                      		; incbin "opening.bin",0x8000,0x2000
     390   03:B000                      		; page 21
     391   03:B000                      		; incbin "opening.bin",0xA000,0x2000
     392   03:B000                      		; page 22
     393   03:B000                      		; incbin "opening.bin",0xC000;,0x2000
     394   03:B000                      		; page 23
     395   03:B000                      		; ; incbin "opening.bin",0xE000;,,0x2000
     396   03:B000                      	
     397   03:B000                      		; page 24
     398   03:B000                      ; _scorebar:	
     399   03:B000                      		; incbin scorebar.bin
     400   03:B000                      	
     401   03:B000                      		; page 25
     402   03:B000                      ; _animated:	
     403   03:B000                      		; incbin animated.bin,0x0000,0x2000
     404   03:B000                      		; page 26
     405   03:B000                      		; incbin animated.bin,0x2000,0x2000
     406   03:B000                      
     407   03:B000                      		; page 27
     408   03:B000                      ; sprtdata:
     409   03:B000                      		; incbin 	uridium_revA.bin,,16*32
     410   03:B000                      		; incbin 	enemies_frm.bin
     411   03:B000                      
     412   03:B000                      		; page 28
     413   03:B000                      ; color_base:
     414   03:B000                      		; repeat 4
     415   03:B000                      		; ds	16,8
     416   03:B000                      		; ds	16,10+64
     417   03:B000                      		; endrepeat
     418   03:B000                      		; repeat 4
     419   03:B000                      		; ds	16,8
     420   03:B000                      		; ds	16,10+64
     421   03:B000                      		; endrepeat
     422   03:B000                      
     423   03:B000                      		
     424   03:B000                      		; incbin 	enemies_clr.bin
     425   03:B000                      		
     426   03:B000                      ; FINISH:
     427   03:B000                      
     428   03:B000                      
     429   03:B000                      ; ;---------------------------------------------------------
     430   03:B000                      ; ; Variables
     431   03:B000                      ; ;---------------------------------------------------------
     432   03:B000                      	
     433   03:B000                      	
     434   03:B000  (C000)              	MAP 0xC000
     435   03:B000                      
     436   03:B000                      ; _levelmap:			#mapWidth*mapHeight
     437   03:B000                      
     438   03:B000  (03:C000)           slotvar				#1
     439   03:B000  (03:C001)           slotram				#1
     440   03:B000  (03:C002)           SEL_NTSC			#1
     441   03:B000                      
     442   03:B000  (03:C003)           halfrate			#1
     443   03:B000                      
     444   03:B000                      ; joystick			#1
     445   03:B000                      
     446   03:B000                      ; _mcdivider			#1
     447   03:B000                      
     448   03:B000                      ; _mcx				#2	; relative with in the frame on the screen
     449   03:B000                      ; _mcy				#2
     450   03:B000                      
     451   03:B000                      ; _mclx				#2	; absolute with the level in ram
     452   03:B000                      ; _mcly				#2
     453   03:B000                      
     454   03:B000                      ; _mcframe			#1
     455   03:B000                      ; _mcstate			#1
     456   03:B000                      
     457   03:B000                      ; _mcdx				#2
     458   03:B000                      ; _mcdy				#2
     459   03:B000                      
     460   03:B000                      ; _mcprobe:			#1
     461   03:B000                      ; _mcprobeb:			#1
     462   03:B000                      
     463   03:B000                      ; _ticxframe			#1
     464   03:B000                      
     465   03:B000                      ; _buffer:			#16
     466   03:B000                      ; _fps:				#2
     467   03:B000                      ; _nframes:			#2
     468   03:B000                      ; _vbit16:			#2
     469   03:B000                      
     470   03:B000                      ; _ymappos:			#1
     471   03:B000                      ; _xmappos:			#2
     472   03:B000                      ; _levelmap_pos:		#2
     473   03:B000                      
     474   03:B000                      ; _shadowbuff:		#2
     475   03:B000                      
     476   03:B000  (03:C004)           _displaypage:		#1
     477   03:B000                      
     478   03:B000                      ; _mccolorchange:		#1
     479   03:B000  (03:C005)           _xoffset:			#1
     480   03:B000                      ; _yoffset:			#1
     481   03:B000                      
     482   03:B000                      ; __xoffset:			#1
     483   03:B000                      ; __r18:				#1
     484   03:B000                      
     485   03:B000                      ; randSeed:			#2
     486   03:B000                      ; cur_level:			#1
     487   03:B000                      ; wave_count:			#1
     488   03:B000                      ; landing_permission:	#1
     489   03:B000                      ; assault_wave_timer:	#2
     490   03:B000                      ; bullet_rate:		#1
     491   03:B000                      ; _dxchng:			#1		; <>0 if direction changes
     492   03:B000                      ; _dxmap:				#1		; previous dxmap
     493   03:B000                      ; dxmap:				#1
     494   03:B000                      ; xmap:				#2
     495   03:B000                      ; _xmapx4:			#2		; xmap x 4
     496   03:B000                      ; yship:				#1
     497   03:B000                      ; xship:				#2
     498   03:B000                      ; aniframe:			#1
     499   03:B000                      ; ms_state:			#1
     500   03:B000                      ; old_aniframe:		#1
     501   03:B000                      ; anispeed:			#1
     502   03:B000                      ; already_dead:		#1
     503   03:B000                      ; lives_bin:			#1
     504   03:B000                      
     505   03:B000                      ; god_mode:			#1
     506   03:B000                      ; visible_sprts:		#1
     507   03:B000                      ; flip_flop:			#1
     508   03:B000                      
     509   03:B000                      ; ram_sat:			#3*4
     510   03:B000                      
     511   03:B000                      	; struct enemy_data
     512   03:B000                      ; y				db	0
     513   03:B000                      ; x				dw	0
     514   03:B000                      ; xoff			db	0
     515   03:B000                      ; yoff			db	0
     516   03:B000                      ; xsize			db	0
     517   03:B000                      ; ysize			db	0
     518   03:B000                      ; status			db	0	; B7 = DWN/UP | B6 = RIGHT/LEFT | B5 = ok/wrong clr | B0 = Inactive/Active
     519   03:B000                      ; cntr			db	0
     520   03:B000                      ; kind			db	0
     521   03:B000                      ; frame			db	0
     522   03:B000                      ; color			db	0
     523   03:B000                      ; color2			db	0
     524   03:B000                      ; speed			dw	0
     525   03:B000                      	; ends
     526   03:B000                      	
     527   03:B000                      ; any_object:			#0
     528   03:B000                      ; ms_bullets:			#enemy_data*max_bullets
     529   03:B000                      ; enem_bullets:		#enemy_data*max_enem_bullets
     530   03:B000                      ; enemies:			#enemy_data*max_enem
     531   03:B000                      ; endram:				#1
     532   03:B000  (0000)              	ENDMAP

    LABELS
-------------------------------------------------
00:00005000   _kBank1
00:00007000   _kBank2
00:00009000   _kBank3
00:0000B000   _kBank4
00:0000F3DF X RG0SAV
00:0000F3E0   RG1SAV
00:0000F3E1 X RG2SAV
00:0000F3E2 X RG3SAV
00:0000F3E3 X RG4SAV
00:0000F3E4 X RG5SAV
00:0000F3E5 X RG6SAV
00:0000F3E6   RG7SAV
00:0000FFE7   RG8SAV
00:0000FFE8   RG9SAV
00:0000FFE9 X RG10SAV
00:0000FFEA X RG11SAV
00:0000FFEB X RG12SAV
00:0000FFEC X RG13SAV
00:0000FFED X RG14SAV
00:0000FFEE X RG15SAV
00:0000FFEF X RG16SAV
00:0000FFF0 X RG17SAV
00:0000FFF1 X RG18SAV
00:0000FFF2 X RG19SAV
00:0000FFF3 X RG20SAV
00:0000FFF4 X RG21SAV
00:0000FFF5 X RG22SAV
00:0000FFF7 X RG23SAV
00:0000FC9E X _jiffy
00:0000000C X max_enem
00:00000003 X max_enem_bullets
00:00000002 X max_bullets
00:00000004 X maxspeed
00:000000B4 X assault_wave_timer_preset
00:00000002 X enemy_bullet_speed
00:00000078 X xship_rel
00:00000100 X mapWidth
00:0000000B   mapHeight
00:000000A8 X YSIZE
00:00000024 X ENASLT
00:00000138   RSLREG
00:0000FCC1   EXPTBL
00:00004010   search_slot
00:0000402F   search_slotram
00:00004050   search_slotram0
00:00004055 X setrompage0
00:0000405B   setrampage0
00:00004061   setrompage2
00:00004067 X setrampage2
00:0000406D X setrompage3
00:00004073 X setrampage3
00:00004079 X recbios
00:0000407C   setslotpage0
00:000040B3 X setslotpage1
00:000040F2   setslotpage2
00:00004139   setslotpage3
00:00004178   _cls
00:00004190 X _cls0
00:00000099 X vdpport1
00:0000009A X vdpport2
00:000041A5   _vdpsetvramwr
00:000041A6 X _vdpsetvramwr2
00:000041B6 X _vdpsetvramwr14
00:000041BF X _vdpsetvramrd
00:000041D9 X _setpage
00:0000005F   chgmod
00:0000000C X RDSLT
00:00000156 X KILBUF
00:000041EA   set_scr
00:0000422D X _waitvdp
00:0000423C   _fake_isr
00:00004275   fsm
00:000042D1   x0
00:000042DB   x1
00:000042EB   x2
00:000042FB   x3
00:0000430B   x4
00:0000431B   x5
00:0000432B   x6
00:0000433B   x7
00:0000434B   x8
00:0000435B   x9
00:0000436B   x10
00:0000437B   x11
00:0000438B   x12
00:0000439B   x13
00:000043AB   x14
00:000043BB   x15
00:000043CB   move_slice
00:00004406   clear_slice
00:00004433 X brdrs
00:0000443E   _brdrs
00:00004478   plot_col64
00:00004484   plot_col32
00:00004491   plot_col16
00:000045DB   checkkbd
00:000045E8   START
00:0000463E   PAL_ntsc
00:0000464D   _levelmap
03:0000A000   _tiles0
03:0000C000   slotvar
03:0000C001   slotram
03:0000C002   SEL_NTSC
03:0000C003   halfrate
03:0000C004   _displaypage
03:0000C005   _xoffset


 Output: main.out
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: *  Used: 00000000

    No output

 Output: urd2.rom
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: 00002000  Used: 0000074D

   Address   Length Align   Label
   00004000    1869         search_slot
   0000474D    6323       <empty>

 Page: 01
  Org: 00006000  Size: 00002000  Used: 00000000

   00006000    8192       <empty>

 Page: 02
  Org: 00008000  Size: 00002000  Used: 00000000

   00008000    8192       <empty>

 Page: 03
  Org: 0000A000  Size: 00002000  Used: 00001000

   Address   Length Align   Label
   0000A000    4096         _tiles0
   0000B000    4096       <empty>

 Page: 04
  Org: 0000A000  Size: 00002000  Used: 00000000

   0000A000    8192       <empty>

 Page: 05
  Org: 0000A000  Size: 00002000  Used: 00000000

   0000A000    8192       <empty>

 Page: 06
  Org: 0000A000  Size: 00002000  Used: 00000000

   0000A000    8192       <empty>

 Page: 07
  Org: 0000A000  Size: 00002000  Used: 00000000

   0000A000    8192       <empty>

 Page: 08
  Org: 0000A000  Size: 00002000  Used: 00000000

   0000A000    8192       <empty>

 Page: 09
  Org: 0000A000  Size: 00002000  Used: 00000000

   0000A000    8192       <empty>

 Page: 0A
  Org: 0000A000  Size: 00002000  Used: 00000000

   0000A000    8192       <empty>

 Page: 0B
  Org: 0000A000  Size: 00002000  Used: 00000000

   0000A000    8192       <empty>

 Page: 0C
  Org: 0000A000  Size: 00002000  Used: 00000000

   0000A000    8192       <empty>

 Page: 0D
  Org: 0000A000  Size: 00002000  Used: 00000000

   0000A000    8192       <empty>

 Page: 0E
  Org: 0000A000  Size: 00002000  Used: 00000000

   0000A000    8192       <empty>

 Page: 0F
  Org: 0000A000  Size: 00002000  Used: 00000000

   0000A000    8192       <empty>
