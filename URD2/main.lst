Sjasm Z80 Assembler v0.42c - www.xl2s.tk             [2016.01.13 - 23:52:23]

main.asm
Errors: 0

       1   00:0000                      ;----------------------------------------------------------------------------
       2   00:0000                      ;
       3   00:0000                      ;----------------------------------------------------------------------------
       4   00:0000                      
       5   00:0000                              output "urd2.rom"
       6   00:0000                      
       7   00:0000                      		;	konami scc
       8   00:0000                      		
       9   00:0000  (00:5000)           _kBank1:	equ 05000h ;- 57FFh (5000h used)
      10   00:0000  (00:7000)           _kBank2: 	equ 07000h ;- 77FFh (7000h used)
      11   00:0000  (00:9000)           _kBank3: 	equ 09000h ;- 97FFh (9000h used)
      12   00:0000  (00:B000)           _kBank4: 	equ 0B000h ;- B7FFh (B000h used)
      13   00:0000                      
      14   00:0000                      
      15   00:0000                      
      16   00:0000                      		defpage	 0,0x4000, 0x2000		; page 0 main code + far call routines
      17   00:0000                      		defpage	 1,0x6000, 0x2000		; page 1 main code + far call routines
      18   00:0000                      		defpage	 2,0x8000, 0x2000		; swapped data 
      19   00:0000                      		defpage	 3,0xA000, 0x2000		; swapped data 
      20   00:0000                      		
      21   00:0000                      		defpage	 4..15					; 64KB of swapped data 
      22   00:0000                      
      23   00:0000                      
      24   00:0000                      
      25   00:0000                        		include "header.asm"
       1.  00:0000                      
       2.  00:0000                        // MSX 1 
       3.  00:0000  (00:F3DF)           RG0SAV  equ 0xF3DF  
       4.  00:0000  (00:F3E0)           RG1SAV  equ 0xF3E0  
       5.  00:0000  (00:F3E1)           RG2SAV  equ 0xF3E1
       6.  00:0000  (00:F3E2)           RG3SAV  equ 0xF3E2
       7.  00:0000  (00:F3E3)           RG4SAV  equ 0xF3E3
       8.  00:0000  (00:F3E4)           RG5SAV  equ 0xF3E4
       9.  00:0000  (00:F3E5)           RG6SAV  equ 0xF3E5
      10.  00:0000  (00:F3E6)           RG7SAV  equ 0xF3E6
      11.  00:0000                      // MSX 2
      12.  00:0000  (00:FFE7)           RG8SAV  equ 0xFFE7 
      13.  00:0000  (00:FFE8)           RG9SAV  equ 0xFFE8 
      14.  00:0000  (00:FFE9)           RG10SAV equ 0xFFE9 
      15.  00:0000  (00:FFEA)           RG11SAV equ 0xFFEA 
      16.  00:0000  (00:FFEB)           RG12SAV equ 0xFFEB 
      17.  00:0000  (00:FFEC)           RG13SAV equ 0xFFEC 
      18.  00:0000  (00:FFED)           RG14SAV equ 0xFFED 
      19.  00:0000  (00:FFEE)           RG15SAV equ 0xFFEE 
      20.  00:0000  (00:FFEF)           RG16SAV equ 0xFFEF 
      21.  00:0000  (00:FFF0)           RG17SAV equ 0xFFF0 
      22.  00:0000  (00:FFF1)           RG18SAV equ 0xFFF1 
      23.  00:0000  (00:FFF2)           RG19SAV equ 0xFFF2 
      24.  00:0000  (00:FFF3)           RG20SAV equ 0xFFF3 
      25.  00:0000  (00:FFF4)           RG21SAV equ 0xFFF4 
      26.  00:0000  (00:FFF5)           RG22SAV equ 0xFFF5 
      27.  00:0000  (00:FFF7)           RG23SAV equ 0xFFF7 
      28.  00:0000                      
      29.  00:0000  (00:FC9E)           _jiffy: equ 0xFC9E 
      30.  00:0000                      
      31.  00:0000                      	
      32.  00:0000                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      33.  00:0000                      
      34.  00:0000  (00:000C)           max_enem:					equ 12		; max 12
      35.  00:0000  (00:0003)           max_enem_bullets:			equ 3
      36.  00:0000  (00:0002)           max_bullets:				equ 2		; max number of enemies*2 + ms_bullets + enem_bullets + 3 for ms	<= 32 sprites
      37.  00:0000                      
      38.  00:0000  (00:0004)           maxspeed:					equ 4		; the actual speed is divided by 4
      39.  00:0000  (00:00B4)           assault_wave_timer_preset:	equ	3*60	; a wave each 3 seconds
      40.  00:0000  (00:0002)           enemy_bullet_speed:			equ	2	
      41.  00:0000  (00:0078)           xship_rel:					equ (128-8)
      42.  00:0000                      
      43.  00:0000  (00:0100)           mapWidth	equ	256
      44.  00:0000  (00:000B)           mapHeight	equ	11
      45.  00:0000  (00:00A8)           YSIZE		equ	10*16+8
      46.  00:0000                      
      47.  00:0000                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      48.  00:0000                      
      49.  00:0000                      
      50.  00:0000                      	macro setpage_a
      51.  00:0000                    < 		ld	(_kBank3),a
      52.  00:0000                    < 		inc	a
      53.  00:0000                    < 		ld	(_kBank4),a
      54.  00:0000                    < 	endmacro
      55.  00:0000                      	
      56.  00:0000                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
      26   00:0000                      		
      27   00:0000                      		
      28   00:0000                      		
      29   00:0000  (00)                		page 0
      30   00:4000                      		
      31   00:4000                              org 4000h
      32   00:4000                              dw  4241h,START,0,0,0,0,0,0
      32   00:4000  41 42 0A 45 00 00 00 00 00 00 00 00 00 00 00 00 
      33   00:4010                      
      34   00:4010                      	;-------------------------------------		
      35   00:4010                      
      36   00:4010                      
      37   00:4010                      		include rominit64.asm
       1.  00:4010                      
       2.  00:4010                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       3.  00:4010                      ; set pages and subslot
       4.  00:4010                      ;
       5.  00:4010                      
       6.  00:4010                      
       7.  00:4010  (00:0024)           ENASLT:			equ		024h
       8.  00:4010  (00:0138)           RSLREG:			equ		0138h
       9.  00:4010  (00:FCC1)           EXPTBL:			equ		0FCC1h	; Bios Slot / Expansion Slot
      10.  00:4010                      
      11.  00:4010                      
      12.  00:4010                      ; ----------------------------
      13.  00:4010                      ; pre-set main slot for page 3
      14.  00:4010                      ; and set sub-slot for page 3
      15.  00:4010                      ; ----------------------------
      16.  00:4010                      	macro	mainslot_setup n
      17.  00:4010                    < 	and		3
      18.  00:4010                    < [2]	rrca
      19.  00:4010                    < 	and		0xC0
      20.  00:4010                    < 	ld		c,a
      21.  00:4010                    < 	ld		a,d
      22.  00:4010                    < 	and		0x3F
      23.  00:4010                    < 	or		c
      24.  00:4010                    < 	ld		c,a					; Primary slot value with main slot in page 3
      25.  00:4010                    < 
      26.  00:4010                    < 	ld		a,b
      27.  00:4010                    < 	and		0x0C
      28.  00:4010                    < [2]	rrca
      29.  00:4010                    < 	and		3
      30.  00:4010                    < 	ld		b,a					; B = Expanded slot in page 3
      31.  00:4010                    < 	ld		a,c
      32.  00:4010                    < 	out		(0A8h),a			; Slot : Main Slot, xx, xx, Main slot
      33.  00:4010                    < 	ld		a,(0FFFFh)
      34.  00:4010                    < 	cpl
      35.  00:4010                    < 	if (n<=4)
      36.  00:4010                    < [n]	RLCA
      37.  00:4010                    < 	else
      38.  00:4010                    < [8-n] RRCA	
      39.  00:4010                    < 	endif
      40.  00:4010                    < 	and		0xFC
      41.  00:4010                    < 	or		b
      42.  00:4010                    < 	if (n<=4)
      43.  00:4010                    < [n]	RRCA
      44.  00:4010                    < 	else
      45.  00:4010                    < [8-n] RLCA
      46.  00:4010                    < 	endif
      47.  00:4010                    < 	ld		(0FFFFh),a		; Expanded slot selected
      48.  00:4010                    < 	ld		b,a				; save for later	
      49.  00:4010                    < 	endmacro
      50.  00:4010                      		
      51.  00:4010                      
      52.  00:4010                      ; ------------------------------
      53.  00:4010                      ; SEARCH_SLOT
      54.  00:4010                      ; look for the slot of our rom
      55.  00:4010                      ; active in page 1
      56.  00:4010                      ; ------------------------------
      57.  00:4010                      
      58.  00:4010                      search_slot:
      59.  00:4010  CD 38 01            	call	RSLREG
      60.  00:4013  0F 0F               [2]	rrca
      61.  00:4015  E6 03               	and		3
      62.  00:4017  4F                  	ld		c,a
      63.  00:4018  06 00               	ld		b,0
      64.  00:401A  21 C1 FC            	ld		hl,EXPTBL
      65.  00:401D  09                  	add		hl,bc
      66.  00:401E  7E                  	ld		a,(hl)
      67.  00:401F  E6 80               	and		080h
      68.  00:4021  B1                  	or		c
      69.  00:4022  4F                  	ld		c,a
      70.  00:4023  23 23 23 23         [4]	inc		hl
      71.  00:4027  7E                  	ld		a,(hl)
      72.  00:4028  E6 0C               	and		0Ch
      73.  00:402A  B1                  	or		c
      74.  00:402B  32 00 CB            	ld		(slotvar),a
      75.  00:402E  C9                  	ret
      76.  00:402F                      	
      77.  00:402F                      ; ------------------------------
      78.  00:402F                      ; look for the slot of ram
      79.  00:402F                      ; active in page 3
      80.  00:402F                      ; ------------------------------
      81.  00:402F                      
      82.  00:402F                      search_slotram:
      83.  00:402F  F3                  	di
      84.  00:4030  CD 38 01            	call	RSLREG
      85.  00:4033  07 07               [2]	rlca
      86.  00:4035  E6 03               	and		3
      87.  00:4037  4F                  	ld		c,a
      88.  00:4038  06 00               	ld		b,0
      89.  00:403A  21 C1 FC            	ld		hl,EXPTBL
      90.  00:403D  09                  	add		hl,bc
      91.  00:403E  7E                  	ld		a,(hl)
      92.  00:403F  E6 80               	and		080h
      93.  00:4041  28 0D               	jr		z,search_slotram0
      94.  00:4043  B1                  	or		c
      95.  00:4044  4F                  	ld		c,a
      96.  00:4045  23 23 23 23         [4]	inc		hl
      97.  00:4049  7E                  	ld		a,(hl)
      98.  00:404A  07 07 07 07         [4]	rlca
      99.  00:404E  E6 0C               	and		0Ch
     100.  00:4050                      search_slotram0:
     101.  00:4050  B1                  	or		c
     102.  00:4051  32 01 CB            	ld		(slotram),a
     103.  00:4054  C9                  	ret
     104.  00:4055                      	
     105.  00:4055                      ; ------------------------------
     106.  00:4055                      ; SETROMPAGE0
     107.  00:4055                      ; Set the chart in
     108.  00:4055                      ; Page 0
     109.  00:4055                      ; -----------------------------
     110.  00:4055                      
     111.  00:4055                      setrompage0:
     112.  00:4055  3A 00 CB            	ld		a,(slotvar)
     113.  00:4058  C3 7C 40            	jp		setslotpage0
     114.  00:405B                      
     115.  00:405B                      setrampage0:
     116.  00:405B  3A 01 CB            	ld		a,(slotram)
     117.  00:405E  C3 7C 40            	jp		setslotpage0
     118.  00:4061                      
     119.  00:4061                      setrompage2:
     120.  00:4061  3A 00 CB            	ld		a,(slotvar)
     121.  00:4064  C3 F2 40            	jp		setslotpage2
     122.  00:4067                      
     123.  00:4067                      setrampage2:
     124.  00:4067  3A 01 CB            	ld		a,(slotram)
     125.  00:406A  C3 F2 40            	jp		setslotpage2
     126.  00:406D                      	
     127.  00:406D                      setrompage3:
     128.  00:406D  3A 00 CB            	ld		a,(slotvar)
     129.  00:4070  C3 39 41            	jp		setslotpage3
     130.  00:4073                      
     131.  00:4073                      setrampage3:
     132.  00:4073  3A 01 CB            	ld		a,(slotram)
     133.  00:4076  C3 39 41            	jp		setslotpage3
     134.  00:4079                      	
     135.  00:4079                      ; ------------------------------
     136.  00:4079                      ; RECBIOS
     137.  00:4079                      ; set the bios ROM
     138.  00:4079                      ; -------------------------------
     139.  00:4079                      recbios:
     140.  00:4079  3A C1 FC            	ld		a,(EXPTBL)
     141.  00:407C                      
     142.  00:407C                      ; ---------------------------
     143.  00:407C                      ; SETSLOTPAGE0
     144.  00:407C                      ; Set the slot passed in A
     145.  00:407C                      ; at page 0 in the Z80 address space
     146.  00:407C                      ; A: Format FxxxSSPP
     147.  00:407C                      ; ----------------------------
     148.  00:407C                      
     149.  00:407C                      setslotpage0:
     150.  00:407C  F3                  	di
     151.  00:407D  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     152.  00:407E  DB A8               	in		a,(0A8h)
     153.  00:4080  E6 FC               	and		0xFC
     154.  00:4082  57                  	ld		d,a					; D = Primary slot value
     155.  00:4083  78                  	ld		a,b
     156.  00:4084  E6 03               	and		3
     157.  00:4086  B2                  	or		d
     158.  00:4087  57                  	ld		d,a		; D = Final Value for primary slot
     159.  00:4088  78                  	ld		a,b		; Check if expanded
     160.  00:4089  CB 7F               	bit		7,a
     161.  00:408B  28 22               	jr		z,1f	; Not Expanded
     162.  00:408D                      	mainslot_setup	0
     162.  00:408D  E6 03             >  and  3
     162.  00:408F  0F 0F             > [2] rrca
     162.  00:4091  E6 C0             >  and  0xC0
     162.  00:4093  4F                >  ld  c,a
     162.  00:4094  7A                >  ld  a,d
     162.  00:4095  E6 3F             >  and  0x3F
     162.  00:4097  B1                >  or  c
     162.  00:4098  4F                >  ld  c,a
     162.  00:4099                    > 
     162.  00:4099  78                >  ld  a,b
     162.  00:409A  E6 0C             >  and  0x0C
     162.  00:409C  0F 0F             > [2] rrca
     162.  00:409E  E6 03             >  and  3
     162.  00:40A0  47                >  ld  b,a
     162.  00:40A1  79                >  ld  a,c
     162.  00:40A2  D3 A8             >  out  (0A8h),a
     162.  00:40A4  3A FF FF          >  ld  a,(0FFFFh)
     162.  00:40A7  2F                >  cpl
     162.  00:40A8                    >  if (n<=4)
     162.  00:40A8                    > [n] RLCA
     162.  00:40A8                    >  else
     162.  00:40A8                    ~ [8-n] RRCA
     162.  00:40A8                    ~  endif
     162.  00:40A8  E6 FC             >  and  0xFC
     162.  00:40AA  B0                >  or  b
     162.  00:40AB                    >  if (n<=4)
     162.  00:40AB                    > [n] RRCA
     162.  00:40AB                    >  else
     162.  00:40AB                    ~ [8-n] RLCA
     162.  00:40AB                    ~  endif
     162.  00:40AB  32 FF FF          >  ld  (0FFFFh),a
     162.  00:40AE  47                >  ld  b,a
     163.  00:40AF  7A                  1:	ld		a,d				; A = Final value
     164.  00:40B0  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     165.  00:40B2  C9                  	ret
     166.  00:40B3                      
     167.  00:40B3                      ; ---------------------------
     168.  00:40B3                      ; SETSLOTPAGE1
     169.  00:40B3                      ; Set the slot passed in A
     170.  00:40B3                      ; at page 1 in the Z80 address space
     171.  00:40B3                      ; A: Format FxxxSSPP
     172.  00:40B3                      ; ----------------------------
     173.  00:40B3                      
     174.  00:40B3                      setslotpage1:
     175.  00:40B3  F3                  	di
     176.  00:40B4  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     177.  00:40B5  DB A8               	in		a,(0A8h)
     178.  00:40B7  0F 0F               [2]	RRCA
     179.  00:40B9  E6 FC               	and		0xFC
     180.  00:40BB  57                  	ld		d,a					; D = Primary slot value
     181.  00:40BC  78                  	ld		a,b
     182.  00:40BD  E6 03               	and		3
     183.  00:40BF  B2                  	or		d
     184.  00:40C0  07 07               [2]	RLCA
     185.  00:40C2  57                  	ld		d,a		; D = Final Value for primary slot
     186.  00:40C3  78                  	ld		a,b		; Check if expanded
     187.  00:40C4  CB 7F               	bit		7,a
     188.  00:40C6  28 26               	jr		z,1f	; Not Expanded
     189.  00:40C8                      	mainslot_setup	6
     189.  00:40C8  E6 03             >  and  3
     189.  00:40CA  0F 0F             > [2] rrca
     189.  00:40CC  E6 C0             >  and  0xC0
     189.  00:40CE  4F                >  ld  c,a
     189.  00:40CF  7A                >  ld  a,d
     189.  00:40D0  E6 3F             >  and  0x3F
     189.  00:40D2  B1                >  or  c
     189.  00:40D3  4F                >  ld  c,a
     189.  00:40D4                    > 
     189.  00:40D4  78                >  ld  a,b
     189.  00:40D5  E6 0C             >  and  0x0C
     189.  00:40D7  0F 0F             > [2] rrca
     189.  00:40D9  E6 03             >  and  3
     189.  00:40DB  47                >  ld  b,a
     189.  00:40DC  79                >  ld  a,c
     189.  00:40DD  D3 A8             >  out  (0A8h),a
     189.  00:40DF  3A FF FF          >  ld  a,(0FFFFh)
     189.  00:40E2  2F                >  cpl
     189.  00:40E3                    >  if (n<=4)
     189.  00:40E3                    ~ [n] RLCA
     189.  00:40E3                    ~  else
     189.  00:40E3  0F 0F             > [8-n] RRCA
     189.  00:40E5                    >  endif
     189.  00:40E5  E6 FC             >  and  0xFC
     189.  00:40E7  B0                >  or  b
     189.  00:40E8                    >  if (n<=4)
     189.  00:40E8                    ~ [n] RRCA
     189.  00:40E8                    ~  else
     189.  00:40E8  07 07             > [8-n] RLCA
     189.  00:40EA                    >  endif
     189.  00:40EA  32 FF FF          >  ld  (0FFFFh),a
     189.  00:40ED  47                >  ld  b,a
     190.  00:40EE  7A                  1:	ld		a,d				; A = Final value
     191.  00:40EF  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     192.  00:40F1  C9                  	ret
     193.  00:40F2                      	
     194.  00:40F2                      
     195.  00:40F2                      ; ---------------------------
     196.  00:40F2                      ; SETSLOTPAGE2
     197.  00:40F2                      ; Set the slot passed in A
     198.  00:40F2                      ; at page 2 in the Z80 address space
     199.  00:40F2                      ; A: Format FxxxSSPP
     200.  00:40F2                      ; ----------------------------
     201.  00:40F2                      
     202.  00:40F2                      setslotpage2:
     203.  00:40F2  F3                  	di
     204.  00:40F3  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     205.  00:40F4  DB A8               	in		a,(0A8h)
     206.  00:40F6  07 07 07 07         [4]	RLCA
     207.  00:40FA  E6 FC               	and		0xFC
     208.  00:40FC  57                  	ld		d,a					; D = Primary slot value
     209.  00:40FD  78                  	ld		a,b
     210.  00:40FE  E6 03               	and		3
     211.  00:4100  B2                  	or		d
     212.  00:4101  0F 0F 0F 0F         [4]	RRCA
     213.  00:4105  57                  	ld		d,a		; D = Final Value for primary slot
     214.  00:4106  78                  	ld		a,b		; Check if expanded
     215.  00:4107  CB 7F               	bit		7,a
     216.  00:4109  28 2A               	jr		z,1f	; Not Expanded
     217.  00:410B                      	mainslot_setup	4
     217.  00:410B  E6 03             >  and  3
     217.  00:410D  0F 0F             > [2] rrca
     217.  00:410F  E6 C0             >  and  0xC0
     217.  00:4111  4F                >  ld  c,a
     217.  00:4112  7A                >  ld  a,d
     217.  00:4113  E6 3F             >  and  0x3F
     217.  00:4115  B1                >  or  c
     217.  00:4116  4F                >  ld  c,a
     217.  00:4117                    > 
     217.  00:4117  78                >  ld  a,b
     217.  00:4118  E6 0C             >  and  0x0C
     217.  00:411A  0F 0F             > [2] rrca
     217.  00:411C  E6 03             >  and  3
     217.  00:411E  47                >  ld  b,a
     217.  00:411F  79                >  ld  a,c
     217.  00:4120  D3 A8             >  out  (0A8h),a
     217.  00:4122  3A FF FF          >  ld  a,(0FFFFh)
     217.  00:4125  2F                >  cpl
     217.  00:4126                    >  if (n<=4)
     217.  00:4126  07 07 07 07       > [n] RLCA
     217.  00:412A                    >  else
     217.  00:412A                    ~ [8-n] RRCA
     217.  00:412A                    ~  endif
     217.  00:412A  E6 FC             >  and  0xFC
     217.  00:412C  B0                >  or  b
     217.  00:412D                    >  if (n<=4)
     217.  00:412D  0F 0F 0F 0F       > [n] RRCA
     217.  00:4131                    >  else
     217.  00:4131                    ~ [8-n] RLCA
     217.  00:4131                    ~  endif
     217.  00:4131  32 FF FF          >  ld  (0FFFFh),a
     217.  00:4134  47                >  ld  b,a
     218.  00:4135  7A                  1:	ld		a,d				; A = Final value
     219.  00:4136  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     220.  00:4138  C9                  	ret
     221.  00:4139                      	
     222.  00:4139                      ; ---------------------------
     223.  00:4139                      ; SETSLOTPAGE3
     224.  00:4139                      ; Set the slot passed in A
     225.  00:4139                      ; at page 3 in the Z80 address space
     226.  00:4139                      ; A: Format FxxxSSPP
     227.  00:4139                      ; ----------------------------
     228.  00:4139                      	
     229.  00:4139                      setslotpage3:
     230.  00:4139  F3                  	di
     231.  00:413A  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     232.  00:413B  DB A8               	in		a,(0A8h)
     233.  00:413D  07 07               [2]	RLCA
     234.  00:413F  E6 FC               	and		0xFC
     235.  00:4141  57                  	ld		d,a					; D = Primary slot value
     236.  00:4142  78                  	ld		a,b
     237.  00:4143  E6 03               	and		3
     238.  00:4145  B2                  	or		d
     239.  00:4146  0F 0F               [2]	RRCA	
     240.  00:4148  57                  	ld		d,a		; D = Final Value for primary slot
     241.  00:4149  78                  	ld		a,b		; Check if expanded
     242.  00:414A  CB 7F               	bit		7,a
     243.  00:414C  28 26               	jr		z,1f	; Not Expanded
     244.  00:414E                      	mainslot_setup	2
     244.  00:414E  E6 03             >  and  3
     244.  00:4150  0F 0F             > [2] rrca
     244.  00:4152  E6 C0             >  and  0xC0
     244.  00:4154  4F                >  ld  c,a
     244.  00:4155  7A                >  ld  a,d
     244.  00:4156  E6 3F             >  and  0x3F
     244.  00:4158  B1                >  or  c
     244.  00:4159  4F                >  ld  c,a
     244.  00:415A                    > 
     244.  00:415A  78                >  ld  a,b
     244.  00:415B  E6 0C             >  and  0x0C
     244.  00:415D  0F 0F             > [2] rrca
     244.  00:415F  E6 03             >  and  3
     244.  00:4161  47                >  ld  b,a
     244.  00:4162  79                >  ld  a,c
     244.  00:4163  D3 A8             >  out  (0A8h),a
     244.  00:4165  3A FF FF          >  ld  a,(0FFFFh)
     244.  00:4168  2F                >  cpl
     244.  00:4169                    >  if (n<=4)
     244.  00:4169  07 07             > [n] RLCA
     244.  00:416B                    >  else
     244.  00:416B                    ~ [8-n] RRCA
     244.  00:416B                    ~  endif
     244.  00:416B  E6 FC             >  and  0xFC
     244.  00:416D  B0                >  or  b
     244.  00:416E                    >  if (n<=4)
     244.  00:416E  0F 0F             > [n] RRCA
     244.  00:4170                    >  else
     244.  00:4170                    ~ [8-n] RLCA
     244.  00:4170                    ~  endif
     244.  00:4170  32 FF FF          >  ld  (0FFFFh),a
     244.  00:4173  47                >  ld  b,a
     245.  00:4174  7A                  1:	ld		a,d				; A = Final value
     246.  00:4175  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     247.  00:4177  C9                  	ret
     248.  00:4178                      
     249.  00:4178                      	
      38   00:4178                      		include vdpio.asm
       1.  00:4178                      
       2.  00:4178                             
       3.  00:4178                      ;-------------------------------------
       4.  00:4178                      _cls:		
       5.  00:4178  0E 00               		ld		c,0
       6.  00:417A  51                  		ld		d,c
       7.  00:417B  59                  		ld		e,c
       8.  00:417C  F3                  		di
       9.  00:417D  CD A5 41            		call	_vdpsetvramwr
      10.  00:4180  41                  		ld		b,c
      11.  00:4181  1E 01               		ld		e,1
      12.  00:4183  AF                  1:		xor		a
      13.  00:4184  D3 98               		out		(0x98),a
      14.  00:4186  ED A1                       cpi
      15.  00:4188  EA 83 41                    jp   	pe,1b
      16.  00:418B  1D                  		dec	e
      17.  00:418C  C2 83 41            		jp		nz,1b
      18.  00:418F  C9                  		ret
      19.  00:4190                      _cls0:
      20.  00:4190  0E 00               		ld		c,0
      21.  00:4192  51                  		ld		d,c
      22.  00:4193  59                  		ld		e,c
      23.  00:4194  F3                  		di
      24.  00:4195  CD A5 41            		call	_vdpsetvramwr
      25.  00:4198  FB                  		ei
      26.  00:4199  01 00 B0            		ld		bc,mapHeight*16*256
      27.  00:419C  AF                  		xor		a
      28.  00:419D  D3 98               1:		out		(0x98),a
      29.  00:419F  ED A1                       cpi
      30.  00:41A1  EA 9D 41                    jp   	pe,1b
      31.  00:41A4  C9                  		ret
      32.  00:41A5                      		
      33.  00:41A5                      ;-------------------------------------
      34.  00:41A5                      		
      35.  00:41A5  (00:0099)           vdpport1 equ 0x99
      36.  00:41A5  (00:009A)           vdpport2 equ 0x9A
      37.  00:41A5                      
      38.  00:41A5                      ; levelcolors:
      39.  00:41A5                      	;  incbin "palette.bin"
      40.  00:41A5                      
      41.  00:41A5                      ; _SetPalet:   
      42.  00:41A5                      		; di
      43.  00:41A5                      		; xor a 			;Set pointer to zero.
      44.  00:41A5                      		; out (vdpport1),a        
      45.  00:41A5                      		; ld  a,16 | 010000000B
      46.  00:41A5                      		; out (vdpport1),a
      47.  00:41A5                      
      48.  00:41A5                      		; ld  hl,levelcolors
      49.  00:41A5                      		; ld bc,vdpport2+32*256
      50.  00:41A5                      		; otir
      51.  00:41A5                      		; ei
      52.  00:41A5                      		; ret
      53.  00:41A5                      
      54.  00:41A5                      ;Set VDP for writing at address CDE (17-bit) 
      55.  00:41A5                      
      56.  00:41A5                      _vdpsetvramwr:
      57.  00:41A5  79                  		ld a,c
      58.  00:41A6                      _vdpsetvramwr2:
      59.  00:41A6                      ;Set VDP for writing at address ADE (17-bit) ;
      60.  00:41A6  CB 02               		rlc d
      61.  00:41A8  17                  		rla
      62.  00:41A9  CB 02               		rlc d
      63.  00:41AB  17                  		rla
      64.  00:41AC  CB 3A               		srl d ; primo shift, il secondo dopo la out
      65.  00:41AE                      
      66.  00:41AE  D3 99               		out (0x99),a ;set bits 14-16
      67.  00:41B0  3E 8E               		ld a,14+128
      68.  00:41B2  D3 99               		out (0x99),a
      69.  00:41B4                      
      70.  00:41B4  CB 3A               		srl d ; secondo shift.     
      71.  00:41B6                      _vdpsetvramwr14
      72.  00:41B6  7B                  		ld a,e ;set bits 0-7
      73.  00:41B7  D3 99               		out (0x99),a
      74.  00:41B9  7A                  		ld a,d ;set bits 8-13
      75.  00:41BA  F6 40               		or 0x40 ; + write access
      76.  00:41BC  D3 99               		out (0x99),a
      77.  00:41BE  C9                  		ret
      78.  00:41BF                      	
      79.  00:41BF                      ;Set VDP port #98 to start reading at address CDE (17-bit) ;
      80.  00:41BF                      
      81.  00:41BF                      _vdpsetvramrd:
      82.  00:41BF  79                  		ld a,c
      83.  00:41C0                      ;Set VDP port #98 to start reading at address ADE (17-bit) ;
      84.  00:41C0  CB 02               		rlc d
      85.  00:41C2  17                  		rla
      86.  00:41C3  CB 02               		rlc d
      87.  00:41C5  17                  		rla
      88.  00:41C6  CB 3A               		srl d 			; primo shift, il secondo dopo la out
      89.  00:41C8                      
      90.  00:41C8  D3 99               		out (0x99),a 	; set bits 14-16
      91.  00:41CA  3E 8E               		ld a,14+128
      92.  00:41CC  D3 99               		out (0x99),a
      93.  00:41CE                      
      94.  00:41CE  CB 3A               		srl d 	; secondo shift.            
      95.  00:41D0  7B                  		ld a,e 	; set bits 0-7
      96.  00:41D1  D3 99               		out (0x99),a
      97.  00:41D3  7A                  		ld a,d 	; set bits 8-13
      98.  00:41D4  E6 3F               		and 0x3F
      99.  00:41D6  D3 99               		out (0x99),a
     100.  00:41D8  C9                  		ret
     101.  00:41D9                      
     102.  00:41D9                      ;Display page E in screen 5
     103.  00:41D9                      _setpage:
     104.  00:41D9  7B                  	ld a,e
     105.  00:41DA  87 87 87 87 87      [5]	add a,a ;x32
     106.  00:41DF  F6 1F               	or	 00011111B
     107.  00:41E1  F3                  	di
     108.  00:41E2  D3 99               	out (0x99),a
     109.  00:41E4  3E 82               	ld a,2+128
     110.  00:41E6  D3 99               	out (0x99),a
     111.  00:41E8  FB                  	ei            
     112.  00:41E9  C9                  	ret
     113.  00:41EA                      
     114.  00:41EA  (00:005F)           chgmod        equ     0x005f      ;change graphic mode
     115.  00:41EA  (00:000C)           RDSLT         equ     0x000c      ;read address HL in slot A
     116.  00:41EA  (00:0156)           KILBUF        equ     0x0156      ;clear keyboard buffer
     117.  00:41EA                      
     118.  00:41EA                      set_scr:
     119.  00:41EA                      	
     120.  00:41EA                      	// sprites 16x16
     121.  00:41EA  3A E0 F3            	ld		a,(RG1SAV)
     122.  00:41ED  F6 02               	or		00000010B
     123.  00:41EF  32 E0 F3            	ld		(RG1SAV),a
     124.  00:41F2                      
     125.  00:41F2                      	// enable sprites + TP
     126.  00:41F2  3A E7 FF            	ld		a,(RG8SAV)
     127.  00:41F5                      	; or		00100010B
     128.  00:41F5  F6 20               	or		00100000B
     129.  00:41F7  32 E7 FF            	ld		(RG8SAV),a
     130.  00:41FA                      		
     131.  00:41FA                      	// Set @50Hz (only PAL is supported)
     132.  00:41FA  3A 02 CB            	ld	a,(SEL_NTSC)
     133.  00:41FD  A7                  	and 	a
     134.  00:41FE  20 07               	jr		nz,1f
     135.  00:4200                      	
     136.  00:4200  3A E8 FF            	ld		a,(RG9SAV)		
     137.  00:4203  F6 02               	or		00000010B		; PAL
     138.  00:4205  18 05               	jr	2f
     139.  00:4207                      1:		
     140.  00:4207  3A E8 FF            	ld		a,(RG9SAV)		
     141.  00:420A  E6 FD               	and		11111101B		; NTSC 
     142.  00:420C  32 E8 FF            2:	ld		(RG9SAV),a
     143.  00:420F                      
     144.  00:420F  3E 08               	ld  	a,8
     145.  00:4211  CD 5F 00            	call	chgmod
     146.  00:4214                      
     147.  00:4214  3A E8 FF            	ld		a,(RG9SAV)		
     148.  00:4217  E6 7F               	and		01111111B		; 192 lines	
     149.  00:4219  32 E8 FF            	ld		(RG9SAV),a
     150.  00:421C  D3 99               	out		(0x99),a
     151.  00:421E  3E 89               	ld		a,9+128
     152.  00:4220  D3 99               	out		(0x99),a
     153.  00:4222                      	
     154.  00:4222                      	// border color
     155.  00:4222  AF                  	xor		a
     156.  00:4223  32 E6 F3            	ld		(RG7SAV),a
     157.  00:4226  D3 99               	out		(0x99),a
     158.  00:4228  3E 87               	ld		a,7+128
     159.  00:422A  D3 99               	out		(0x99),a
     160.  00:422C  C9                  	ret
     161.  00:422D                      
     162.  00:422D                      
     163.  00:422D                      _waitvdp:
     164.  00:422D  3E 02               	ld a,2
     165.  00:422F  D3 99               	out (0x99),a
     166.  00:4231  3E 8F               	ld a, 128+15
     167.  00:4233  D3 99               	out (0x99),a
     168.  00:4235  DB 99               1:  in	a,(0x99)
     169.  00:4237  0F                  	rrca
     170.  00:4238  DA 35 42            	jp c,1b
     171.  00:423B                      
     172.  00:423B  C9                  	ret
     173.  00:423C                      
     174.  00:423C                      ; .inf:
     175.  00:423C                      	; ld	a,r			; random colour
     176.  00:423C                      	; out		(0x99),a
     177.  00:423C                      	; ld		a,7+128
     178.  00:423C                      	; out		(0x99),a
     179.  00:423C                      	; jp	1b
     180.  00:423C                      	
      39   00:423C                      		include isr.asm
       1.  00:423C                      
       2.  00:423C                      
       3.  00:423C                      _fake_isr
       4.  00:423C  F5                  		push	af
       5.  00:423D                      		
       6.  00:423D                      		; ld	a,(noscroll)
       7.  00:423D                      		; or	a
       8.  00:423D                      		; jr	z,1f
       9.  00:423D                      		
      10.  00:423D  E5                  		push   hl         
      11.  00:423E  D5                  		push   de         
      12.  00:423F  C5                  		push   bc         
      13.  00:4240  D9                  		exx               
      14.  00:4241  08                  		ex     af,af'     
      15.  00:4242  E5                  		push   hl         
      16.  00:4243  D5                  		push   de         
      17.  00:4244  C5                  		push   bc         
      18.  00:4245  F5                  		push   af         
      19.  00:4246  FD E5               		push   iy         
      20.  00:4248  DD E5               		push   ix         
      21.  00:424A                      
      22.  00:424A  3E E0               		ld		a,11100000B
      23.  00:424C  D3 99               		out		(0x99),a
      24.  00:424E  3E 87               		ld		a,7+128
      25.  00:4250  D3 99               		out		(0x99),a
      26.  00:4252                      
      27.  00:4252  2A 04 CB            		ld	hl,(_xmappos)
      28.  00:4255  3E 0F               		ld	a,15
      29.  00:4257  A5                  		and	l
      30.  00:4258  32 09 CB            		ld	(_xoffset),a
      31.  00:425B                      		
      32.  00:425B                      		repeat 4
      33.  00:425B                    < 		srl	h
      34.  00:425B                    < 		rr	l
      35.  00:425B                    < 		endrepeat
      35.  00:425B  CB 3C CB 1D CB 3C CB 1D CB 3C CB 1D CB 3C CB 1D 
      36.  00:426B                      		
      37.  00:426B  11 10 C0            		ld	de,_levelmap+16
      38.  00:426E  19                  		add	hl,de
      39.  00:426F                      		
      40.  00:426F  22 06 CB            		ld		(_levelmap_pos),hl
      41.  00:4272                      		
      42.  00:4272  CD BB 42            		call	hfsm
      43.  00:4275  CD AD 42            		call	xfsm
      44.  00:4278  CD 3C 43            		call	_brdrs
      45.  00:427B                      		
      46.  00:427B                      		; call _waitvdp				; no need ATM
      47.  00:427B                      		
      48.  00:427B  2A 04 CB            		ld	hl,(_xmappos)
      49.  00:427E  23                  		inc	hl
      50.  00:427F  3E 0F               		ld	a,15
      51.  00:4281  A4                  		and	h
      52.  00:4282  67                  		ld	h,a
      53.  00:4283  22 04 CB            		ld	(_xmappos),hl
      54.  00:4286                      
      55.  00:4286  2A 9E FC            		ld	hl,(_jiffy)
      56.  00:4289  23                  		inc	hl
      57.  00:428A  22 9E FC            		ld	(_jiffy),hl
      58.  00:428D                      		
      59.  00:428D                      		
      60.  00:428D  AF                  		xor		a
      61.  00:428E  D3 99               		out		(0x99),a
      62.  00:4290  3E 87               		ld		a,7+128
      63.  00:4292  D3 99               		out		(0x99),a
      64.  00:4294                      		
      65.  00:4294  DD E1               		pop    ix         
      66.  00:4296  FD E1               		pop    iy         
      67.  00:4298  F1                  		pop    af         
      68.  00:4299  C1                  		pop    bc         
      69.  00:429A  D1                  		pop    de         
      70.  00:429B  E1                  		pop    hl         
      71.  00:429C  08                  		ex     af,af'     
      72.  00:429D  D9                  		exx               
      73.  00:429E  C1                  		pop    bc         
      74.  00:429F  D1                  		pop    de         
      75.  00:42A0  E1                  		pop    hl         
      76.  00:42A1                      
      77.  00:42A1                      1:		
      78.  00:42A1  AF                  		xor	a 			; read S#0
      79.  00:42A2  D3 99               		out (0x99),a
      80.  00:42A4  3E 8F               		ld a,128+15
      81.  00:42A6  D3 99               		out (0x99),a
      82.  00:42A8  DB 99               		in	a,(0x99)
      83.  00:42AA  F1                  		pop	af
      84.  00:42AB  FB                  		ei
      85.  00:42AC  C9                  		ret
      86.  00:42AD                      
      87.  00:42AD                      
      88.  00:42AD                      ; _isrinit:
      89.  00:42AD                      		; di
      90.  00:42AD                      		; ld	hl,0x0038
      91.  00:42AD                      		; ld	(hl),0xC3
      92.  00:42AD                      		; inc	hl
      93.  00:42AD                      		; ld	(hl),low _scroll
      94.  00:42AD                      		; inc	hl
      95.  00:42AD                      		; ld	(hl),high _scroll
      96.  00:42AD                      
      97.  00:42AD                      ; ; set interrupt line
      98.  00:42AD                      		; LD    A,YSIZE-1
      99.  00:42AD                      		; out (0x99),a
     100.  00:42AD                      		; LD    A,19+128
     101.  00:42AD                      		; out (0x99),a
     102.  00:42AD                      	
     103.  00:42AD                      ; ; enable line interrupt
     104.  00:42AD                      		; LD    A,(RG0SAV)
     105.  00:42AD                      		; OR    00010000B
     106.  00:42AD                      		; LD    (RG0SAV),A
     107.  00:42AD                      		; out (0x99),a
     108.  00:42AD                      		; LD    A,0+128
     109.  00:42AD                      		; out (0x99),a
     110.  00:42AD                      		; ei
     111.  00:42AD                      		; ret
     112.  00:42AD                      	
     113.  00:42AD                      ; _intreset:
     114.  00:42AD                      		; di
     115.  00:42AD                      		; ld	hl,0x0038
     116.  00:42AD                      		; ld	(hl),0xC3
     117.  00:42AD                      		; inc	hl
     118.  00:42AD                      		; ld	(hl),low _fake_isr
     119.  00:42AD                      		; inc	hl
     120.  00:42AD                      		; ld	(hl),high _fake_isr
     121.  00:42AD                      
     122.  00:42AD                      ; ; disable line interrupt		
     123.  00:42AD                      		; LD    A,(RG0SAV)
     124.  00:42AD                      		; and    11101111B
     125.  00:42AD                      		; LD    (RG0SAV),A
     126.  00:42AD                      		; out (0x99),a
     127.  00:42AD                      		; LD    A,0+128
     128.  00:42AD                      		; out (0x99),a
     129.  00:42AD                      		; ei
     130.  00:42AD                      		; ret
     131.  00:42AD                      	
     132.  00:42AD                      ; ;;;;;;;;;;;;;;;;;;;;;;
     133.  00:42AD                      ; ; actual ISR handler
     134.  00:42AD                      ; ;;;;;;;;;;;;;;;;;;;;;;
     135.  00:42AD                      
     136.  00:42AD                      ; _scroll:
     137.  00:42AD                      		; push	af
     138.  00:42AD                      		
     139.  00:42AD                      		; ld a,1 			; read S#1
     140.  00:42AD                      		; out (0x99),a
     141.  00:42AD                      		; ld a,128+15
     142.  00:42AD                      		; out (0x99),a
     143.  00:42AD                      		 
     144.  00:42AD                      		; in	a,(0x99)
     145.  00:42AD                      		; rra
     146.  00:42AD                      		; jp	c,lint	
     147.  00:42AD                      
     148.  00:42AD                      		; xor	a 			; read S#0
     149.  00:42AD                      		; out (0x99),a
     150.  00:42AD                      		; ld a,128+15
     151.  00:42AD                      		; out (0x99),a
     152.  00:42AD                      		 
     153.  00:42AD                      		; in	a,(0x99)
     154.  00:42AD                      		; rlca
     155.  00:42AD                      		; jp	c,vblank
     156.  00:42AD                      		
     157.  00:42AD                      		; pop	af			; none of them (?)
     158.  00:42AD                      		; ei
     159.  00:42AD                      		; ret
     160.  00:42AD                      	
     161.  00:42AD                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
     162.  00:42AD                      ; ; manage score bar at YSIZE
     163.  00:42AD                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
     164.  00:42AD                      ; waitHBLANK
     165.  00:42AD                      		; ld a,2 				; read S#2
     166.  00:42AD                      		; out (0x99),a
     167.  00:42AD                      		; ld a,128+15
     168.  00:42AD                      		; out (0x99),a		; poll for HBLANK
     169.  00:42AD                      		 
     170.  00:42AD                      ; ; 1:	in	a,(0x99)		; we are in HBLANK already, so wait until end of HBLANK
     171.  00:42AD                      ; ; 		and	0x20
     172.  00:42AD                      ; ; 		jp	nz,1b			
     173.  00:42AD                      
     174.  00:42AD                      ; 2:		in	a,(0x99)		; wait until end of the active area
     175.  00:42AD                      		; and	0x20
     176.  00:42AD                      		; jp	z,2b
     177.  00:42AD                      		; ret
     178.  00:42AD                      	
     179.  00:42AD                      ; lint:	
     180.  00:42AD                      		; ; call	waitHBLANK
     181.  00:42AD                      		; ; now we are at the start of HBLANK
     182.  00:42AD                      	
     183.  00:42AD                      		; ; ld	a,(RG1SAV)
     184.  00:42AD                      		; ; and	010111111B			; disable screen
     185.  00:42AD                      		; ; ld	(RG1SAV),a
     186.  00:42AD                      		; ; out	(0x99),a
     187.  00:42AD                      		; ; ld	a,1+128
     188.  00:42AD                      		; ; out	(0x99),a
     189.  00:42AD                      
     190.  00:42AD                      
     191.  00:42AD                      		; ld a,00011111B		; 0XX11111B
     192.  00:42AD                      		; out (0x99),a
     193.  00:42AD                      		; ld a,2+128			; R#2 
     194.  00:42AD                      		; out (0x99),a		; score bar in page 0
     195.  00:42AD                      
     196.  00:42AD                      		; LD    A,mapHeight*16-(YSIZE-2)	; SCROLL DOWN
     197.  00:42AD                      		; out (0x99),a
     198.  00:42AD                      		; LD    A,23+128
     199.  00:42AD                      		; out (0x99),a
     200.  00:42AD                      
     201.  00:42AD                      		; xor		a
     202.  00:42AD                      		; out	(099h),a
     203.  00:42AD                      		; ld	a,18+128
     204.  00:42AD                      		; out	(099h),a		; set adjust 0,0
     205.  00:42AD                      
     206.  00:42AD                      
     207.  00:42AD                      		; ld	a,(RG8SAV)
     208.  00:42AD                      		; or	000000010B		; disable sprites
     209.  00:42AD                      		; ld	(RG8SAV),a
     210.  00:42AD                      		; out	(0x99),a
     211.  00:42AD                      		; ld	a,8+128
     212.  00:42AD                      		; out	(0x99),a
     213.  00:42AD                      
     214.  00:42AD                      		; ; call	waitHBLANK
     215.  00:42AD                      		
     216.  00:42AD                      		; ; ld	a,(RG1SAV)
     217.  00:42AD                      		; ; or 	01000010B		; enable screen
     218.  00:42AD                      		; ; ld	(RG1SAV),a
     219.  00:42AD                      		; ; out	(0x99),a
     220.  00:42AD                      		; ; ld	a,1+128
     221.  00:42AD                      		; ; out	(0x99),a
     222.  00:42AD                      	
     223.  00:42AD                      		; push   hl         
     224.  00:42AD                      		; push   de         
     225.  00:42AD                      		; push   bc         
     226.  00:42AD                      		; exx               
     227.  00:42AD                      		; ex     af,af'     
     228.  00:42AD                      		; push   hl         
     229.  00:42AD                      		; push   de         
     230.  00:42AD                      		; push   bc         
     231.  00:42AD                      		; push   af         
     232.  00:42AD                      		; push   iy         
     233.  00:42AD                      		; push   ix         
     234.  00:42AD                      
     235.  00:42AD                      		
     236.  00:42AD                      		; ld	hl,.exit
     237.  00:42AD                      		; push	hl
     238.  00:42AD                      		; ld		a,(dxmap)
     239.  00:42AD                      		; rlc a
     240.  00:42AD                      
     241.  00:42AD                      		; jp	nc,_blank_line_lft		; >0 == dx
     242.  00:42AD                      		; jp	 c,_blank_line_rgt		; <0 == sx
     243.  00:42AD                      ; 1:		pop	hl
     244.  00:42AD                      ; .exit:
     245.  00:42AD                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     246.  00:42AD                      		; ; ld		a,00001000B
     247.  00:42AD                      		; ; out		(0x99),a
     248.  00:42AD                      		; ; ld		a,7+128
     249.  00:42AD                      		; ; out		(0x99),a
     250.  00:42AD                      		
     251.  00:42AD                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     252.  00:42AD                      		; call	test_star
     253.  00:42AD                      
     254.  00:42AD                      		; xor		a
     255.  00:42AD                      		; out		(0x99),a
     256.  00:42AD                      		; ld		a,7+128
     257.  00:42AD                      		; out		(0x99),a
     258.  00:42AD                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     259.  00:42AD                      		
     260.  00:42AD                      		; pop    ix         
     261.  00:42AD                      		; pop    iy         
     262.  00:42AD                      		; pop    af         
     263.  00:42AD                      		; pop    bc         
     264.  00:42AD                      		; pop    de         
     265.  00:42AD                      		; pop    hl         
     266.  00:42AD                      		; ex     af,af'     
     267.  00:42AD                      		; exx               
     268.  00:42AD                      		; pop    bc         
     269.  00:42AD                      		; pop    de         
     270.  00:42AD                      		; pop    hl         
     271.  00:42AD                      
     272.  00:42AD                      		; pop		af
     273.  00:42AD                      		; ei
     274.  00:42AD                      		; ret
     275.  00:42AD                      
     276.  00:42AD                      ; ;-------------------------------------		
     277.  00:42AD                      
     278.  00:42AD                      ; border_color	equ 	0;	00100101B
     279.  00:42AD                      		
     280.  00:42AD                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
     281.  00:42AD                      ; ;   manage normal vblank routine
     282.  00:42AD                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
     283.  00:42AD                      
     284.  00:42AD                      ; vblank:
     285.  00:42AD                      		; call	activate_window	
     286.  00:42AD                      
     287.  00:42AD                      		; push   hl         
     288.  00:42AD                      		; push   de         
     289.  00:42AD                      		; push   bc         
     290.  00:42AD                      		; exx               
     291.  00:42AD                      		; ex     af,af'     
     292.  00:42AD                      		; push   hl         
     293.  00:42AD                      		; push   de         
     294.  00:42AD                      		; push   bc         
     295.  00:42AD                      		; push   af         
     296.  00:42AD                      		; push   iy         
     297.  00:42AD                      		; push   ix         
     298.  00:42AD                      
     299.  00:42AD                      		; ; ld	a,00011100B		; red
     300.  00:42AD                      		; ; out		(0x99),a
     301.  00:42AD                      		; ; ld		a,7+128
     302.  00:42AD                      		; ; out		(0x99),a
     303.  00:42AD                      
     304.  00:42AD                      		; call	changedir
     305.  00:42AD                      				
     306.  00:42AD                      		; ld	hl,(_jiffy)
     307.  00:42AD                      		; inc	hl
     308.  00:42AD                      		; ld	(_jiffy),hl
     309.  00:42AD                      				
     310.  00:42AD                      		; ; ld	a,00011100B		; red
     311.  00:42AD                      		; ; out	(0x99),a
     312.  00:42AD                      		; ; ld	a,7+128
     313.  00:42AD                      		; ; out	(0x99),a
     314.  00:42AD                      		
     315.  00:42AD                      
     316.  00:42AD                      		; ; xor		a		; black
     317.  00:42AD                      		; ; out	(0x99),a
     318.  00:42AD                      		; ; ld	a,7+128
     319.  00:42AD                      		; ; out	(0x99),a
     320.  00:42AD                      	
     321.  00:42AD                      		; pop    ix         
     322.  00:42AD                      		; pop    iy         
     323.  00:42AD                      		; pop    af         
     324.  00:42AD                      		; pop    bc         
     325.  00:42AD                      		; pop    de         
     326.  00:42AD                      		; pop    hl         
     327.  00:42AD                      		; ex     af,af'     
     328.  00:42AD                      		; exx               
     329.  00:42AD                      		; pop    bc         
     330.  00:42AD                      		; pop    de         
     331.  00:42AD                      		; pop    hl         
     332.  00:42AD                      
     333.  00:42AD                      		; pop		af
     334.  00:42AD                      		; ei
     335.  00:42AD                      		; ret
     336.  00:42AD                      ; ;-------------------------------------
     337.  00:42AD                      ; ;-------------------------------------
     338.  00:42AD                      
     339.  00:42AD                      ; _blank_line_lft:
     340.  00:42AD                      		; ; ld	a,00000111B		; blue
     341.  00:42AD                      		; ; out	(0x99),a
     342.  00:42AD                      		; ; ld	a,7+128
     343.  00:42AD                      		; ; out	(0x99),a
     344.  00:42AD                      
     345.  00:42AD                      		; ld	e,0
     346.  00:42AD                      		; call	blank_line
     347.  00:42AD                      
     348.  00:42AD                      		
     349.  00:42AD                      		
     350.  00:42AD                      		; ; xor	a
     351.  00:42AD                      		; ; out	(0x99),a
     352.  00:42AD                      		; ; ld	a,7+128
     353.  00:42AD                      		; ; out	(0x99),a
     354.  00:42AD                      		; ret
     355.  00:42AD                      
     356.  00:42AD                      ; ;-------------------------------------	
     357.  00:42AD                      
     358.  00:42AD                      ; _blank_line_rgt
     359.  00:42AD                      		; ; ld	a,00000111B		; blue
     360.  00:42AD                      		; ; out	(0x99),a
     361.  00:42AD                      		; ; ld	a,7+128
     362.  00:42AD                      		; ; out	(0x99),a
     363.  00:42AD                      
     364.  00:42AD                      		; ld	e,240
     365.  00:42AD                      		; call	blank_line
     366.  00:42AD                      
     367.  00:42AD                      		; ; xor	a
     368.  00:42AD                      		; ; out	(0x99),a
     369.  00:42AD                      		; ; ld	a,7+128
     370.  00:42AD                      		; ; out	(0x99),a
     371.  00:42AD                      		; ret
     372.  00:42AD                      		
     373.  00:42AD                      ; ;-------------------------------------	
     374.  00:42AD                      		
     375.  00:42AD                      ; inc_xoffset
     376.  00:42AD                      		; call	plot_line_rgt1
     377.  00:42AD                      		; call	.movex
     378.  00:42AD                      		; call	plot_line_rgt2
     379.  00:42AD                      				
     380.  00:42AD                      		; ; ld	a,00000010B		; blue
     381.  00:42AD                      		; ; out	(0x99),a
     382.  00:42AD                      		; ; ld	a,7+128
     383.  00:42AD                      		; ; out	(0x99),a
     384.  00:42AD                      		
     385.  00:42AD                      		; jp		newxmap
     386.  00:42AD                      		
     387.  00:42AD                      ; .movex
     388.  00:42AD                      		; ld		a,(_xoffset)
     389.  00:42AD                      		; and		a
     390.  00:42AD                      		; jr		nz,.case1_15
     391.  00:42AD                      ; .case0
     392.  00:42AD                      		; ld 		a,(_displaypage)
     393.  00:42AD                      		; xor		1
     394.  00:42AD                      		; ld 		d,a
     395.  00:42AD                      		; ld		e,240
     396.  00:42AD                      		; jp		clrboder
     397.  00:42AD                      		
     398.  00:42AD                      ; .case1_15
     399.  00:42AD                      ; [4]		add		a,a
     400.  00:42AD                      		; ld		e,a
     401.  00:42AD                      		; sub		a,16
     402.  00:42AD                      		; ld		d,a
     403.  00:42AD                      		; jp		move_block
     404.  00:42AD                      
     405.  00:42AD                      
     406.  00:42AD                      ; ;-------------------------------------	
     407.  00:42AD                      	
     408.  00:42AD                      ; dec_xoffset
     409.  00:42AD                      		; call	plot_line_lft1
     410.  00:42AD                      		; call	.movex
     411.  00:42AD                      		; call	plot_line_lft2
     412.  00:42AD                      				
     413.  00:42AD                      		; ; ld	a,00000011B		; blue
     414.  00:42AD                      		; ; out	(0x99),a
     415.  00:42AD                      		; ; ld	a,7+128
     416.  00:42AD                      		; ; out	(0x99),a
     417.  00:42AD                      
     418.  00:42AD                      		; jp		newxmap
     419.  00:42AD                      		
     420.  00:42AD                      ; .movex
     421.  00:42AD                      		; ld		a,(_xoffset)
     422.  00:42AD                      		; cp	15
     423.  00:42AD                      		; jr		nz,.case0_14
     424.  00:42AD                      ; .case15
     425.  00:42AD                      		; ld 		a,(_displaypage)
     426.  00:42AD                      		; xor		1
     427.  00:42AD                      		; ld 		d,a
     428.  00:42AD                      		; ld		e,0
     429.  00:42AD                      		; jp		clrboder
     430.  00:42AD                      		
     431.  00:42AD                      ; .case0_14
     432.  00:42AD                      ; [4]		add		a,a
     433.  00:42AD                      		; ld		e,a
     434.  00:42AD                      		; add		a,16
     435.  00:42AD                      		; ld		d,a
     436.  00:42AD                      		; jp		move_block
     437.  00:42AD                      
     438.  00:42AD                      
     439.  00:42AD                      ; ;-------------------------------------
     440.  00:42AD                      ; newxmap
     441.  00:42AD                      		; call 	plot_enemy		
     442.  00:42AD                      		; call	color_enemy
     443.  00:42AD                      
     444.  00:42AD                      		; ld		hl,(_xmapx4)
     445.  00:42AD                      		; ld		a,(dxmap)
     446.  00:42AD                      		; ld		e,a
     447.  00:42AD                      		; add 	a,a
     448.  00:42AD                      		; sbc 	a,a
     449.  00:42AD                      		; ld		d,a
     450.  00:42AD                      		; add 	hl,de
     451.  00:42AD                      		; ld		(_xmapx4),hl
     452.  00:42AD                      		; repeat 2
     453.  00:42AD                      		; sra		h
     454.  00:42AD                      		; rr  	l
     455.  00:42AD                      		; endrepeat
     456.  00:42AD                      		; ld		(xmap),hl
     457.  00:42AD                      		; ld 		a,l
     458.  00:42AD                      		; and		15
     459.  00:42AD                      		; ld		(_xoffset),a
     460.  00:42AD                      		; repeat 4
     461.  00:42AD                      		; sra		h
     462.  00:42AD                      		; rr  	l
     463.  00:42AD                      		; endrepeat
     464.  00:42AD                      		; ld 		a,l
     465.  00:42AD                      		; and		1
     466.  00:42AD                      		; ld		(_displaypage),a
     467.  00:42AD                      		; ld		de,_levelmap
     468.  00:42AD                      		; add		hl,de
     469.  00:42AD                      		; ld		(_levelmap_pos),hl
     470.  00:42AD                      		; ret
     471.  00:42AD                      		
     472.  00:42AD                      ; ;-------------------------------------
     473.  00:42AD                      
     474.  00:42AD                      ; activate_window	
     475.  00:42AD                      		; ld	a,(_displaypage)
     476.  00:42AD                      ; [5]		add a,a 			; x32
     477.  00:42AD                      		; or	00011111B
     478.  00:42AD                      		; out (0x99),a
     479.  00:42AD                      		; ld a,2+128
     480.  00:42AD                      		; out (0x99),a
     481.  00:42AD                      		
     482.  00:42AD                      		; LD    A,(_yoffset)		; SCROLL DOWN
     483.  00:42AD                      		; out (0x99),a
     484.  00:42AD                      		; add    A,YSIZE-1
     485.  00:42AD                      		; ld		l,a
     486.  00:42AD                      		; LD    A,23+128
     487.  00:42AD                      		; out (0x99),a
     488.  00:42AD                      
     489.  00:42AD                      		; ld    a,l
     490.  00:42AD                      		; out (0x99),a			; set interrupt line
     491.  00:42AD                      		; LD    A,19+128
     492.  00:42AD                      		; out (0x99),a
     493.  00:42AD                      		
     494.  00:42AD                      		; ld	a,(_xoffset)		; set R#18 only if not scrolling
     495.  00:42AD                      		; add	a,-8
     496.  00:42AD                      		; and	0Fh
     497.  00:42AD                      		; out	(099h),a
     498.  00:42AD                      		; ld	a,18+128
     499.  00:42AD                      		; out	(099h),a
     500.  00:42AD                      
     501.  00:42AD                      		; ld	a,(RG8SAV)		; enable sprites
     502.  00:42AD                      		; and	11111101B
     503.  00:42AD                      		; ld	(RG8SAV),a
     504.  00:42AD                      		; out	(0x99),a
     505.  00:42AD                      		; ld	a,8+128
     506.  00:42AD                      		; out	(0x99),a
     507.  00:42AD                      
     508.  00:42AD                      		; ret
     509.  00:42AD                      			
     510.  00:42AD                      ; ;-------------------------------------
     511.  00:42AD                      	
     512.  00:42AD                      ; changedir:
     513.  00:42AD                      		; ld		a,(_dxmap)
     514.  00:42AD                      		; and		128
     515.  00:42AD                      		; ld		b,a
     516.  00:42AD                      		; inc		hl
     517.  00:42AD                      		; ld		a,(dxmap)		; dxmap
     518.  00:42AD                      		; ld		c,a
     519.  00:42AD                      		; and		128
     520.  00:42AD                      		; xor		b				; compare signs
     521.  00:42AD                      		; jp		z,nodirchange
     522.  00:42AD                      		; ld		(_dxchng),a		; a<>0
     523.  00:42AD                      		; bit		7,c
     524.  00:42AD                      		; jr		z,.right
     525.  00:42AD                      ; .left
     526.  00:42AD                      		; call	plot_line_lft1
     527.  00:42AD                      		; ld 		a,(_displaypage)
     528.  00:42AD                      		; xor		1
     529.  00:42AD                      		; ld 		d,a
     530.  00:42AD                      		; ld		e,0
     531.  00:42AD                      		; call	clrboder
     532.  00:42AD                      		; call	plot_line_lft2
     533.  00:42AD                      		; jp		newxmap
     534.  00:42AD                      
     535.  00:42AD                      ; .right
     536.  00:42AD                      		; call	plot_line_rgt1
     537.  00:42AD                      		; ld 		a,(_displaypage)
     538.  00:42AD                      		; xor		1
     539.  00:42AD                      		; ld 		d,a
     540.  00:42AD                      		; ld		e,240
     541.  00:42AD                      		; call	clrboder
     542.  00:42AD                      		; call	plot_line_rgt2
     543.  00:42AD                      		; jp		newxmap
     544.  00:42AD                      
     545.  00:42AD                      ; nodirchange:
     546.  00:42AD                      		; ld		a,(_dxchng)
     547.  00:42AD                      		; and		a
     548.  00:42AD                      		; jr		nz,1f
     549.  00:42AD                      		; bit		7,c
     550.  00:42AD                      		; jp		z,inc_xoffset
     551.  00:42AD                      		; jp		dec_xoffset
     552.  00:42AD                      	
     553.  00:42AD                      ; 1:		xor	a
     554.  00:42AD                      		; ld		(_dxchng),a
     555.  00:42AD                      		; bit		7,c
     556.  00:42AD                      		; jp		z,.right
     557.  00:42AD                      ; .left
     558.  00:42AD                      		; call	plot_line_lft1
     559.  00:42AD                      		; ld		e,240-16
     560.  00:42AD                      		; ld		d,240
     561.  00:42AD                      		; call	move_block
     562.  00:42AD                      		; call	plot_line_lft2
     563.  00:42AD                      		; jp		newxmap
     564.  00:42AD                      
     565.  00:42AD                      ; .right
     566.  00:42AD                      		; call	plot_line_rgt1
     567.  00:42AD                      		; ld		e,16
     568.  00:42AD                      		; ld		d,0
     569.  00:42AD                      		; call	move_block
     570.  00:42AD                      		; call	plot_line_rgt2
     571.  00:42AD                      		; jp		newxmap
     572.  00:42AD                      
     573.  00:42AD                      ; ;-------------------------------------
      40   00:42AD                      		include fsmscroll.asm
       1.  00:42AD                      
       2.  00:42AD                      
       3.  00:42AD                      xfsm:
       4.  00:42AD  3A 09 CB            		ld		a,(_xoffset)		; set R#18 only if not scrolling
       5.  00:42B0                      
       6.  00:42B0  C6 F8               		add		a,-8
       7.  00:42B2  E6 0F               		and		0Fh
       8.  00:42B4  D3 99               		out		(099h),a
       9.  00:42B6  3E 92               		ld		a,18+128
      10.  00:42B8  D3 99               		out		(099h),a
      11.  00:42BA                      		
      12.  00:42BA  C9                  		ret
      13.  00:42BB                      
      14.  00:42BB                      hfsm:
      15.  00:42BB  3A 04 CB            		ld		a,(_xmappos)
      16.  00:42BE  E6 10               		and		16
      17.  00:42C0  87                  		add 	a,a 		;x32
      18.  00:42C1  F6 1F               		or		 00011111B
      19.  00:42C3  D3 99               		out 	(0x99),a
      20.  00:42C5  3E 82               		ld 		a,2+128
      21.  00:42C7  D3 99               		out 	(0x99),a
      22.  00:42C9  3A 04 CB            		ld		a,(_xmappos)
      23.  00:42CC  E6 10               		and		16
      24.  00:42CE  28 02               		jr		z,1f
      25.  00:42D0  3E 01               		ld		a,1
      26.  00:42D2  32 08 CB            1:		ld		(_displaypage),a		
      27.  00:42D5  C9                  		ret
      28.  00:42D6                      		
      41   00:42D6                      		include vdpcmds.asm
       1.  00:42D6                      
       2.  00:42D6                      
       3.  00:42D6                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       4.  00:42D6                      ; input
       5.  00:42D6                      ; b = sx	from not _displaypage
       6.  00:42D6                      ; d = dx	to _displaypage
       7.  00:42D6                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       8.  00:42D6                      
       9.  00:42D6                      move_slice:
      10.  00:42D6  3E 20               		ld 		a, 32
      11.  00:42D8  D3 99               		out 	(0x99),a
      12.  00:42DA  3E 91               		ld 		a, 17+128
      13.  00:42DC  D3 99               		out 	(0x99),a
      14.  00:42DE                      
      15.  00:42DE  0E 9B               		ld 		c, 0x9B
      16.  00:42E0                      		
      17.  00:42E0                      		; call _waitvdp				; no need ATM
      18.  00:42E0                      		
      19.  00:42E0  ED 41               		out		(c), b 				; sx
      20.  00:42E2  AF                  		xor a
      21.  00:42E3  D3 9B               		out		(0x9B), a 			; sx (high)
      22.  00:42E5                      		
      23.  00:42E5  D3 9B               		out		(0x9B), a 			; sy
      24.  00:42E7  3A 08 CB            		ld 		a,(_displaypage)	; source page
      25.  00:42EA  D3 9B               		out 	(0x9B), a 			; sy 	(high-> page 0 or 1)
      26.  00:42EC                      
      27.  00:42EC  ED 51               		out 	(c), d 				; dx
      28.  00:42EE  AF                  		xor a
      29.  00:42EF  D3 9B               		out 	(0x9B), a			; dx (high)
      30.  00:42F1                      		
      31.  00:42F1  D3 9B               		out 	(0x9B), a 			; dy
      32.  00:42F3  3A 08 CB            		ld 		a,(_displaypage)	; destination page
      33.  00:42F6  EE 01               		xor	1				
      34.  00:42F8  D3 9B               		out 	(0x9B), a			; dy 	(high-> page 0 or 1)
      35.  00:42FA                      
      36.  00:42FA  3E 10               		ld 		a,16 				; block size
      37.  00:42FC  D3 9B               		out 	(0x9B), a
      38.  00:42FE  AF                  		xor a
      39.  00:42FF  D3 9B               		out 	(0x9B), a	
      40.  00:4301  3E A0               		ld		a,10*16				; mapHeight*16
      41.  00:4303  D3 9B               		out 	(0x9B), a			; y block size
      42.  00:4305  AF                  		xor		a
      43.  00:4306  D3 9B               		out 	(0x9B), a
      44.  00:4308  D3 9B               		out 	(0x9B), a
      45.  00:430A  D3 9B               		out 	(0x9B), a
      46.  00:430C                      
      47.  00:430C  3E D0               		ld		a,11010000B
      48.  00:430E  D3 9B               		out 	(0x9B), a			; command HMMM
      49.  00:4310  C9                  		ret
      50.  00:4311                      		
      51.  00:4311                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      52.  00:4311                      ; input
      53.  00:4311                      ; d = page
      54.  00:4311                      ; e = dx
      55.  00:4311                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      56.  00:4311                      		
      57.  00:4311                      clear_slice:
      58.  00:4311  3E 24               		ld 		a, 36
      59.  00:4313  D3 99               		out 	(0x99),a
      60.  00:4315  3E 91               		ld 		a, 17+128
      61.  00:4317  D3 99               		out 	(0x99),a
      62.  00:4319                      		
      63.  00:4319                      		; call _waitvdp
      64.  00:4319                      		
      65.  00:4319  7B                  		ld		a,e
      66.  00:431A  D3 9B               		out 	(0x9B), a 			; dx
      67.  00:431C  AF                  		xor		a
      68.  00:431D  D3 9B               		out 	(0x9B), a			; dx (high)
      69.  00:431F                      		
      70.  00:431F  D3 9B               		out 	(0x9B), a			; dy
      71.  00:4321  7A                  		ld 		a,d					; destination page
      72.  00:4322  D3 9B               		out 	(0x9B), a			; dy (high-> page 0 or 1)
      73.  00:4324                      		
      74.  00:4324  3E 10               		ld 		a,16
      75.  00:4326  D3 9B               		out 	(0x9B), a			; x block size
      76.  00:4328  AF                  		xor	a
      77.  00:4329  D3 9B               		out 	(0x9B), a
      78.  00:432B                      
      79.  00:432B  3E A0               		ld		a,10*16				; mapHeight*16
      80.  00:432D  D3 9B               		out 	(0x9B), a			; y block size
      81.  00:432F  AF                  		xor a
      82.  00:4330  D3 9B               		out 	(0x9B), a
      83.  00:4332                      
      84.  00:4332  AF                  		xor		a
      85.  00:4333  D3 9B               		out 	(0x9B), a			; border_color
      86.  00:4335  D3 9B               		out 	(0x9B), a
      87.  00:4337                      
      88.  00:4337  3E C0               		ld		a,11000000B
      89.  00:4339  D3 9B               		out 	(0x9B), a			; command HMMV
      90.  00:433B  C9                  		ret
      42   00:433C                      		include brdrs.asm
       1.  00:433C                      
       2.  00:433C                      _brdrs:
       3.  00:433C  3A 09 CB            		ld		a,(_xoffset)
       4.  00:433F  DD 6F               		ld		ixl,a
       5.  00:4341  C6 F0               		add		a,240
       6.  00:4343  5F                  		ld		e,a
       7.  00:4344                      
       8.  00:4344  0E 98               		ld	c,0x98
       9.  00:4346                      				
      10.  00:4346  3A 08 CB            		ld	a,(_displaypage)
      11.  00:4349  87 87               [2] 	add a,a
      12.  00:434B  D3 99               		out (0x99),a 	; set bits 14-16
      13.  00:434D  3E 8E               		ld a,14+128
      14.  00:434F  D3 99               		out (0x99),a
      15.  00:4351                      
      16.  00:4351  16 40               		ld	d,0x40		; write access
      17.  00:4353  CD 9A 43            		call	plot_col64
      18.  00:4356                      
      19.  00:4356  3A 09 CB            		ld		a,(_xoffset)
      20.  00:4359  A7                  		and		a
      21.  00:435A  20 2E               		jr		nz,.x1_15
      22.  00:435C                      .x0:		
      23.  00:435C  3A 08 CB            		ld		a,(_displaypage)
      24.  00:435F  EE 01               		xor		1
      25.  00:4361  57                  		ld		d,a
      26.  00:4362  CD 11 43            		call 	clear_slice
      27.  00:4365                      
      28.  00:4365                      .cont		
      29.  00:4365  3A 08 CB            		ld	a,(_displaypage)
      30.  00:4368  87 87               [2] 	add a,a
      31.  00:436A  F6 01               		or	1
      32.  00:436C  D3 99               		out (0x99),a 	; set bits 14-16
      33.  00:436E  3E 8E               		ld a,14+128
      34.  00:4370  D3 99               		out (0x99),a
      35.  00:4372                      
      36.  00:4372  16 40               		ld	d,0x40		; write access	
      37.  00:4374  CD 9A 43            		call	plot_col64
      38.  00:4377                      		
      39.  00:4377  3A 08 CB            		ld	a,(_displaypage)
      40.  00:437A  87 87               [2] 	add a,a
      41.  00:437C  F6 02               		or	2
      42.  00:437E  D3 99               		out (0x99),a 	; set bits 14-16
      43.  00:4380  3E 8E               		ld a,14+128
      44.  00:4382  D3 99               		out (0x99),a
      45.  00:4384                      
      46.  00:4384  16 40               		ld	d,0x40		; write access	
      47.  00:4386  CD A6 43            		call	plot_col32
      48.  00:4389                      				
      49.  00:4389  C9                  		ret
      50.  00:438A                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;		
      51.  00:438A                      
      52.  00:438A                      .x1_15:
      53.  00:438A  3D                  		dec		a
      54.  00:438B  87 87 87 87         [4]		add		a,a
      55.  00:438F  57                  		ld		d,a
      56.  00:4390  C6 10               		add		a,16
      57.  00:4392  47                  		ld		b,a
      58.  00:4393  CD D6 42            		call	move_slice
      59.  00:4396  0E 98               		ld		c,0x98
      60.  00:4398  18 CB               		jr		_brdrs.cont
      61.  00:439A                      		
      62.  00:439A                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      63.  00:439A                      		
      64.  00:439A                      plot_col64:
      65.  00:439A                      	; hl -> tile in the map
      66.  00:439A                      		repeat 2
      67.  00:439A                    < 		push	hl
      68.  00:439A                    < 		call	plot_col16
      69.  00:439A                    < 		pop		hl
      70.  00:439A                    < 		inc h			; next line in the map
      71.  00:439A                    < 		; inc l
      72.  00:439A                    < 		endrepeat
      72.  00:439A  E5 CD B3 43 E1 24 E5 CD B3 43 E1 24 
      73.  00:43A6                      plot_col32:		
      74.  00:43A6                      		repeat 2
      75.  00:43A6                    < 		push	hl
      76.  00:43A6                    < 		call	plot_col16
      77.  00:43A6                    < 		pop		hl
      78.  00:43A6                    < 		inc h			; next line in the map
      79.  00:43A6                    < 		; inc l
      80.  00:43A6                    < 		endrepeat
      80.  00:43A6  E5 CD B3 43 E1 24 E5 CD B3 43 E1 24 
      81.  00:43B2  C9                  		ret
      82.  00:43B3                      
      83.  00:43B3                      
      84.  00:43B3                      plot_col16:
      85.  00:43B3  7E                  		ld	a,(hl)
      86.  00:43B4  07 07 07            [3]		rlca
      87.  00:43B7  E6 07               		and	00000111B
      88.  00:43B9  C6 04               		add	a,:_tiles0
      89.  00:43BB  32 00 B0            		ld	(_kBank4),a
      90.  00:43BE  7E                  		ld	a,(hl)
      91.  00:43BF  E6 1F               		and	00011111B
      92.  00:43C1  C6 A0               		add	a,high _tiles0
      93.  00:43C3  67                  		ld	h,a
      94.  00:43C4  3A 09 CB            		ld	a,(_xoffset)
      95.  00:43C7  87 87 87 87         [4]		add	a,a
      96.  00:43CB  6F                  		ld	l,a
      97.  00:43CC                      
      98.  00:43CC                      	; hl -> tile column in the tileset
      99.  00:43CC                      	
     100.  00:43CC                      		repeat 16
     101.  00:43CC                    < 		ld	a,ixl 		;set bits 0-7
     102.  00:43CC                    < 		out (0x99),a
     103.  00:43CC                    < 		ld a,d 			;set bits 8-13
     104.  00:43CC                    < 		out (0x99),a
     105.  00:43CC                    < 		xor	a
     106.  00:43CC                    < 		out	(0x98),a
     107.  00:43CC                    < 		ld a,e 			;set bits 0-7
     108.  00:43CC                    < 		out (0x99),a
     109.  00:43CC                    < 		ld a,d 			;set bits 8-13
     110.  00:43CC                    < 		out (0x99),a
     111.  00:43CC                    < 		inc	d
     112.  00:43CC                    < 		outi			; 18
     113.  00:43CC                    < 		endrepeat
     113.  00:43CC  DD 7D D3 99 7A D3 99 AF D3 98 7B D3 99 7A D3 99 
     113.  00:43DC  14 ED A3 DD 7D D3 99 7A D3 99 AF D3 98 7B D3 99 
     113.  00:43EC  7A D3 99 14 ED A3 DD 7D D3 99 7A D3 99 AF D3 98 
     113.  00:43FC  7B D3 99 7A D3 99 14 ED A3 DD 7D D3 99 7A D3 99 
     113.  00:440C  AF D3 98 7B D3 99 7A D3 99 14 ED A3 DD 7D D3 99 
     113.  00:441C  7A D3 99 AF D3 98 7B D3 99 7A D3 99 14 ED A3 DD 
     113.  00:442C  7D D3 99 7A D3 99 AF D3 98 7B D3 99 7A D3 99 14 
     113.  00:443C  ED A3 DD 7D D3 99 7A D3 99 AF D3 98 7B D3 99 7A 
     113.  00:444C  D3 99 14 ED A3 DD 7D D3 99 7A D3 99 AF D3 98 7B 
     113.  00:445C  D3 99 7A D3 99 14 ED A3 DD 7D D3 99 7A D3 99 AF 
     113.  00:446C  D3 98 7B D3 99 7A D3 99 14 ED A3 DD 7D D3 99 7A 
     113.  00:447C  D3 99 AF D3 98 7B D3 99 7A D3 99 14 ED A3 DD 7D 
     113.  00:448C  D3 99 7A D3 99 AF D3 98 7B D3 99 7A D3 99 14 ED 
     113.  00:449C  A3 DD 7D D3 99 7A D3 99 AF D3 98 7B D3 99 7A D3 
     113.  00:44AC  99 14 ED A3 DD 7D D3 99 7A D3 99 AF D3 98 7B D3 
     113.  00:44BC  99 7A D3 99 14 ED A3 DD 7D D3 99 7A D3 99 AF D3 
     113.  00:44CC  98 7B D3 99 7A D3 99 14 ED A3 DD 7D D3 99 7A D3 
     113.  00:44DC  99 AF D3 98 7B D3 99 7A D3 99 14 ED A3 DD 7D D3 
     113.  00:44EC  99 7A D3 99 AF D3 98 7B D3 99 7A D3 99 14 ED A3 
     114.  00:44FC  C9                  		ret
     115.  00:44FD                      		
      43   00:44FD                      		
      44   00:44FD                      		include checkkbd.asm
       1.  00:44FD                      
       2.  00:44FD                      ; // Line Bit_7 Bit_6 Bit_5 Bit_4 Bit_3 Bit_2 Bit_1 Bit_0
       3.  00:44FD                      ; // 0 "7" "6" "5" "4" "3" "2" "1" "0"
       4.  00:44FD                      ; // 1 ";" "]" "[" "\" "=" "-" "9" "8"
       5.  00:44FD                      ; // 2 "B" "A" ??? "/" "." "," "'" "`"
       6.  00:44FD                      ; // 3 "J" "I" "H" "G" "F" "E" "D" "C"
       7.  00:44FD                      ; // 4 "R" "Q" "P" "O" "N" "M" "L" "K"
       8.  00:44FD                      ; // 5 "Z" "Y" "X" "W" "V" "U" "T" "S"
       9.  00:44FD                      ; // 6 F3 F2 F1 CODE CAP GRAPH CTRL SHIFT
      10.  00:44FD                      ; // 7 RET SEL BS STOP TAB ESC F5 F4
      11.  00:44FD                      ; // 8 RIGHT DOWN UP LEFT DEL INS HOME SPACE
      12.  00:44FD                      
      13.  00:44FD                      checkkbd:
      14.  00:44FD  F3                  		di
      15.  00:44FE  DB AA               		in	a,(0aah)
      16.  00:4500  E6 F0               		and 011110000B			; upper 4 bits contain info to preserve
      17.  00:4502  B3                  		or	e
      18.  00:4503  D3 AA               		out (0aah),a
      19.  00:4505  DB A9               		in	a,(0a9h)
      20.  00:4507  6F                  		ld	l,a
      21.  00:4508  FB                  		ei
      22.  00:4509  C9                  		ret
      45   00:450A                      		
      46   00:450A                      ;-------------------------------------
      47   00:450A                      ; Entry point
      48   00:450A                      ;-------------------------------------
      49   00:450A                      START:
      50   00:450A  AF                  		xor	a
      51   00:450B                      		; dec	a
      52   00:450B  32 02 CB            		ld	(SEL_NTSC),a
      53   00:450E  CD EA 41            		call	set_scr
      54   00:4511  F3                  		di
      55   00:4512                      		
      56   00:4512                      ;-------------------------------------
      57   00:4512                      ;   Power-up routine for 32K ROM
      58   00:4512                      ;   set pages and sub slot
      59   00:4512                      ;-------------------------------------
      60   00:4512  CD 10 40                    call    search_slot
      61   00:4515  CD 2F 40                    call    search_slotram
      62   00:4518  CD 61 40            		call	setrompage2
      63   00:451B  CD 5B 40            		call	setrampage0
      64   00:451E                      
      65   00:451E                      
      66   00:451E  AF                  		xor	a
      67   00:451F  32 00 50            		ld	(_kBank1),a
      68   00:4522  3C                  		inc	a
      69   00:4523  32 00 70            		ld	(_kBank2),a
      70   00:4526  3C                  		inc	a
      71   00:4527  32 00 90            		ld	(_kBank3),a
      72   00:452A                      
      73   00:452A  CD 78 41            		call	_cls
      74   00:452D                      		
      75   00:452D                      		;--- initialise ISR in RAM
      76   00:452D                      		
      77   00:452D  F3                  		di
      78   00:452E  21 38 00            		ld	hl,0x0038
      79   00:4531  36 C3               		ld	(hl),0xC3
      80   00:4533  23                  		inc	hl
      81   00:4534  36 3C               		ld	(hl),low _fake_isr
      82   00:4536  23                  		inc	hl
      83   00:4537  36 42               		ld	(hl),high _fake_isr
      84   00:4539                      
      85   00:4539  CD 6E 45            		call	mapinit
      86   00:453C                      		
      87   00:453C  21 00 00            		ld	hl,0
      88   00:453F  22 9E FC            		ld	(_jiffy),hl		
      89   00:4542  AF                  		xor	a
      90   00:4543  32 08 CB            		ld	(_displaypage),a		
      91   00:4546  32 09 CB            		ld	(_xoffset),a
      92   00:4549                      		
      93   00:4549  FB                  		ei
      94   00:454A  76                  1:		halt
      95   00:454B  3A 09 CB            		ld	a,(_xoffset)		
      96   00:454E  A7                  		and	a
      97   00:454F  C2 4A 45            		jp	nz,1b
      98   00:4552                      		
      99   00:4552  1E 08               		ld	e,8
     100   00:4554  CD FD 44            		call	checkkbd
     101   00:4557  E6 01               		and	1				; space
     102   00:4559  CC 5F 45            		call	z,PAL_ntsc
     103   00:455C  C3 4A 45            		jp	1b
     104   00:455F                      		
     105   00:455F                      PAL_ntsc
     106   00:455F  3A E8 FF            		ld		a,(RG9SAV)		
     107   00:4562  EE 02               		xor		00000010B		; PAL or NTSC 
     108   00:4564  32 E8 FF            		ld		(RG9SAV),a
     109   00:4567  D3 99               		out		(0x99),a
     110   00:4569  3E 89               		ld		a,9+128
     111   00:456B  D3 99               		out		(0x99),a
     112   00:456D  C9                  		ret
     113   00:456E                      
     114   00:456E                      mapinit		
     115   00:456E  3E 0C               		ld	a, :_level
     116   00:4570  32 00 B0            		ld	(_kBank4),a
     117   00:4573  21 00 A0            		ld		hl,_level
     118   00:4576  11 00 C0            		ld		de,_levelmap
     119   00:4579  01 00 0B            		ld		bc,mapWidth*mapHeight
     120   00:457C  ED B0               		ldir
     121   00:457E  21 00 C0            		ld		hl,_levelmap
     122   00:4581  22 06 CB            		ld		(_levelmap_pos),hl
     123   00:4584                      		
     124   00:4584  AF                  		xor		a
     125   00:4585  67                  		ld		h,a
     126   00:4586  6F                  		ld		l,a		
     127   00:4587  32 03 CB            		ld		(_ymappos),a
     128   00:458A  22 04 CB            		ld		(_xmappos),hl
     129   00:458D                      		
     130   00:458D  C9                  		ret
     131   00:458E                      
     132   00:458E                      		
     133   00:458E  (04)                		page 4
     134   04:A000                      _tiles0:
     135   04:A000  (2000)              		incbin "tiles.bin",0x0000,0x2000
     136   04:C000  (05)                		page 5
     137   05:A000  (2000)              		incbin "tiles.bin",0x2000,0x2000
     138   05:C000  (06)                		page 6
     139   06:A000  (2000)              		incbin "tiles.bin",0x4000,0x2000
     140   06:C000  (07)                		page 7
     141   07:A000  (2000)              		incbin "tiles.bin",0x6000,0x2000
     142   07:C000  (08)                		page 8
     143   08:A000  (2000)              		incbin "tiles.bin",0x8000,0x2000
     144   08:C000  (09)                		page 9
     145   09:A000  (2000)              		incbin "tiles.bin",0xA000,0x2000
     146   09:C000  (0A)                		page 10
     147   0A:A000  (1B00)              		incbin "tiles.bin",0xC000;,0x2000
     148   0A:BB00                      		; page 11
     149   0A:BB00                      		; incbin "tiles.bin",0xE000;,0x2000
     150   0A:BB00                      
     151   0A:BB00  (0C)                		page 12		
     152   0C:A000                      _level
     153   0C:A000  (0B00)              		incbin	datamap.bin		
     154   0C:AB00                      
     155   0C:AB00                      		; call	opening
     156   0C:AB00                      		
     157   0C:AB00                      
     158   0C:AB00                      		; call 	_hw_sprite_init
     159   0C:AB00                      
     160   0C:AB00                      		; ld		c,0
     161   0C:AB00                      		; ld		de,256*(mapHeight*16+3)
     162   0C:AB00                      		; call	_vdpsetvramwr
     163   0C:AB00                      
     164   0C:AB00                      		; ld		de, 256*:_scorebar+1
     165   0C:AB00                      		; call	outvram
     166   0C:AB00                      		
     167   0C:AB00                      		; ld		c,1
     168   0C:AB00                      		; ld		de,256*mapHeight*16
     169   0C:AB00                      		; call	_vdpsetvramwr
     170   0C:AB00                      
     171   0C:AB00                      		; ld		de, 256*:_animated+2
     172   0C:AB00                      		; call	outvram
     173   0C:AB00                      
     174   0C:AB00                      	
     175   0C:AB00                      		; ; ld	a,:demo_song
     176   0C:AB00                      		; ; setpage_a
     177   0C:AB00                      		
     178   0C:AB00                      		; ; ld	bc,	end_demo_song-musbuff
     179   0C:AB00                      		; ; ld	hl,	demo_song
     180   0C:AB00                      		; ; ld	de,	musbuff
     181   0C:AB00                      		; ; ldir
     182   0C:AB00                      			
     183   0C:AB00                      		; ; call	replay_init
     184   0C:AB00                      		; ; ld		hl,musbuff
     185   0C:AB00                      		; ; call	replay_loadsong
     186   0C:AB00                      
     187   0C:AB00                      
     188   0C:AB00                      		; ld		e,0
     189   0C:AB00                      		; call	_setpage
     190   0C:AB00                      				
     191   0C:AB00                      		; ld	a, :_level
     192   0C:AB00                      		; ld	(_kBank4),a
     193   0C:AB00                      		
     194   0C:AB00                      		; ld		hl,_level
     195   0C:AB00                      		; ld		de,_levelmap
     196   0C:AB00                      		; ld		bc,mapWidth*mapHeight
     197   0C:AB00                      		; ldir
     198   0C:AB00                      
     199   0C:AB00                      
     200   0C:AB00                      		; ; call	init_page0
     201   0C:AB00                      
     202   0C:AB00                      		; ld		a,0
     203   0C:AB00                      		; ld		(cur_level),a
     204   0C:AB00                      
     205   0C:AB00                      		; ei
     206   0C:AB00                      
     207   0C:AB00                      ; restart:
     208   0C:AB00                      		; call	_intreset
     209   0C:AB00                      
     210   0C:AB00                      		
     211   0C:AB00                      
     212   0C:AB00                      		; ld		a,1
     213   0C:AB00                      		; ld		(_displaypage),a		
     214   0C:AB00                      		; call 	_cls0
     215   0C:AB00                      		; ld		hl,_levelmap
     216   0C:AB00                      		; ld		(_levelmap_pos),hl
     217   0C:AB00                      		
     218   0C:AB00                      		; xor		a
     219   0C:AB00                      		; ld		h,a
     220   0C:AB00                      		; ld		l,a
     221   0C:AB00                      		; ld		(flip_flop),a
     222   0C:AB00                      		; ld		(god_mode),a
     223   0C:AB00                      		; ld		(_ymappos),a
     224   0C:AB00                      		; ld		(_xmappos),hl
     225   0C:AB00                      		
     226   0C:AB00                      		; ld		(_nframes),hl
     227   0C:AB00                      		; ld		(_mcdx),hl
     228   0C:AB00                      		; ld		(_mcframe),a
     229   0C:AB00                      		
     230   0C:AB00                      		; ld		(_yoffset),a		;  0 tutto su
     231   0C:AB00                      		; ld		(_xoffset),a		;  0 tutto su
     232   0C:AB00                      								
     233   0C:AB00                      		; ld		(aniframe),a
     234   0C:AB00                      		; ld		(anispeed),a
     235   0C:AB00                      		; ld		(ms_state),a
     236   0C:AB00                      		; inc 	a
     237   0C:AB00                      		; ld		(old_aniframe),a		; old_aniframe!=aniframe
     238   0C:AB00                      	
     239   0C:AB00                      		; ld		(dxmap),a		; moving right
     240   0C:AB00                      		; ld		(_dxmap),a		; moving right
     241   0C:AB00                      
     242   0C:AB00                      		; ld		(xmap),hl
     243   0C:AB00                      		; ld		(_xmapx4),hl
     244   0C:AB00                      		; ld		bc,xship_rel
     245   0C:AB00                      		; add 	hl,bc
     246   0C:AB00                      		; ld		(xship),hl
     247   0C:AB00                      		; ld		a,80
     248   0C:AB00                      		; ld		(yship),a
     249   0C:AB00                      
     250   0C:AB00                      		; call 	npc_init								
     251   0C:AB00                      		; call 	load_colors
     252   0C:AB00                      
     253   0C:AB00                      		; xor	a
     254   0C:AB00                      		; ld		(_kBank1),a
     255   0C:AB00                      		; inc	a
     256   0C:AB00                      		; ld		(_kBank2),a
     257   0C:AB00                      		; inc	a
     258   0C:AB00                      		; ld		(_kBank3),a
     259   0C:AB00                      		
     260   0C:AB00                      
     261   0C:AB00                      		; call	_isrinit
     262   0C:AB00                      
     263   0C:AB00                      ; main_loop: 
     264   0C:AB00                      				
     265   0C:AB00                      		; ld	hl,0
     266   0C:AB00                      		; ld	(_jiffy),hl
     267   0C:AB00                      
     268   0C:AB00                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     269   0C:AB00                      ; ; run ms FSM and place its sprites in the SAT in RAM
     270   0C:AB00                      		; call	ms_ctrl
     271   0C:AB00                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     272   0C:AB00                      ; ; test for game restart
     273   0C:AB00                      		; ld	a,(ms_state)
     274   0C:AB00                      		; cp	ms_reset
     275   0C:AB00                      		; jp	z,restart
     276   0C:AB00                      
     277   0C:AB00                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     278   0C:AB00                      ; ; place MS in the SAT and test for collision
     279   0C:AB00                      		; call	put_ms_sprt
     280   0C:AB00                      		; ld		a,(god_mode)
     281   0C:AB00                      		; and 	a
     282   0C:AB00                      		; ; call	z,test_obstacles
     283   0C:AB00                      
     284   0C:AB00                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     285   0C:AB00                      ; ; run NCPS FSM
     286   0C:AB00                      		; call	wave_timer
     287   0C:AB00                      		; call	npc_loop
     288   0C:AB00                      		; call	enemy_bullet_loop
     289   0C:AB00                      
     290   0C:AB00                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     291   0C:AB00                      ; ; run MS bullets FSM
     292   0C:AB00                      		; call	bullet_loop
     293   0C:AB00                      
     294   0C:AB00                      		; ; ld	a,00100101B			; random colour
     295   0C:AB00                      		; ; out		(0x99),a
     296   0C:AB00                      		; ; ld		a,7+128
     297   0C:AB00                      		; ; out		(0x99),a
     298   0C:AB00                      		
     299   0C:AB00                      		; ; call	_waitvdp
     300   0C:AB00                      
     301   0C:AB00                      		; ; ld	a,10100101B			; random colour
     302   0C:AB00                      		; ; out		(0x99),a
     303   0C:AB00                      		; ; ld		a,7+128
     304   0C:AB00                      		; ; out		(0x99),a
     305   0C:AB00                      				
     306   0C:AB00                      		; ld	a,(joystick)
     307   0C:AB00                      		; and	32
     308   0C:AB00                      		; ; call	z,_plot_distrucable
     309   0C:AB00                      
     310   0C:AB00                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     311   0C:AB00                      		; ; ld		a,3
     312   0C:AB00                      		; ; out		(0x99),a
     313   0C:AB00                      		; ; ld		a,7+128
     314   0C:AB00                      		; ; out		(0x99),a
     315   0C:AB00                      		
     316   0C:AB00                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     317   0C:AB00                      		; ; call	test_star
     318   0C:AB00                      
     319   0C:AB00                      		; ; xor		a
     320   0C:AB00                      		; ; out		(0x99),a
     321   0C:AB00                      		; ; ld		a,7+128
     322   0C:AB00                      		; ; out		(0x99),a
     323   0C:AB00                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     324   0C:AB00                      
     325   0C:AB00                      		
     326   0C:AB00                      ; 1:		ld	a,(_jiffy)		; wait for vblank (and not for linit)
     327   0C:AB00                      		; or	a
     328   0C:AB00                      		; jr	z,1b
     329   0C:AB00                      	
     330   0C:AB00                      		; ld	hl,(xmap)
     331   0C:AB00                      		; ld	bc,xship_rel
     332   0C:AB00                      		; add hl,bc
     333   0C:AB00                      		; ld	(xship),hl
     334   0C:AB00                      
     335   0C:AB00                      		; ld		a,(dxmap)
     336   0C:AB00                      		; ld		(_dxmap),a
     337   0C:AB00                      
     338   0C:AB00                      		; jp      main_loop
     339   0C:AB00                      
     340   0C:AB00                      ; ;-------------------------------------
     341   0C:AB00                      ; AFXPLAY:
     342   0C:AB00                      		; ret
     343   0C:AB00                      ; ;	include vuitpakker.asm
     344   0C:AB00                      	; include print.asm
     345   0C:AB00                      	; include plot_line.asm
     346   0C:AB00                      	; include plot_line2.asm
     347   0C:AB00                      	; include color_update.asm
     348   0C:AB00                      ; ms_bllts_col_win:
     349   0C:AB00                      	; include ms_bllts_frm_coll_wind.asm
     350   0C:AB00                      	; include	ms_bllts.asm
     351   0C:AB00                      		
     352   0C:AB00                      ; ;-------------------------------------
     353   0C:AB00                      
     354   0C:AB00                      	
     355   0C:AB00                      		; page 1
     356   0C:AB00                      
     357   0C:AB00                      		; include	ms_crtl.asm
     358   0C:AB00                      		; include	put_ms_sprt.asm
     359   0C:AB00                      		; include probe_level.asm				
     360   0C:AB00                      		; include opening.asm		
     361   0C:AB00                      ; outvram:
     362   0C:AB00                      ; 2:		ld	a,d
     363   0C:AB00                      		; ld	(_kBank4),a
     364   0C:AB00                      		; ld	hl,0xA000
     365   0C:AB00                      		; ld	bc,0x98
     366   0C:AB00                      		; ld	a,32
     367   0C:AB00                      ; 1:		otir
     368   0C:AB00                      		; dec	a
     369   0C:AB00                      		; jp	nz,1b
     370   0C:AB00                      		; inc	d
     371   0C:AB00                      		; dec	e
     372   0C:AB00                      		; jr	nz,2b
     373   0C:AB00                      		; ret
     374   0C:AB00                      		
     375   0C:AB00                      		; page 2
     376   0C:AB00                      	; ; include mainhero_LMMM.asm
     377   0C:AB00                      
     378   0C:AB00                      	
     379   0C:AB00                      		; page 3
     380   0C:AB00                      ; manta_color:
     381   0C:AB00                      		; incbin mship03_clr.bin
     382   0C:AB00                      ; ms_spt:
     383   0C:AB00                      		; incbin mship03_frm.bin
     384   0C:AB00                      		
     385   0C:AB00                      		; page 4
     386   0C:AB00                      ; _tiles0:
     387   0C:AB00                      		; incbin "tiles.bin",0x0000,0x2000
     388   0C:AB00                      		; page 5
     389   0C:AB00                      		; incbin "tiles.bin",0x2000,0x2000
     390   0C:AB00                      		; page 6
     391   0C:AB00                      		; incbin "tiles.bin",0x4000,0x2000
     392   0C:AB00                      		; page 7
     393   0C:AB00                      		; incbin "tiles.bin",0x6000,0x2000
     394   0C:AB00                      		; page 8
     395   0C:AB00                      		; incbin "tiles.bin",0x8000,0x2000
     396   0C:AB00                      		; page 9
     397   0C:AB00                      		; incbin "tiles.bin",0xA000,0x2000
     398   0C:AB00                      		; page 10
     399   0C:AB00                      		; incbin "tiles.bin",0xC000,0x2000
     400   0C:AB00                      		; page 11
     401   0C:AB00                      		; incbin "tiles.bin",0xE000;,0x2000
     402   0C:AB00                      
     403   0C:AB00                      		; page 12
     404   0C:AB00                      
     405   0C:AB00                      		; page 15
     406   0C:AB00                      ; _level:
     407   0C:AB00                      		; incbin "datamap.bin"
     408   0C:AB00                      	
     409   0C:AB00                      		; page 16
     410   0C:AB00                      ; _opening:
     411   0C:AB00                      		; incbin "opening.bin",0x0000,0x2000
     412   0C:AB00                      		; page 17
     413   0C:AB00                      		; incbin "opening.bin",0x2000,0x2000
     414   0C:AB00                      		; page 18
     415   0C:AB00                      		; incbin "opening.bin",0x4000,0x2000
     416   0C:AB00                      		; page 19
     417   0C:AB00                      		; incbin "opening.bin",0x6000,0x2000
     418   0C:AB00                      		; page 20
     419   0C:AB00                      		; incbin "opening.bin",0x8000,0x2000
     420   0C:AB00                      		; page 21
     421   0C:AB00                      		; incbin "opening.bin",0xA000,0x2000
     422   0C:AB00                      		; page 22
     423   0C:AB00                      		; incbin "opening.bin",0xC000;,0x2000
     424   0C:AB00                      		; page 23
     425   0C:AB00                      		; ; incbin "opening.bin",0xE000;,,0x2000
     426   0C:AB00                      	
     427   0C:AB00                      		; page 24
     428   0C:AB00                      ; _scorebar:	
     429   0C:AB00                      		; incbin scorebar.bin
     430   0C:AB00                      	
     431   0C:AB00                      		; page 25
     432   0C:AB00                      ; _animated:	
     433   0C:AB00                      		; incbin animated.bin,0x0000,0x2000
     434   0C:AB00                      		; page 26
     435   0C:AB00                      		; incbin animated.bin,0x2000,0x2000
     436   0C:AB00                      
     437   0C:AB00                      		; page 27
     438   0C:AB00                      ; sprtdata:
     439   0C:AB00                      		; incbin 	uridium_revA.bin,,16*32
     440   0C:AB00                      		; incbin 	enemies_frm.bin
     441   0C:AB00                      
     442   0C:AB00                      		; page 28
     443   0C:AB00                      ; color_base:
     444   0C:AB00                      		; repeat 4
     445   0C:AB00                      		; ds	16,8
     446   0C:AB00                      		; ds	16,10+64
     447   0C:AB00                      		; endrepeat
     448   0C:AB00                      		; repeat 4
     449   0C:AB00                      		; ds	16,8
     450   0C:AB00                      		; ds	16,10+64
     451   0C:AB00                      		; endrepeat
     452   0C:AB00                      
     453   0C:AB00                      		
     454   0C:AB00                      		; incbin 	enemies_clr.bin
     455   0C:AB00                      		
     456   0C:AB00                      ; FINISH:
     457   0C:AB00                      
     458   0C:AB00                      
     459   0C:AB00                      ; ;---------------------------------------------------------
     460   0C:AB00                      ; ; Variables
     461   0C:AB00                      ; ;---------------------------------------------------------
     462   0C:AB00                      	
     463   0C:AB00                      	
     464   0C:AB00  (C000)              	MAP 0xC000
     465   0C:AB00                      
     466   0C:AB00  (0C:C000)           _levelmap:			#mapWidth*mapHeight
     467   0C:AB00                      
     468   0C:AB00  (0C:CB00)           slotvar				#1
     469   0C:AB00  (0C:CB01)           slotram				#1
     470   0C:AB00  (0C:CB02)           SEL_NTSC			#1
     471   0C:AB00                      
     472   0C:AB00                      ; joystick			#1
     473   0C:AB00                      
     474   0C:AB00                      ; _mcdivider			#1
     475   0C:AB00                      
     476   0C:AB00                      ; _mcx				#2	; relative with in the frame on the screen
     477   0C:AB00                      ; _mcy				#2
     478   0C:AB00                      
     479   0C:AB00                      ; _mclx				#2	; absolute with the level in ram
     480   0C:AB00                      ; _mcly				#2
     481   0C:AB00                      
     482   0C:AB00                      ; _mcframe			#1
     483   0C:AB00                      ; _mcstate			#1
     484   0C:AB00                      
     485   0C:AB00                      ; _mcdx				#2
     486   0C:AB00                      ; _mcdy				#2
     487   0C:AB00                      
     488   0C:AB00                      ; _mcprobe:			#1
     489   0C:AB00                      ; _mcprobeb:			#1
     490   0C:AB00                      
     491   0C:AB00                      ; _ticxframe			#1
     492   0C:AB00                      
     493   0C:AB00                      ; _buffer:			#16
     494   0C:AB00                      ; _fps:				#2
     495   0C:AB00                      ; _nframes:			#2
     496   0C:AB00                      ; _vbit16:			#2
     497   0C:AB00                      
     498   0C:AB00  (0C:CB03)           _ymappos:			#1
     499   0C:AB00  (0C:CB04)           _xmappos:			#2
     500   0C:AB00  (0C:CB06)           _levelmap_pos:		#2
     501   0C:AB00                      
     502   0C:AB00                      ; _shadowbuff:		#2
     503   0C:AB00                      
     504   0C:AB00  (0C:CB08)           _displaypage:		#1
     505   0C:AB00                      
     506   0C:AB00                      ; _mccolorchange:		#1
     507   0C:AB00  (0C:CB09)           _xoffset:			#1
     508   0C:AB00                      ; _yoffset:			#1
     509   0C:AB00                      
     510   0C:AB00                      ; __xoffset:			#1
     511   0C:AB00                      ; __r18:				#1
     512   0C:AB00                      
     513   0C:AB00                      ; randSeed:			#2
     514   0C:AB00                      ; cur_level:			#1
     515   0C:AB00                      ; wave_count:			#1
     516   0C:AB00                      ; landing_permission:	#1
     517   0C:AB00                      ; assault_wave_timer:	#2
     518   0C:AB00                      ; bullet_rate:		#1
     519   0C:AB00                      ; _dxchng:			#1		; <>0 if direction changes
     520   0C:AB00                      ; _dxmap:				#1		; previous dxmap
     521   0C:AB00                      ; dxmap:				#1
     522   0C:AB00                      ; xmap:				#2
     523   0C:AB00                      ; _xmapx4:			#2		; xmap x 4
     524   0C:AB00                      ; yship:				#1
     525   0C:AB00                      ; xship:				#2
     526   0C:AB00                      ; aniframe:			#1
     527   0C:AB00                      ; ms_state:			#1
     528   0C:AB00                      ; old_aniframe:		#1
     529   0C:AB00                      ; anispeed:			#1
     530   0C:AB00                      ; already_dead:		#1
     531   0C:AB00                      ; lives_bin:			#1
     532   0C:AB00                      
     533   0C:AB00                      ; god_mode:			#1
     534   0C:AB00                      ; visible_sprts:		#1
     535   0C:AB00                      ; flip_flop:			#1
     536   0C:AB00                      
     537   0C:AB00                      ; ram_sat:			#3*4
     538   0C:AB00                      
     539   0C:AB00                      	; struct enemy_data
     540   0C:AB00                      ; y				db	0
     541   0C:AB00                      ; x				dw	0
     542   0C:AB00                      ; xoff			db	0
     543   0C:AB00                      ; yoff			db	0
     544   0C:AB00                      ; xsize			db	0
     545   0C:AB00                      ; ysize			db	0
     546   0C:AB00                      ; status			db	0	; B7 = DWN/UP | B6 = RIGHT/LEFT | B5 = ok/wrong clr | B0 = Inactive/Active
     547   0C:AB00                      ; cntr			db	0
     548   0C:AB00                      ; kind			db	0
     549   0C:AB00                      ; frame			db	0
     550   0C:AB00                      ; color			db	0
     551   0C:AB00                      ; color2			db	0
     552   0C:AB00                      ; speed			dw	0
     553   0C:AB00                      	; ends
     554   0C:AB00                      	
     555   0C:AB00                      ; any_object:			#0
     556   0C:AB00                      ; ms_bullets:			#enemy_data*max_bullets
     557   0C:AB00                      ; enem_bullets:		#enemy_data*max_enem_bullets
     558   0C:AB00                      ; enemies:			#enemy_data*max_enem
     559   0C:AB00                      ; endram:				#1
     560   0C:AB00  (0000)              	ENDMAP

    LABELS
-------------------------------------------------
00:00005000   _kBank1
00:00007000   _kBank2
00:00009000   _kBank3
00:0000B000   _kBank4
00:0000F3DF X RG0SAV
00:0000F3E0   RG1SAV
00:0000F3E1 X RG2SAV
00:0000F3E2 X RG3SAV
00:0000F3E3 X RG4SAV
00:0000F3E4 X RG5SAV
00:0000F3E5 X RG6SAV
00:0000F3E6   RG7SAV
00:0000FFE7   RG8SAV
00:0000FFE8   RG9SAV
00:0000FFE9 X RG10SAV
00:0000FFEA X RG11SAV
00:0000FFEB X RG12SAV
00:0000FFEC X RG13SAV
00:0000FFED X RG14SAV
00:0000FFEE X RG15SAV
00:0000FFEF X RG16SAV
00:0000FFF0 X RG17SAV
00:0000FFF1 X RG18SAV
00:0000FFF2 X RG19SAV
00:0000FFF3 X RG20SAV
00:0000FFF4 X RG21SAV
00:0000FFF5 X RG22SAV
00:0000FFF7 X RG23SAV
00:0000FC9E   _jiffy
00:0000000C X max_enem
00:00000003 X max_enem_bullets
00:00000002 X max_bullets
00:00000004 X maxspeed
00:000000B4 X assault_wave_timer_preset
00:00000002 X enemy_bullet_speed
00:00000078 X xship_rel
00:00000100   mapWidth
00:0000000B   mapHeight
00:000000A8 X YSIZE
00:00000024 X ENASLT
00:00000138   RSLREG
00:0000FCC1   EXPTBL
00:00004010   search_slot
00:0000402F   search_slotram
00:00004050   search_slotram0
00:00004055 X setrompage0
00:0000405B   setrampage0
00:00004061   setrompage2
00:00004067 X setrampage2
00:0000406D X setrompage3
00:00004073 X setrampage3
00:00004079 X recbios
00:0000407C   setslotpage0
00:000040B3 X setslotpage1
00:000040F2   setslotpage2
00:00004139   setslotpage3
00:00004178   _cls
00:00004190 X _cls0
00:00000099 X vdpport1
00:0000009A X vdpport2
00:000041A5   _vdpsetvramwr
00:000041A6 X _vdpsetvramwr2
00:000041B6 X _vdpsetvramwr14
00:000041BF X _vdpsetvramrd
00:000041D9 X _setpage
00:0000005F   chgmod
00:0000000C X RDSLT
00:00000156 X KILBUF
00:000041EA   set_scr
00:0000422D X _waitvdp
00:0000423C   _fake_isr
00:000042AD   xfsm
00:000042BB   hfsm
00:000042D6   move_slice
00:00004311   clear_slice
00:0000433C   _brdrs
00:0000435C X _brdrs.x0
00:00004365   _brdrs.cont
00:0000438A   _brdrs.x1_15
00:0000439A   plot_col64
00:000043A6   plot_col32
00:000043B3   plot_col16
00:000044FD   checkkbd
00:0000450A   START
00:0000455F   PAL_ntsc
00:0000456E   mapinit
04:0000A000   _tiles0
0C:0000A000   _level
0C:0000C000   _levelmap
0C:0000CB00   slotvar
0C:0000CB01   slotram
0C:0000CB02   SEL_NTSC
0C:0000CB03   _ymappos
0C:0000CB04   _xmappos
0C:0000CB06   _levelmap_pos
0C:0000CB08   _displaypage
0C:0000CB09   _xoffset


 Output: main.out
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: *  Used: 00000000

    No output

 Output: urd2.rom
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: 00002000  Used: 0000058E

   Address   Length Align   Label
   00004000    1422         search_slot
   0000458E    6770       <empty>

 Page: 01
  Org: 00006000  Size: 00002000  Used: 00000000

   00006000    8192       <empty>

 Page: 02
  Org: 00008000  Size: 00002000  Used: 00000000

   00008000    8192       <empty>

 Page: 03
  Org: 0000A000  Size: 00002000  Used: 00000000

   0000A000    8192       <empty>

 Page: 04
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         _tiles0

 Page: 05
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         

 Page: 06
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         

 Page: 07
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         

 Page: 08
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         

 Page: 09
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         

 Page: 0A
  Org: 0000A000  Size: 00002000  Used: 00001B00

   Address   Length Align   Label
   0000A000    6912         
   0000BB00    1280       <empty>

 Page: 0B
  Org: 0000A000  Size: 00002000  Used: 00000000

   0000A000    8192       <empty>

 Page: 0C
  Org: 0000A000  Size: 00002000  Used: 00000B00

   Address   Length Align   Label
   0000A000    2816         _level
   0000AB00    5376       <empty>

 Page: 0D
  Org: 0000A000  Size: 00002000  Used: 00000000

   0000A000    8192       <empty>

 Page: 0E
  Org: 0000A000  Size: 00002000  Used: 00000000

   0000A000    8192       <empty>

 Page: 0F
  Org: 0000A000  Size: 00002000  Used: 00000000

   0000A000    8192       <empty>
