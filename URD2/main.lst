Sjasm Z80 Assembler v0.42c - www.xl2s.tk             [2016.01.13 - 00:03:20]

main.asm
Errors: 0

       1   00:0000                      ;----------------------------------------------------------------------------
       2   00:0000                      ;
       3   00:0000                      ;----------------------------------------------------------------------------
       4   00:0000                      
       5   00:0000                              output "urd2.rom"
       6   00:0000                      
       7   00:0000                      		;	konami scc
       8   00:0000                      		
       9   00:0000  (00:5000)           _kBank1:	equ 05000h ;- 57FFh (5000h used)
      10   00:0000  (00:7000)           _kBank2: 	equ 07000h ;- 77FFh (7000h used)
      11   00:0000  (00:9000)           _kBank3: 	equ 09000h ;- 97FFh (9000h used)
      12   00:0000  (00:B000)           _kBank4: 	equ 0B000h ;- B7FFh (B000h used)
      13   00:0000                      
      14   00:0000                      
      15   00:0000                      
      16   00:0000                      		defpage	 0,0x4000, 0x2000		; page 0 main code + far call routines
      17   00:0000                      		defpage	 1,0x6000, 0x2000		; page 1 main code + far call routines
      18   00:0000                      		defpage	 2,0x8000, 0x2000		; swapped data 
      19   00:0000                      		defpage	 3,0xA000, 0x2000		; swapped data 
      20   00:0000                      		
      21   00:0000                      		defpage	 4..15					; 64KB of swapped data 
      22   00:0000                      
      23   00:0000                      
      24   00:0000                      
      25   00:0000                        		include "header.asm"
       1.  00:0000                      
       2.  00:0000                        // MSX 1 
       3.  00:0000  (00:F3DF)           RG0SAV  equ 0xF3DF  
       4.  00:0000  (00:F3E0)           RG1SAV  equ 0xF3E0  
       5.  00:0000  (00:F3E1)           RG2SAV  equ 0xF3E1
       6.  00:0000  (00:F3E2)           RG3SAV  equ 0xF3E2
       7.  00:0000  (00:F3E3)           RG4SAV  equ 0xF3E3
       8.  00:0000  (00:F3E4)           RG5SAV  equ 0xF3E4
       9.  00:0000  (00:F3E5)           RG6SAV  equ 0xF3E5
      10.  00:0000  (00:F3E6)           RG7SAV  equ 0xF3E6
      11.  00:0000                      // MSX 2
      12.  00:0000  (00:FFE7)           RG8SAV  equ 0xFFE7 
      13.  00:0000  (00:FFE8)           RG9SAV  equ 0xFFE8 
      14.  00:0000  (00:FFE9)           RG10SAV equ 0xFFE9 
      15.  00:0000  (00:FFEA)           RG11SAV equ 0xFFEA 
      16.  00:0000  (00:FFEB)           RG12SAV equ 0xFFEB 
      17.  00:0000  (00:FFEC)           RG13SAV equ 0xFFEC 
      18.  00:0000  (00:FFED)           RG14SAV equ 0xFFED 
      19.  00:0000  (00:FFEE)           RG15SAV equ 0xFFEE 
      20.  00:0000  (00:FFEF)           RG16SAV equ 0xFFEF 
      21.  00:0000  (00:FFF0)           RG17SAV equ 0xFFF0 
      22.  00:0000  (00:FFF1)           RG18SAV equ 0xFFF1 
      23.  00:0000  (00:FFF2)           RG19SAV equ 0xFFF2 
      24.  00:0000  (00:FFF3)           RG20SAV equ 0xFFF3 
      25.  00:0000  (00:FFF4)           RG21SAV equ 0xFFF4 
      26.  00:0000  (00:FFF5)           RG22SAV equ 0xFFF5 
      27.  00:0000  (00:FFF7)           RG23SAV equ 0xFFF7 
      28.  00:0000                      
      29.  00:0000  (00:FC9E)           _jiffy: equ 0xFC9E 
      30.  00:0000                      
      31.  00:0000                      	
      32.  00:0000                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      33.  00:0000                      
      34.  00:0000  (00:000C)           max_enem:					equ 12		; max 12
      35.  00:0000  (00:0003)           max_enem_bullets:			equ 3
      36.  00:0000  (00:0002)           max_bullets:				equ 2		; max number of enemies*2 + ms_bullets + enem_bullets + 3 for ms	<= 32 sprites
      37.  00:0000                      
      38.  00:0000  (00:0004)           maxspeed:					equ 4		; the actual speed is divided by 4
      39.  00:0000  (00:00B4)           assault_wave_timer_preset:	equ	3*60	; a wave each 3 seconds
      40.  00:0000  (00:0002)           enemy_bullet_speed:			equ	2	
      41.  00:0000  (00:0078)           xship_rel:					equ (128-8)
      42.  00:0000                      
      43.  00:0000  (00:0100)           mapWidth	equ	256
      44.  00:0000  (00:000B)           mapHeight	equ	11
      45.  00:0000  (00:00A8)           YSIZE		equ	10*16+8
      46.  00:0000                      
      47.  00:0000                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      48.  00:0000                      
      49.  00:0000                      
      50.  00:0000                      	macro setpage_a
      51.  00:0000                    < 		ld	(_kBank3),a
      52.  00:0000                    < 		inc	a
      53.  00:0000                    < 		ld	(_kBank4),a
      54.  00:0000                    < 	endmacro
      55.  00:0000                      	
      56.  00:0000                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
      26   00:0000                      		
      27   00:0000                      		
      28   00:0000                      		
      29   00:0000  (00)                		page 0
      30   00:4000                      		
      31   00:4000                              org 4000h
      32   00:4000                              dw  4241h,START,0,0,0,0,0,0
      32   00:4000  41 42 13 45 00 00 00 00 00 00 00 00 00 00 00 00 
      33   00:4010                      
      34   00:4010                      	;-------------------------------------		
      35   00:4010                      
      36   00:4010                      
      37   00:4010                      		include rominit64.asm
       1.  00:4010                      
       2.  00:4010                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       3.  00:4010                      ; set pages and subslot
       4.  00:4010                      ;
       5.  00:4010                      
       6.  00:4010                      
       7.  00:4010  (00:0024)           ENASLT:			equ		024h
       8.  00:4010  (00:0138)           RSLREG:			equ		0138h
       9.  00:4010  (00:FCC1)           EXPTBL:			equ		0FCC1h	; Bios Slot / Expansion Slot
      10.  00:4010                      
      11.  00:4010                      
      12.  00:4010                      ; ----------------------------
      13.  00:4010                      ; pre-set main slot for page 3
      14.  00:4010                      ; and set sub-slot for page 3
      15.  00:4010                      ; ----------------------------
      16.  00:4010                      	macro	mainslot_setup n
      17.  00:4010                    < 	and		3
      18.  00:4010                    < [2]	rrca
      19.  00:4010                    < 	and		0xC0
      20.  00:4010                    < 	ld		c,a
      21.  00:4010                    < 	ld		a,d
      22.  00:4010                    < 	and		0x3F
      23.  00:4010                    < 	or		c
      24.  00:4010                    < 	ld		c,a					; Primary slot value with main slot in page 3
      25.  00:4010                    < 
      26.  00:4010                    < 	ld		a,b
      27.  00:4010                    < 	and		0x0C
      28.  00:4010                    < [2]	rrca
      29.  00:4010                    < 	and		3
      30.  00:4010                    < 	ld		b,a					; B = Expanded slot in page 3
      31.  00:4010                    < 	ld		a,c
      32.  00:4010                    < 	out		(0A8h),a			; Slot : Main Slot, xx, xx, Main slot
      33.  00:4010                    < 	ld		a,(0FFFFh)
      34.  00:4010                    < 	cpl
      35.  00:4010                    < 	if (n<=4)
      36.  00:4010                    < [n]	RLCA
      37.  00:4010                    < 	else
      38.  00:4010                    < [8-n] RRCA	
      39.  00:4010                    < 	endif
      40.  00:4010                    < 	and		0xFC
      41.  00:4010                    < 	or		b
      42.  00:4010                    < 	if (n<=4)
      43.  00:4010                    < [n]	RRCA
      44.  00:4010                    < 	else
      45.  00:4010                    < [8-n] RLCA
      46.  00:4010                    < 	endif
      47.  00:4010                    < 	ld		(0FFFFh),a		; Expanded slot selected
      48.  00:4010                    < 	ld		b,a				; save for later	
      49.  00:4010                    < 	endmacro
      50.  00:4010                      		
      51.  00:4010                      
      52.  00:4010                      ; ------------------------------
      53.  00:4010                      ; SEARCH_SLOT
      54.  00:4010                      ; look for the slot of our rom
      55.  00:4010                      ; active in page 1
      56.  00:4010                      ; ------------------------------
      57.  00:4010                      
      58.  00:4010                      search_slot:
      59.  00:4010  CD 38 01            	call	RSLREG
      60.  00:4013  0F 0F               [2]	rrca
      61.  00:4015  E6 03               	and		3
      62.  00:4017  4F                  	ld		c,a
      63.  00:4018  06 00               	ld		b,0
      64.  00:401A  21 C1 FC            	ld		hl,EXPTBL
      65.  00:401D  09                  	add		hl,bc
      66.  00:401E  7E                  	ld		a,(hl)
      67.  00:401F  E6 80               	and		080h
      68.  00:4021  B1                  	or		c
      69.  00:4022  4F                  	ld		c,a
      70.  00:4023  23 23 23 23         [4]	inc		hl
      71.  00:4027  7E                  	ld		a,(hl)
      72.  00:4028  E6 0C               	and		0Ch
      73.  00:402A  B1                  	or		c
      74.  00:402B  32 00 C0            	ld		(slotvar),a
      75.  00:402E  C9                  	ret
      76.  00:402F                      	
      77.  00:402F                      ; ------------------------------
      78.  00:402F                      ; look for the slot of ram
      79.  00:402F                      ; active in page 3
      80.  00:402F                      ; ------------------------------
      81.  00:402F                      
      82.  00:402F                      search_slotram:
      83.  00:402F  F3                  	di
      84.  00:4030  CD 38 01            	call	RSLREG
      85.  00:4033  07 07               [2]	rlca
      86.  00:4035  E6 03               	and		3
      87.  00:4037  4F                  	ld		c,a
      88.  00:4038  06 00               	ld		b,0
      89.  00:403A  21 C1 FC            	ld		hl,EXPTBL
      90.  00:403D  09                  	add		hl,bc
      91.  00:403E  7E                  	ld		a,(hl)
      92.  00:403F  E6 80               	and		080h
      93.  00:4041  28 0D               	jr		z,search_slotram0
      94.  00:4043  B1                  	or		c
      95.  00:4044  4F                  	ld		c,a
      96.  00:4045  23 23 23 23         [4]	inc		hl
      97.  00:4049  7E                  	ld		a,(hl)
      98.  00:404A  07 07 07 07         [4]	rlca
      99.  00:404E  E6 0C               	and		0Ch
     100.  00:4050                      search_slotram0:
     101.  00:4050  B1                  	or		c
     102.  00:4051  32 01 C0            	ld		(slotram),a
     103.  00:4054  C9                  	ret
     104.  00:4055                      	
     105.  00:4055                      ; ------------------------------
     106.  00:4055                      ; SETROMPAGE0
     107.  00:4055                      ; Set the chart in
     108.  00:4055                      ; Page 0
     109.  00:4055                      ; -----------------------------
     110.  00:4055                      
     111.  00:4055                      setrompage0:
     112.  00:4055  3A 00 C0            	ld		a,(slotvar)
     113.  00:4058  C3 7C 40            	jp		setslotpage0
     114.  00:405B                      
     115.  00:405B                      setrampage0:
     116.  00:405B  3A 01 C0            	ld		a,(slotram)
     117.  00:405E  C3 7C 40            	jp		setslotpage0
     118.  00:4061                      
     119.  00:4061                      setrompage2:
     120.  00:4061  3A 00 C0            	ld		a,(slotvar)
     121.  00:4064  C3 F2 40            	jp		setslotpage2
     122.  00:4067                      
     123.  00:4067                      setrampage2:
     124.  00:4067  3A 01 C0            	ld		a,(slotram)
     125.  00:406A  C3 F2 40            	jp		setslotpage2
     126.  00:406D                      	
     127.  00:406D                      setrompage3:
     128.  00:406D  3A 00 C0            	ld		a,(slotvar)
     129.  00:4070  C3 39 41            	jp		setslotpage3
     130.  00:4073                      
     131.  00:4073                      setrampage3:
     132.  00:4073  3A 01 C0            	ld		a,(slotram)
     133.  00:4076  C3 39 41            	jp		setslotpage3
     134.  00:4079                      	
     135.  00:4079                      ; ------------------------------
     136.  00:4079                      ; RECBIOS
     137.  00:4079                      ; set the bios ROM
     138.  00:4079                      ; -------------------------------
     139.  00:4079                      recbios:
     140.  00:4079  3A C1 FC            	ld		a,(EXPTBL)
     141.  00:407C                      
     142.  00:407C                      ; ---------------------------
     143.  00:407C                      ; SETSLOTPAGE0
     144.  00:407C                      ; Set the slot passed in A
     145.  00:407C                      ; at page 0 in the Z80 address space
     146.  00:407C                      ; A: Format FxxxSSPP
     147.  00:407C                      ; ----------------------------
     148.  00:407C                      
     149.  00:407C                      setslotpage0:
     150.  00:407C  F3                  	di
     151.  00:407D  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     152.  00:407E  DB A8               	in		a,(0A8h)
     153.  00:4080  E6 FC               	and		0xFC
     154.  00:4082  57                  	ld		d,a					; D = Primary slot value
     155.  00:4083  78                  	ld		a,b
     156.  00:4084  E6 03               	and		3
     157.  00:4086  B2                  	or		d
     158.  00:4087  57                  	ld		d,a		; D = Final Value for primary slot
     159.  00:4088  78                  	ld		a,b		; Check if expanded
     160.  00:4089  CB 7F               	bit		7,a
     161.  00:408B  28 22               	jr		z,1f	; Not Expanded
     162.  00:408D                      	mainslot_setup	0
     162.  00:408D  E6 03             >  and  3
     162.  00:408F  0F 0F             > [2] rrca
     162.  00:4091  E6 C0             >  and  0xC0
     162.  00:4093  4F                >  ld  c,a
     162.  00:4094  7A                >  ld  a,d
     162.  00:4095  E6 3F             >  and  0x3F
     162.  00:4097  B1                >  or  c
     162.  00:4098  4F                >  ld  c,a
     162.  00:4099                    > 
     162.  00:4099  78                >  ld  a,b
     162.  00:409A  E6 0C             >  and  0x0C
     162.  00:409C  0F 0F             > [2] rrca
     162.  00:409E  E6 03             >  and  3
     162.  00:40A0  47                >  ld  b,a
     162.  00:40A1  79                >  ld  a,c
     162.  00:40A2  D3 A8             >  out  (0A8h),a
     162.  00:40A4  3A FF FF          >  ld  a,(0FFFFh)
     162.  00:40A7  2F                >  cpl
     162.  00:40A8                    >  if (n<=4)
     162.  00:40A8                    > [n] RLCA
     162.  00:40A8                    >  else
     162.  00:40A8                    ~ [8-n] RRCA
     162.  00:40A8                    ~  endif
     162.  00:40A8  E6 FC             >  and  0xFC
     162.  00:40AA  B0                >  or  b
     162.  00:40AB                    >  if (n<=4)
     162.  00:40AB                    > [n] RRCA
     162.  00:40AB                    >  else
     162.  00:40AB                    ~ [8-n] RLCA
     162.  00:40AB                    ~  endif
     162.  00:40AB  32 FF FF          >  ld  (0FFFFh),a
     162.  00:40AE  47                >  ld  b,a
     163.  00:40AF  7A                  1:	ld		a,d				; A = Final value
     164.  00:40B0  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     165.  00:40B2  C9                  	ret
     166.  00:40B3                      
     167.  00:40B3                      ; ---------------------------
     168.  00:40B3                      ; SETSLOTPAGE1
     169.  00:40B3                      ; Set the slot passed in A
     170.  00:40B3                      ; at page 1 in the Z80 address space
     171.  00:40B3                      ; A: Format FxxxSSPP
     172.  00:40B3                      ; ----------------------------
     173.  00:40B3                      
     174.  00:40B3                      setslotpage1:
     175.  00:40B3  F3                  	di
     176.  00:40B4  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     177.  00:40B5  DB A8               	in		a,(0A8h)
     178.  00:40B7  0F 0F               [2]	RRCA
     179.  00:40B9  E6 FC               	and		0xFC
     180.  00:40BB  57                  	ld		d,a					; D = Primary slot value
     181.  00:40BC  78                  	ld		a,b
     182.  00:40BD  E6 03               	and		3
     183.  00:40BF  B2                  	or		d
     184.  00:40C0  07 07               [2]	RLCA
     185.  00:40C2  57                  	ld		d,a		; D = Final Value for primary slot
     186.  00:40C3  78                  	ld		a,b		; Check if expanded
     187.  00:40C4  CB 7F               	bit		7,a
     188.  00:40C6  28 26               	jr		z,1f	; Not Expanded
     189.  00:40C8                      	mainslot_setup	6
     189.  00:40C8  E6 03             >  and  3
     189.  00:40CA  0F 0F             > [2] rrca
     189.  00:40CC  E6 C0             >  and  0xC0
     189.  00:40CE  4F                >  ld  c,a
     189.  00:40CF  7A                >  ld  a,d
     189.  00:40D0  E6 3F             >  and  0x3F
     189.  00:40D2  B1                >  or  c
     189.  00:40D3  4F                >  ld  c,a
     189.  00:40D4                    > 
     189.  00:40D4  78                >  ld  a,b
     189.  00:40D5  E6 0C             >  and  0x0C
     189.  00:40D7  0F 0F             > [2] rrca
     189.  00:40D9  E6 03             >  and  3
     189.  00:40DB  47                >  ld  b,a
     189.  00:40DC  79                >  ld  a,c
     189.  00:40DD  D3 A8             >  out  (0A8h),a
     189.  00:40DF  3A FF FF          >  ld  a,(0FFFFh)
     189.  00:40E2  2F                >  cpl
     189.  00:40E3                    >  if (n<=4)
     189.  00:40E3                    ~ [n] RLCA
     189.  00:40E3                    ~  else
     189.  00:40E3  0F 0F             > [8-n] RRCA
     189.  00:40E5                    >  endif
     189.  00:40E5  E6 FC             >  and  0xFC
     189.  00:40E7  B0                >  or  b
     189.  00:40E8                    >  if (n<=4)
     189.  00:40E8                    ~ [n] RRCA
     189.  00:40E8                    ~  else
     189.  00:40E8  07 07             > [8-n] RLCA
     189.  00:40EA                    >  endif
     189.  00:40EA  32 FF FF          >  ld  (0FFFFh),a
     189.  00:40ED  47                >  ld  b,a
     190.  00:40EE  7A                  1:	ld		a,d				; A = Final value
     191.  00:40EF  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     192.  00:40F1  C9                  	ret
     193.  00:40F2                      	
     194.  00:40F2                      
     195.  00:40F2                      ; ---------------------------
     196.  00:40F2                      ; SETSLOTPAGE2
     197.  00:40F2                      ; Set the slot passed in A
     198.  00:40F2                      ; at page 2 in the Z80 address space
     199.  00:40F2                      ; A: Format FxxxSSPP
     200.  00:40F2                      ; ----------------------------
     201.  00:40F2                      
     202.  00:40F2                      setslotpage2:
     203.  00:40F2  F3                  	di
     204.  00:40F3  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     205.  00:40F4  DB A8               	in		a,(0A8h)
     206.  00:40F6  07 07 07 07         [4]	RLCA
     207.  00:40FA  E6 FC               	and		0xFC
     208.  00:40FC  57                  	ld		d,a					; D = Primary slot value
     209.  00:40FD  78                  	ld		a,b
     210.  00:40FE  E6 03               	and		3
     211.  00:4100  B2                  	or		d
     212.  00:4101  0F 0F 0F 0F         [4]	RRCA
     213.  00:4105  57                  	ld		d,a		; D = Final Value for primary slot
     214.  00:4106  78                  	ld		a,b		; Check if expanded
     215.  00:4107  CB 7F               	bit		7,a
     216.  00:4109  28 2A               	jr		z,1f	; Not Expanded
     217.  00:410B                      	mainslot_setup	4
     217.  00:410B  E6 03             >  and  3
     217.  00:410D  0F 0F             > [2] rrca
     217.  00:410F  E6 C0             >  and  0xC0
     217.  00:4111  4F                >  ld  c,a
     217.  00:4112  7A                >  ld  a,d
     217.  00:4113  E6 3F             >  and  0x3F
     217.  00:4115  B1                >  or  c
     217.  00:4116  4F                >  ld  c,a
     217.  00:4117                    > 
     217.  00:4117  78                >  ld  a,b
     217.  00:4118  E6 0C             >  and  0x0C
     217.  00:411A  0F 0F             > [2] rrca
     217.  00:411C  E6 03             >  and  3
     217.  00:411E  47                >  ld  b,a
     217.  00:411F  79                >  ld  a,c
     217.  00:4120  D3 A8             >  out  (0A8h),a
     217.  00:4122  3A FF FF          >  ld  a,(0FFFFh)
     217.  00:4125  2F                >  cpl
     217.  00:4126                    >  if (n<=4)
     217.  00:4126  07 07 07 07       > [n] RLCA
     217.  00:412A                    >  else
     217.  00:412A                    ~ [8-n] RRCA
     217.  00:412A                    ~  endif
     217.  00:412A  E6 FC             >  and  0xFC
     217.  00:412C  B0                >  or  b
     217.  00:412D                    >  if (n<=4)
     217.  00:412D  0F 0F 0F 0F       > [n] RRCA
     217.  00:4131                    >  else
     217.  00:4131                    ~ [8-n] RLCA
     217.  00:4131                    ~  endif
     217.  00:4131  32 FF FF          >  ld  (0FFFFh),a
     217.  00:4134  47                >  ld  b,a
     218.  00:4135  7A                  1:	ld		a,d				; A = Final value
     219.  00:4136  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     220.  00:4138  C9                  	ret
     221.  00:4139                      	
     222.  00:4139                      ; ---------------------------
     223.  00:4139                      ; SETSLOTPAGE3
     224.  00:4139                      ; Set the slot passed in A
     225.  00:4139                      ; at page 3 in the Z80 address space
     226.  00:4139                      ; A: Format FxxxSSPP
     227.  00:4139                      ; ----------------------------
     228.  00:4139                      	
     229.  00:4139                      setslotpage3:
     230.  00:4139  F3                  	di
     231.  00:413A  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     232.  00:413B  DB A8               	in		a,(0A8h)
     233.  00:413D  07 07               [2]	RLCA
     234.  00:413F  E6 FC               	and		0xFC
     235.  00:4141  57                  	ld		d,a					; D = Primary slot value
     236.  00:4142  78                  	ld		a,b
     237.  00:4143  E6 03               	and		3
     238.  00:4145  B2                  	or		d
     239.  00:4146  0F 0F               [2]	RRCA	
     240.  00:4148  57                  	ld		d,a		; D = Final Value for primary slot
     241.  00:4149  78                  	ld		a,b		; Check if expanded
     242.  00:414A  CB 7F               	bit		7,a
     243.  00:414C  28 26               	jr		z,1f	; Not Expanded
     244.  00:414E                      	mainslot_setup	2
     244.  00:414E  E6 03             >  and  3
     244.  00:4150  0F 0F             > [2] rrca
     244.  00:4152  E6 C0             >  and  0xC0
     244.  00:4154  4F                >  ld  c,a
     244.  00:4155  7A                >  ld  a,d
     244.  00:4156  E6 3F             >  and  0x3F
     244.  00:4158  B1                >  or  c
     244.  00:4159  4F                >  ld  c,a
     244.  00:415A                    > 
     244.  00:415A  78                >  ld  a,b
     244.  00:415B  E6 0C             >  and  0x0C
     244.  00:415D  0F 0F             > [2] rrca
     244.  00:415F  E6 03             >  and  3
     244.  00:4161  47                >  ld  b,a
     244.  00:4162  79                >  ld  a,c
     244.  00:4163  D3 A8             >  out  (0A8h),a
     244.  00:4165  3A FF FF          >  ld  a,(0FFFFh)
     244.  00:4168  2F                >  cpl
     244.  00:4169                    >  if (n<=4)
     244.  00:4169  07 07             > [n] RLCA
     244.  00:416B                    >  else
     244.  00:416B                    ~ [8-n] RRCA
     244.  00:416B                    ~  endif
     244.  00:416B  E6 FC             >  and  0xFC
     244.  00:416D  B0                >  or  b
     244.  00:416E                    >  if (n<=4)
     244.  00:416E  0F 0F             > [n] RRCA
     244.  00:4170                    >  else
     244.  00:4170                    ~ [8-n] RLCA
     244.  00:4170                    ~  endif
     244.  00:4170  32 FF FF          >  ld  (0FFFFh),a
     244.  00:4173  47                >  ld  b,a
     245.  00:4174  7A                  1:	ld		a,d				; A = Final value
     246.  00:4175  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     247.  00:4177  C9                  	ret
     248.  00:4178                      
     249.  00:4178                      	
      38   00:4178                      		include vdpio.asm
       1.  00:4178                      
       2.  00:4178                             
       3.  00:4178                      ;-------------------------------------
       4.  00:4178                      _cls:		
       5.  00:4178  0E 00               		ld		c,0
       6.  00:417A  51                  		ld		d,c
       7.  00:417B  59                  		ld		e,c
       8.  00:417C  F3                  		di
       9.  00:417D  CD A5 41            		call	_vdpsetvramwr
      10.  00:4180  41                  		ld		b,c
      11.  00:4181  1E 01               		ld		e,1
      12.  00:4183  AF                  1:		xor		a
      13.  00:4184  D3 98               		out		(0x98),a
      14.  00:4186  ED A1                       cpi
      15.  00:4188  EA 83 41                    jp   	pe,1b
      16.  00:418B  1D                  		dec	e
      17.  00:418C  C2 83 41            		jp		nz,1b
      18.  00:418F  C9                  		ret
      19.  00:4190                      _cls0:
      20.  00:4190  0E 00               		ld		c,0
      21.  00:4192  51                  		ld		d,c
      22.  00:4193  59                  		ld		e,c
      23.  00:4194  F3                  		di
      24.  00:4195  CD A5 41            		call	_vdpsetvramwr
      25.  00:4198  FB                  		ei
      26.  00:4199  01 00 B0            		ld		bc,mapHeight*16*256
      27.  00:419C  AF                  		xor		a
      28.  00:419D  D3 98               1:		out		(0x98),a
      29.  00:419F  ED A1                       cpi
      30.  00:41A1  EA 9D 41                    jp   	pe,1b
      31.  00:41A4  C9                  		ret
      32.  00:41A5                      		
      33.  00:41A5                      ;-------------------------------------
      34.  00:41A5                      		
      35.  00:41A5  (00:0099)           vdpport1 equ 0x99
      36.  00:41A5  (00:009A)           vdpport2 equ 0x9A
      37.  00:41A5                      
      38.  00:41A5                      ; levelcolors:
      39.  00:41A5                      	;  incbin "palette.bin"
      40.  00:41A5                      
      41.  00:41A5                      ; _SetPalet:   
      42.  00:41A5                      		; di
      43.  00:41A5                      		; xor a 			;Set pointer to zero.
      44.  00:41A5                      		; out (vdpport1),a        
      45.  00:41A5                      		; ld  a,16 | 010000000B
      46.  00:41A5                      		; out (vdpport1),a
      47.  00:41A5                      
      48.  00:41A5                      		; ld  hl,levelcolors
      49.  00:41A5                      		; ld bc,vdpport2+32*256
      50.  00:41A5                      		; otir
      51.  00:41A5                      		; ei
      52.  00:41A5                      		; ret
      53.  00:41A5                      
      54.  00:41A5                      ;Set VDP for writing at address CDE (17-bit) 
      55.  00:41A5                      
      56.  00:41A5                      _vdpsetvramwr:
      57.  00:41A5  79                  		ld a,c
      58.  00:41A6                      _vdpsetvramwr2:
      59.  00:41A6                      ;Set VDP for writing at address ADE (17-bit) ;
      60.  00:41A6  CB 02               		rlc d
      61.  00:41A8  17                  		rla
      62.  00:41A9  CB 02               		rlc d
      63.  00:41AB  17                  		rla
      64.  00:41AC  CB 3A               		srl d ; primo shift, il secondo dopo la out
      65.  00:41AE                      
      66.  00:41AE  D3 99               		out (0x99),a ;set bits 14-16
      67.  00:41B0  3E 8E               		ld a,14+128
      68.  00:41B2  D3 99               		out (0x99),a
      69.  00:41B4                      
      70.  00:41B4  CB 3A               		srl d ; secondo shift.     
      71.  00:41B6                      _vdpsetvramwr14
      72.  00:41B6  7B                  		ld a,e ;set bits 0-7
      73.  00:41B7  D3 99               		out (0x99),a
      74.  00:41B9  7A                  		ld a,d ;set bits 8-13
      75.  00:41BA  F6 40               		or 0x40 ; + write access
      76.  00:41BC  D3 99               		out (0x99),a
      77.  00:41BE  C9                  		ret
      78.  00:41BF                      	
      79.  00:41BF                      ;Set VDP port #98 to start reading at address CDE (17-bit) ;
      80.  00:41BF                      
      81.  00:41BF                      _vdpsetvramrd:
      82.  00:41BF  79                  		ld a,c
      83.  00:41C0                      ;Set VDP port #98 to start reading at address ADE (17-bit) ;
      84.  00:41C0  CB 02               		rlc d
      85.  00:41C2  17                  		rla
      86.  00:41C3  CB 02               		rlc d
      87.  00:41C5  17                  		rla
      88.  00:41C6  CB 3A               		srl d 			; primo shift, il secondo dopo la out
      89.  00:41C8                      
      90.  00:41C8  D3 99               		out (0x99),a 	; set bits 14-16
      91.  00:41CA  3E 8E               		ld a,14+128
      92.  00:41CC  D3 99               		out (0x99),a
      93.  00:41CE                      
      94.  00:41CE  CB 3A               		srl d 	; secondo shift.            
      95.  00:41D0  7B                  		ld a,e 	; set bits 0-7
      96.  00:41D1  D3 99               		out (0x99),a
      97.  00:41D3  7A                  		ld a,d 	; set bits 8-13
      98.  00:41D4  E6 3F               		and 0x3F
      99.  00:41D6  D3 99               		out (0x99),a
     100.  00:41D8  C9                  		ret
     101.  00:41D9                      
     102.  00:41D9                      ;Display page E in screen 5
     103.  00:41D9                      _setpage:
     104.  00:41D9  7B                  	ld a,e
     105.  00:41DA  87 87 87 87 87      [5]	add a,a ;x32
     106.  00:41DF  F6 1F               	or	 00011111B
     107.  00:41E1  F3                  	di
     108.  00:41E2  D3 99               	out (0x99),a
     109.  00:41E4  3E 82               	ld a,2+128
     110.  00:41E6  D3 99               	out (0x99),a
     111.  00:41E8  FB                  	ei            
     112.  00:41E9  C9                  	ret
     113.  00:41EA                      
     114.  00:41EA  (00:005F)           chgmod        equ     0x005f      ;change graphic mode
     115.  00:41EA  (00:000C)           RDSLT         equ     0x000c      ;read address HL in slot A
     116.  00:41EA  (00:0156)           KILBUF        equ     0x0156      ;clear keyboard buffer
     117.  00:41EA                      
     118.  00:41EA                      set_scr:
     119.  00:41EA                      	
     120.  00:41EA                      	// sprites 16x16
     121.  00:41EA  3A E0 F3            	ld		a,(RG1SAV)
     122.  00:41ED  F6 02               	or		00000010B
     123.  00:41EF  32 E0 F3            	ld		(RG1SAV),a
     124.  00:41F2                      
     125.  00:41F2                      	// enable sprites + TP
     126.  00:41F2  3A E7 FF            	ld		a,(RG8SAV)
     127.  00:41F5                      	; or		00100010B
     128.  00:41F5  F6 20               	or		00100000B
     129.  00:41F7  32 E7 FF            	ld		(RG8SAV),a
     130.  00:41FA                      		
     131.  00:41FA                      	// Set @50Hz (only PAL is supported)
     132.  00:41FA  3A 02 C0            	ld	a,(SEL_NTSC)
     133.  00:41FD  A7                  	and 	a
     134.  00:41FE  20 07               	jr		nz,1f
     135.  00:4200                      	
     136.  00:4200  3A E8 FF            	ld		a,(RG9SAV)		
     137.  00:4203  F6 02               	or		00000010B		; PAL
     138.  00:4205  18 05               	jr	2f
     139.  00:4207                      1:		
     140.  00:4207  3A E8 FF            	ld		a,(RG9SAV)		
     141.  00:420A  E6 FD               	and		11111101B		; NTSC 
     142.  00:420C  32 E8 FF            2:	ld		(RG9SAV),a
     143.  00:420F                      
     144.  00:420F  3E 08               	ld  	a,8
     145.  00:4211  CD 5F 00            	call	chgmod
     146.  00:4214                      
     147.  00:4214  3A E8 FF            	ld		a,(RG9SAV)		
     148.  00:4217  E6 7F               	and		01111111B		; 192 lines	
     149.  00:4219  32 E8 FF            	ld		(RG9SAV),a
     150.  00:421C  D3 99               	out		(0x99),a
     151.  00:421E  3E 89               	ld		a,9+128
     152.  00:4220  D3 99               	out		(0x99),a
     153.  00:4222                      	
     154.  00:4222                      	// border color
     155.  00:4222  AF                  	xor		a
     156.  00:4223  32 E6 F3            	ld		(RG7SAV),a
     157.  00:4226  D3 99               	out		(0x99),a
     158.  00:4228  3E 87               	ld		a,7+128
     159.  00:422A  D3 99               	out		(0x99),a
     160.  00:422C  C9                  	ret
     161.  00:422D                      
     162.  00:422D                      
     163.  00:422D                      _waitvdp:
     164.  00:422D  3E 02               	ld a,2
     165.  00:422F  D3 99               	out (0x99),a
     166.  00:4231  3E 8F               	ld a, 128+15
     167.  00:4233  D3 99               	out (0x99),a
     168.  00:4235  DB 99               1:  in	a,(0x99)
     169.  00:4237  0F                  	rrca
     170.  00:4238  DA 35 42            	jp c,1b
     171.  00:423B                      
     172.  00:423B  C9                  	ret
     173.  00:423C                      
     174.  00:423C                      ; .inf:
     175.  00:423C                      	; ld	a,r			; random colour
     176.  00:423C                      	; out		(0x99),a
     177.  00:423C                      	; ld		a,7+128
     178.  00:423C                      	; out		(0x99),a
     179.  00:423C                      	; jp	1b
     180.  00:423C                      	
      39   00:423C                      		include isr.asm
       1.  00:423C                      
       2.  00:423C                      
       3.  00:423C                      _fake_isr
       4.  00:423C  F5                  		push	af
       5.  00:423D                      		
       6.  00:423D                      		; ld	a,(noscroll)
       7.  00:423D                      		; or	a
       8.  00:423D                      		; jr	z,1f
       9.  00:423D                      		
      10.  00:423D  E5                  		push   hl         
      11.  00:423E  D5                  		push   de         
      12.  00:423F  C5                  		push   bc         
      13.  00:4240  D9                  		exx               
      14.  00:4241  08                  		ex     af,af'     
      15.  00:4242  E5                  		push   hl         
      16.  00:4243  D5                  		push   de         
      17.  00:4244  C5                  		push   bc         
      18.  00:4245  F5                  		push   af         
      19.  00:4246  FD E5               		push   iy         
      20.  00:4248  DD E5               		push   ix         
      21.  00:424A                      
      22.  00:424A  3E E0               		ld		a,11100000B
      23.  00:424C  D3 99               		out		(0x99),a
      24.  00:424E  3E 87               		ld		a,7+128
      25.  00:4250  D3 99               		out		(0x99),a
      26.  00:4252                      
      27.  00:4252  CD E6 42            		call	hfsm
      28.  00:4255  CD 85 42            		call	xfsm
      29.  00:4258                      		
      30.  00:4258  2A 9E FC            		ld	hl,(_jiffy)
      31.  00:425B  23                  		inc	hl
      32.  00:425C  22 9E FC            		ld	(_jiffy),hl
      33.  00:425F  3E 0F               		ld	a,15
      34.  00:4261  A5                  		and	l
      35.  00:4262  32 04 C0            		ld	(_xoffset),a
      36.  00:4265                      		
      37.  00:4265  AF                  		xor		a
      38.  00:4266  D3 99               		out		(0x99),a
      39.  00:4268  3E 87               		ld		a,7+128
      40.  00:426A  D3 99               		out		(0x99),a
      41.  00:426C                      		
      42.  00:426C  DD E1               		pop    ix         
      43.  00:426E  FD E1               		pop    iy         
      44.  00:4270  F1                  		pop    af         
      45.  00:4271  C1                  		pop    bc         
      46.  00:4272  D1                  		pop    de         
      47.  00:4273  E1                  		pop    hl         
      48.  00:4274  08                  		ex     af,af'     
      49.  00:4275  D9                  		exx               
      50.  00:4276  C1                  		pop    bc         
      51.  00:4277  D1                  		pop    de         
      52.  00:4278  E1                  		pop    hl         
      53.  00:4279                      
      54.  00:4279                      1:		
      55.  00:4279  AF                  		xor	a 			; read S#0
      56.  00:427A  D3 99               		out (0x99),a
      57.  00:427C  3E 8F               		ld a,128+15
      58.  00:427E  D3 99               		out (0x99),a
      59.  00:4280  DB 99               		in	a,(0x99)
      60.  00:4282  F1                  		pop	af
      61.  00:4283  FB                  		ei
      62.  00:4284  C9                  		ret
      63.  00:4285                      
      64.  00:4285                      
      65.  00:4285                      ; _isrinit:
      66.  00:4285                      		; di
      67.  00:4285                      		; ld	hl,0x0038
      68.  00:4285                      		; ld	(hl),0xC3
      69.  00:4285                      		; inc	hl
      70.  00:4285                      		; ld	(hl),low _scroll
      71.  00:4285                      		; inc	hl
      72.  00:4285                      		; ld	(hl),high _scroll
      73.  00:4285                      
      74.  00:4285                      ; ; set interrupt line
      75.  00:4285                      		; LD    A,YSIZE-1
      76.  00:4285                      		; out (0x99),a
      77.  00:4285                      		; LD    A,19+128
      78.  00:4285                      		; out (0x99),a
      79.  00:4285                      	
      80.  00:4285                      ; ; enable line interrupt
      81.  00:4285                      		; LD    A,(RG0SAV)
      82.  00:4285                      		; OR    00010000B
      83.  00:4285                      		; LD    (RG0SAV),A
      84.  00:4285                      		; out (0x99),a
      85.  00:4285                      		; LD    A,0+128
      86.  00:4285                      		; out (0x99),a
      87.  00:4285                      		; ei
      88.  00:4285                      		; ret
      89.  00:4285                      	
      90.  00:4285                      ; _intreset:
      91.  00:4285                      		; di
      92.  00:4285                      		; ld	hl,0x0038
      93.  00:4285                      		; ld	(hl),0xC3
      94.  00:4285                      		; inc	hl
      95.  00:4285                      		; ld	(hl),low _fake_isr
      96.  00:4285                      		; inc	hl
      97.  00:4285                      		; ld	(hl),high _fake_isr
      98.  00:4285                      
      99.  00:4285                      ; ; disable line interrupt		
     100.  00:4285                      		; LD    A,(RG0SAV)
     101.  00:4285                      		; and    11101111B
     102.  00:4285                      		; LD    (RG0SAV),A
     103.  00:4285                      		; out (0x99),a
     104.  00:4285                      		; LD    A,0+128
     105.  00:4285                      		; out (0x99),a
     106.  00:4285                      		; ei
     107.  00:4285                      		; ret
     108.  00:4285                      	
     109.  00:4285                      ; ;;;;;;;;;;;;;;;;;;;;;;
     110.  00:4285                      ; ; actual ISR handler
     111.  00:4285                      ; ;;;;;;;;;;;;;;;;;;;;;;
     112.  00:4285                      
     113.  00:4285                      ; _scroll:
     114.  00:4285                      		; push	af
     115.  00:4285                      		
     116.  00:4285                      		; ld a,1 			; read S#1
     117.  00:4285                      		; out (0x99),a
     118.  00:4285                      		; ld a,128+15
     119.  00:4285                      		; out (0x99),a
     120.  00:4285                      		 
     121.  00:4285                      		; in	a,(0x99)
     122.  00:4285                      		; rra
     123.  00:4285                      		; jp	c,lint	
     124.  00:4285                      
     125.  00:4285                      		; xor	a 			; read S#0
     126.  00:4285                      		; out (0x99),a
     127.  00:4285                      		; ld a,128+15
     128.  00:4285                      		; out (0x99),a
     129.  00:4285                      		 
     130.  00:4285                      		; in	a,(0x99)
     131.  00:4285                      		; rlca
     132.  00:4285                      		; jp	c,vblank
     133.  00:4285                      		
     134.  00:4285                      		; pop	af			; none of them (?)
     135.  00:4285                      		; ei
     136.  00:4285                      		; ret
     137.  00:4285                      	
     138.  00:4285                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
     139.  00:4285                      ; ; manage score bar at YSIZE
     140.  00:4285                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
     141.  00:4285                      ; waitHBLANK
     142.  00:4285                      		; ld a,2 				; read S#2
     143.  00:4285                      		; out (0x99),a
     144.  00:4285                      		; ld a,128+15
     145.  00:4285                      		; out (0x99),a		; poll for HBLANK
     146.  00:4285                      		 
     147.  00:4285                      ; ; 1:	in	a,(0x99)		; we are in HBLANK already, so wait until end of HBLANK
     148.  00:4285                      ; ; 		and	0x20
     149.  00:4285                      ; ; 		jp	nz,1b			
     150.  00:4285                      
     151.  00:4285                      ; 2:		in	a,(0x99)		; wait until end of the active area
     152.  00:4285                      		; and	0x20
     153.  00:4285                      		; jp	z,2b
     154.  00:4285                      		; ret
     155.  00:4285                      	
     156.  00:4285                      ; lint:	
     157.  00:4285                      		; ; call	waitHBLANK
     158.  00:4285                      		; ; now we are at the start of HBLANK
     159.  00:4285                      	
     160.  00:4285                      		; ; ld	a,(RG1SAV)
     161.  00:4285                      		; ; and	010111111B			; disable screen
     162.  00:4285                      		; ; ld	(RG1SAV),a
     163.  00:4285                      		; ; out	(0x99),a
     164.  00:4285                      		; ; ld	a,1+128
     165.  00:4285                      		; ; out	(0x99),a
     166.  00:4285                      
     167.  00:4285                      
     168.  00:4285                      		; ld a,00011111B		; 0XX11111B
     169.  00:4285                      		; out (0x99),a
     170.  00:4285                      		; ld a,2+128			; R#2 
     171.  00:4285                      		; out (0x99),a		; score bar in page 0
     172.  00:4285                      
     173.  00:4285                      		; LD    A,mapHeight*16-(YSIZE-2)	; SCROLL DOWN
     174.  00:4285                      		; out (0x99),a
     175.  00:4285                      		; LD    A,23+128
     176.  00:4285                      		; out (0x99),a
     177.  00:4285                      
     178.  00:4285                      		; xor		a
     179.  00:4285                      		; out	(099h),a
     180.  00:4285                      		; ld	a,18+128
     181.  00:4285                      		; out	(099h),a		; set adjust 0,0
     182.  00:4285                      
     183.  00:4285                      
     184.  00:4285                      		; ld	a,(RG8SAV)
     185.  00:4285                      		; or	000000010B		; disable sprites
     186.  00:4285                      		; ld	(RG8SAV),a
     187.  00:4285                      		; out	(0x99),a
     188.  00:4285                      		; ld	a,8+128
     189.  00:4285                      		; out	(0x99),a
     190.  00:4285                      
     191.  00:4285                      		; ; call	waitHBLANK
     192.  00:4285                      		
     193.  00:4285                      		; ; ld	a,(RG1SAV)
     194.  00:4285                      		; ; or 	01000010B		; enable screen
     195.  00:4285                      		; ; ld	(RG1SAV),a
     196.  00:4285                      		; ; out	(0x99),a
     197.  00:4285                      		; ; ld	a,1+128
     198.  00:4285                      		; ; out	(0x99),a
     199.  00:4285                      	
     200.  00:4285                      		; push   hl         
     201.  00:4285                      		; push   de         
     202.  00:4285                      		; push   bc         
     203.  00:4285                      		; exx               
     204.  00:4285                      		; ex     af,af'     
     205.  00:4285                      		; push   hl         
     206.  00:4285                      		; push   de         
     207.  00:4285                      		; push   bc         
     208.  00:4285                      		; push   af         
     209.  00:4285                      		; push   iy         
     210.  00:4285                      		; push   ix         
     211.  00:4285                      
     212.  00:4285                      		
     213.  00:4285                      		; ld	hl,.exit
     214.  00:4285                      		; push	hl
     215.  00:4285                      		; ld		a,(dxmap)
     216.  00:4285                      		; rlc a
     217.  00:4285                      
     218.  00:4285                      		; jp	nc,_blank_line_lft		; >0 == dx
     219.  00:4285                      		; jp	 c,_blank_line_rgt		; <0 == sx
     220.  00:4285                      ; 1:		pop	hl
     221.  00:4285                      ; .exit:
     222.  00:4285                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     223.  00:4285                      		; ; ld		a,00001000B
     224.  00:4285                      		; ; out		(0x99),a
     225.  00:4285                      		; ; ld		a,7+128
     226.  00:4285                      		; ; out		(0x99),a
     227.  00:4285                      		
     228.  00:4285                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     229.  00:4285                      		; call	test_star
     230.  00:4285                      
     231.  00:4285                      		; xor		a
     232.  00:4285                      		; out		(0x99),a
     233.  00:4285                      		; ld		a,7+128
     234.  00:4285                      		; out		(0x99),a
     235.  00:4285                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     236.  00:4285                      		
     237.  00:4285                      		; pop    ix         
     238.  00:4285                      		; pop    iy         
     239.  00:4285                      		; pop    af         
     240.  00:4285                      		; pop    bc         
     241.  00:4285                      		; pop    de         
     242.  00:4285                      		; pop    hl         
     243.  00:4285                      		; ex     af,af'     
     244.  00:4285                      		; exx               
     245.  00:4285                      		; pop    bc         
     246.  00:4285                      		; pop    de         
     247.  00:4285                      		; pop    hl         
     248.  00:4285                      
     249.  00:4285                      		; pop		af
     250.  00:4285                      		; ei
     251.  00:4285                      		; ret
     252.  00:4285                      
     253.  00:4285                      ; ;-------------------------------------		
     254.  00:4285                      
     255.  00:4285                      ; border_color	equ 	0;	00100101B
     256.  00:4285                      		
     257.  00:4285                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
     258.  00:4285                      ; ;   manage normal vblank routine
     259.  00:4285                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
     260.  00:4285                      
     261.  00:4285                      ; vblank:
     262.  00:4285                      		; call	activate_window	
     263.  00:4285                      
     264.  00:4285                      		; push   hl         
     265.  00:4285                      		; push   de         
     266.  00:4285                      		; push   bc         
     267.  00:4285                      		; exx               
     268.  00:4285                      		; ex     af,af'     
     269.  00:4285                      		; push   hl         
     270.  00:4285                      		; push   de         
     271.  00:4285                      		; push   bc         
     272.  00:4285                      		; push   af         
     273.  00:4285                      		; push   iy         
     274.  00:4285                      		; push   ix         
     275.  00:4285                      
     276.  00:4285                      		; ; ld	a,00011100B		; red
     277.  00:4285                      		; ; out		(0x99),a
     278.  00:4285                      		; ; ld		a,7+128
     279.  00:4285                      		; ; out		(0x99),a
     280.  00:4285                      
     281.  00:4285                      		; call	changedir
     282.  00:4285                      				
     283.  00:4285                      		; ld	hl,(_jiffy)
     284.  00:4285                      		; inc	hl
     285.  00:4285                      		; ld	(_jiffy),hl
     286.  00:4285                      				
     287.  00:4285                      		; ; ld	a,00011100B		; red
     288.  00:4285                      		; ; out	(0x99),a
     289.  00:4285                      		; ; ld	a,7+128
     290.  00:4285                      		; ; out	(0x99),a
     291.  00:4285                      		
     292.  00:4285                      
     293.  00:4285                      		; ; xor		a		; black
     294.  00:4285                      		; ; out	(0x99),a
     295.  00:4285                      		; ; ld	a,7+128
     296.  00:4285                      		; ; out	(0x99),a
     297.  00:4285                      	
     298.  00:4285                      		; pop    ix         
     299.  00:4285                      		; pop    iy         
     300.  00:4285                      		; pop    af         
     301.  00:4285                      		; pop    bc         
     302.  00:4285                      		; pop    de         
     303.  00:4285                      		; pop    hl         
     304.  00:4285                      		; ex     af,af'     
     305.  00:4285                      		; exx               
     306.  00:4285                      		; pop    bc         
     307.  00:4285                      		; pop    de         
     308.  00:4285                      		; pop    hl         
     309.  00:4285                      
     310.  00:4285                      		; pop		af
     311.  00:4285                      		; ei
     312.  00:4285                      		; ret
     313.  00:4285                      ; ;-------------------------------------
     314.  00:4285                      ; ;-------------------------------------
     315.  00:4285                      
     316.  00:4285                      ; _blank_line_lft:
     317.  00:4285                      		; ; ld	a,00000111B		; blue
     318.  00:4285                      		; ; out	(0x99),a
     319.  00:4285                      		; ; ld	a,7+128
     320.  00:4285                      		; ; out	(0x99),a
     321.  00:4285                      
     322.  00:4285                      		; ld	e,0
     323.  00:4285                      		; call	blank_line
     324.  00:4285                      
     325.  00:4285                      		
     326.  00:4285                      		
     327.  00:4285                      		; ; xor	a
     328.  00:4285                      		; ; out	(0x99),a
     329.  00:4285                      		; ; ld	a,7+128
     330.  00:4285                      		; ; out	(0x99),a
     331.  00:4285                      		; ret
     332.  00:4285                      
     333.  00:4285                      ; ;-------------------------------------	
     334.  00:4285                      
     335.  00:4285                      ; _blank_line_rgt
     336.  00:4285                      		; ; ld	a,00000111B		; blue
     337.  00:4285                      		; ; out	(0x99),a
     338.  00:4285                      		; ; ld	a,7+128
     339.  00:4285                      		; ; out	(0x99),a
     340.  00:4285                      
     341.  00:4285                      		; ld	e,240
     342.  00:4285                      		; call	blank_line
     343.  00:4285                      
     344.  00:4285                      		; ; xor	a
     345.  00:4285                      		; ; out	(0x99),a
     346.  00:4285                      		; ; ld	a,7+128
     347.  00:4285                      		; ; out	(0x99),a
     348.  00:4285                      		; ret
     349.  00:4285                      		
     350.  00:4285                      ; ;-------------------------------------	
     351.  00:4285                      		
     352.  00:4285                      ; inc_xoffset
     353.  00:4285                      		; call	plot_line_rgt1
     354.  00:4285                      		; call	.movex
     355.  00:4285                      		; call	plot_line_rgt2
     356.  00:4285                      				
     357.  00:4285                      		; ; ld	a,00000010B		; blue
     358.  00:4285                      		; ; out	(0x99),a
     359.  00:4285                      		; ; ld	a,7+128
     360.  00:4285                      		; ; out	(0x99),a
     361.  00:4285                      		
     362.  00:4285                      		; jp		newxmap
     363.  00:4285                      		
     364.  00:4285                      ; .movex
     365.  00:4285                      		; ld		a,(_xoffset)
     366.  00:4285                      		; and		a
     367.  00:4285                      		; jr		nz,.case1_15
     368.  00:4285                      ; .case0
     369.  00:4285                      		; ld 		a,(_displaypage)
     370.  00:4285                      		; xor		1
     371.  00:4285                      		; ld 		d,a
     372.  00:4285                      		; ld		e,240
     373.  00:4285                      		; jp		clrboder
     374.  00:4285                      		
     375.  00:4285                      ; .case1_15
     376.  00:4285                      ; [4]		add		a,a
     377.  00:4285                      		; ld		e,a
     378.  00:4285                      		; sub		a,16
     379.  00:4285                      		; ld		d,a
     380.  00:4285                      		; jp		move_block
     381.  00:4285                      
     382.  00:4285                      
     383.  00:4285                      ; ;-------------------------------------	
     384.  00:4285                      	
     385.  00:4285                      ; dec_xoffset
     386.  00:4285                      		; call	plot_line_lft1
     387.  00:4285                      		; call	.movex
     388.  00:4285                      		; call	plot_line_lft2
     389.  00:4285                      				
     390.  00:4285                      		; ; ld	a,00000011B		; blue
     391.  00:4285                      		; ; out	(0x99),a
     392.  00:4285                      		; ; ld	a,7+128
     393.  00:4285                      		; ; out	(0x99),a
     394.  00:4285                      
     395.  00:4285                      		; jp		newxmap
     396.  00:4285                      		
     397.  00:4285                      ; .movex
     398.  00:4285                      		; ld		a,(_xoffset)
     399.  00:4285                      		; cp	15
     400.  00:4285                      		; jr		nz,.case0_14
     401.  00:4285                      ; .case15
     402.  00:4285                      		; ld 		a,(_displaypage)
     403.  00:4285                      		; xor		1
     404.  00:4285                      		; ld 		d,a
     405.  00:4285                      		; ld		e,0
     406.  00:4285                      		; jp		clrboder
     407.  00:4285                      		
     408.  00:4285                      ; .case0_14
     409.  00:4285                      ; [4]		add		a,a
     410.  00:4285                      		; ld		e,a
     411.  00:4285                      		; add		a,16
     412.  00:4285                      		; ld		d,a
     413.  00:4285                      		; jp		move_block
     414.  00:4285                      
     415.  00:4285                      
     416.  00:4285                      ; ;-------------------------------------
     417.  00:4285                      ; newxmap
     418.  00:4285                      		; call 	plot_enemy		
     419.  00:4285                      		; call	color_enemy
     420.  00:4285                      
     421.  00:4285                      		; ld		hl,(_xmapx4)
     422.  00:4285                      		; ld		a,(dxmap)
     423.  00:4285                      		; ld		e,a
     424.  00:4285                      		; add 	a,a
     425.  00:4285                      		; sbc 	a,a
     426.  00:4285                      		; ld		d,a
     427.  00:4285                      		; add 	hl,de
     428.  00:4285                      		; ld		(_xmapx4),hl
     429.  00:4285                      		; repeat 2
     430.  00:4285                      		; sra		h
     431.  00:4285                      		; rr  	l
     432.  00:4285                      		; endrepeat
     433.  00:4285                      		; ld		(xmap),hl
     434.  00:4285                      		; ld 		a,l
     435.  00:4285                      		; and		15
     436.  00:4285                      		; ld		(_xoffset),a
     437.  00:4285                      		; repeat 4
     438.  00:4285                      		; sra		h
     439.  00:4285                      		; rr  	l
     440.  00:4285                      		; endrepeat
     441.  00:4285                      		; ld 		a,l
     442.  00:4285                      		; and		1
     443.  00:4285                      		; ld		(_displaypage),a
     444.  00:4285                      		; ld		de,_levelmap
     445.  00:4285                      		; add		hl,de
     446.  00:4285                      		; ld		(_levelmap_pos),hl
     447.  00:4285                      		; ret
     448.  00:4285                      		
     449.  00:4285                      ; ;-------------------------------------
     450.  00:4285                      
     451.  00:4285                      ; activate_window	
     452.  00:4285                      		; ld	a,(_displaypage)
     453.  00:4285                      ; [5]		add a,a 			; x32
     454.  00:4285                      		; or	00011111B
     455.  00:4285                      		; out (0x99),a
     456.  00:4285                      		; ld a,2+128
     457.  00:4285                      		; out (0x99),a
     458.  00:4285                      		
     459.  00:4285                      		; LD    A,(_yoffset)		; SCROLL DOWN
     460.  00:4285                      		; out (0x99),a
     461.  00:4285                      		; add    A,YSIZE-1
     462.  00:4285                      		; ld		l,a
     463.  00:4285                      		; LD    A,23+128
     464.  00:4285                      		; out (0x99),a
     465.  00:4285                      
     466.  00:4285                      		; ld    a,l
     467.  00:4285                      		; out (0x99),a			; set interrupt line
     468.  00:4285                      		; LD    A,19+128
     469.  00:4285                      		; out (0x99),a
     470.  00:4285                      		
     471.  00:4285                      		; ld	a,(_xoffset)		; set R#18 only if not scrolling
     472.  00:4285                      		; add	a,-8
     473.  00:4285                      		; and	0Fh
     474.  00:4285                      		; out	(099h),a
     475.  00:4285                      		; ld	a,18+128
     476.  00:4285                      		; out	(099h),a
     477.  00:4285                      
     478.  00:4285                      		; ld	a,(RG8SAV)		; enable sprites
     479.  00:4285                      		; and	11111101B
     480.  00:4285                      		; ld	(RG8SAV),a
     481.  00:4285                      		; out	(0x99),a
     482.  00:4285                      		; ld	a,8+128
     483.  00:4285                      		; out	(0x99),a
     484.  00:4285                      
     485.  00:4285                      		; ret
     486.  00:4285                      			
     487.  00:4285                      ; ;-------------------------------------
     488.  00:4285                      	
     489.  00:4285                      ; changedir:
     490.  00:4285                      		; ld		a,(_dxmap)
     491.  00:4285                      		; and		128
     492.  00:4285                      		; ld		b,a
     493.  00:4285                      		; inc		hl
     494.  00:4285                      		; ld		a,(dxmap)		; dxmap
     495.  00:4285                      		; ld		c,a
     496.  00:4285                      		; and		128
     497.  00:4285                      		; xor		b				; compare signs
     498.  00:4285                      		; jp		z,nodirchange
     499.  00:4285                      		; ld		(_dxchng),a		; a<>0
     500.  00:4285                      		; bit		7,c
     501.  00:4285                      		; jr		z,.right
     502.  00:4285                      ; .left
     503.  00:4285                      		; call	plot_line_lft1
     504.  00:4285                      		; ld 		a,(_displaypage)
     505.  00:4285                      		; xor		1
     506.  00:4285                      		; ld 		d,a
     507.  00:4285                      		; ld		e,0
     508.  00:4285                      		; call	clrboder
     509.  00:4285                      		; call	plot_line_lft2
     510.  00:4285                      		; jp		newxmap
     511.  00:4285                      
     512.  00:4285                      ; .right
     513.  00:4285                      		; call	plot_line_rgt1
     514.  00:4285                      		; ld 		a,(_displaypage)
     515.  00:4285                      		; xor		1
     516.  00:4285                      		; ld 		d,a
     517.  00:4285                      		; ld		e,240
     518.  00:4285                      		; call	clrboder
     519.  00:4285                      		; call	plot_line_rgt2
     520.  00:4285                      		; jp		newxmap
     521.  00:4285                      
     522.  00:4285                      ; nodirchange:
     523.  00:4285                      		; ld		a,(_dxchng)
     524.  00:4285                      		; and		a
     525.  00:4285                      		; jr		nz,1f
     526.  00:4285                      		; bit		7,c
     527.  00:4285                      		; jp		z,inc_xoffset
     528.  00:4285                      		; jp		dec_xoffset
     529.  00:4285                      	
     530.  00:4285                      ; 1:		xor	a
     531.  00:4285                      		; ld		(_dxchng),a
     532.  00:4285                      		; bit		7,c
     533.  00:4285                      		; jp		z,.right
     534.  00:4285                      ; .left
     535.  00:4285                      		; call	plot_line_lft1
     536.  00:4285                      		; ld		e,240-16
     537.  00:4285                      		; ld		d,240
     538.  00:4285                      		; call	move_block
     539.  00:4285                      		; call	plot_line_lft2
     540.  00:4285                      		; jp		newxmap
     541.  00:4285                      
     542.  00:4285                      ; .right
     543.  00:4285                      		; call	plot_line_rgt1
     544.  00:4285                      		; ld		e,16
     545.  00:4285                      		; ld		d,0
     546.  00:4285                      		; call	move_block
     547.  00:4285                      		; call	plot_line_rgt2
     548.  00:4285                      		; jp		newxmap
     549.  00:4285                      
     550.  00:4285                      ; ;-------------------------------------
      40   00:4285                      		include fsmscroll.asm
       1.  00:4285                      
       2.  00:4285                      
       3.  00:4285                      xfsm:
       4.  00:4285  3A 04 C0            		ld		a,(_xoffset)		; set R#18 only if not scrolling
       5.  00:4288                      
       6.  00:4288  C6 F8               		add		a,-8
       7.  00:428A  E6 0F               		and		0Fh
       8.  00:428C  D3 99               		out		(099h),a
       9.  00:428E  3E 92               		ld		a,18+128
      10.  00:4290  D3 99               		out		(099h),a
      11.  00:4292                      		
      12.  00:4292  3A 04 C0            		ld		a,(_xoffset)
      13.  00:4295  A7                  		and		a
      14.  00:4296  28 3A               		jr		z,x0
      15.  00:4298  FE 0F               		cp		15
      16.  00:429A  28 1B               		jr		z,x15
      17.  00:429C                      x1_14:
      18.  00:429C  3A 04 C0            		ld		a,(_xoffset)
      19.  00:429F  3D                  		dec		a
      20.  00:42A0  87 87 87 87         [4]		add		a,a
      21.  00:42A4  57                  		ld		d,a
      22.  00:42A5  C6 10               		add		a,16
      23.  00:42A7  5F                  		ld		e,a
      24.  00:42A8  CD 01 43            		call	move_slice
      25.  00:42AB                      
      26.  00:42AB  3A 04 C0            		ld		a,(_xoffset)
      27.  00:42AE  DD 6F               		ld		ixl,a
      28.  00:42B0  C6 F0               		add		a,240
      29.  00:42B2  5F                  		ld		e,a
      30.  00:42B3  CD 69 43            		call	_brdrs
      31.  00:42B6  C9                  		ret
      32.  00:42B7                      		
      33.  00:42B7                      x15:
      34.  00:42B7  3A 04 C0            		ld		a,(_xoffset)
      35.  00:42BA  DD 6F               		ld		ixl,a
      36.  00:42BC  C6 F0               		add		a,240
      37.  00:42BE  5F                  		ld		e,a
      38.  00:42BF  CD 69 43            		call	_brdrs
      39.  00:42C2                      
      40.  00:42C2  3A 04 C0            		ld		a,(_xoffset)
      41.  00:42C5  3D                  		dec		a
      42.  00:42C6  87 87 87 87         [4]		add		a,a
      43.  00:42CA  57                  		ld		d,a
      44.  00:42CB  C6 10               		add		a,16
      45.  00:42CD  5F                  		ld		e,a
      46.  00:42CE  CD 01 43            		call	move_slice
      47.  00:42D1  C9                  		ret
      48.  00:42D2                      		
      49.  00:42D2                      x0:
      50.  00:42D2  DD 2E 00            		ld		ixl,0
      51.  00:42D5  1E F0               		ld		e,240
      52.  00:42D7  CD 69 43            		call	_brdrs
      53.  00:42DA                      
      54.  00:42DA  3A 03 C0            		ld		a,(_displaypage)
      55.  00:42DD  EE 01               		xor		1
      56.  00:42DF  57                  		ld		d,a
      57.  00:42E0  1E F0               		ld		e,240
      58.  00:42E2  CD 3C 43            		call 	clear_slice
      59.  00:42E5  C9                  		ret
      60.  00:42E6                      
      61.  00:42E6                      hfsm:
      62.  00:42E6  3A 9E FC            		ld		a,(_jiffy)
      63.  00:42E9  E6 10               		and		16
      64.  00:42EB  87                  		add 	a,a 		;x32
      65.  00:42EC  F6 1F               		or		 00011111B
      66.  00:42EE  D3 99               		out 	(0x99),a
      67.  00:42F0  3E 82               		ld 		a,2+128
      68.  00:42F2  D3 99               		out 	(0x99),a
      69.  00:42F4  3A 9E FC            		ld		a,(_jiffy)
      70.  00:42F7  E6 10               		and		16
      71.  00:42F9  28 02               		jr		z,1f
      72.  00:42FB  3E 01               		ld		a,1
      73.  00:42FD  32 03 C0            1:		ld		(_displaypage),a		
      74.  00:4300  C9                  		ret
      75.  00:4301                      		
      41   00:4301                      		include vdpcmds.asm
       1.  00:4301                      
       2.  00:4301                      
       3.  00:4301                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       4.  00:4301                      ; input
       5.  00:4301                      ; e = sx	from not _displaypage
       6.  00:4301                      ; d = dx	to _displaypage
       7.  00:4301                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       8.  00:4301                      
       9.  00:4301                      move_slice:
      10.  00:4301  3E 20               		ld 		a, 32
      11.  00:4303  D3 99               		out 	(0x99),a
      12.  00:4305  3E 91               		ld 		a, 17+128
      13.  00:4307  D3 99               		out 	(0x99),a
      14.  00:4309                      
      15.  00:4309  0E 9B               		ld 		c, 0x9B
      16.  00:430B                      		
      17.  00:430B                      		; call _waitvdp				; no need ATM
      18.  00:430B                      		
      19.  00:430B  ED 59               		out		(c), e 				; sx
      20.  00:430D  AF                  		xor a
      21.  00:430E  D3 9B               		out		(0x9B), a 			; sx (high)
      22.  00:4310                      		
      23.  00:4310  D3 9B               		out		(0x9B), a 			; sy
      24.  00:4312  3A 03 C0            		ld 		a,(_displaypage)	; source page
      25.  00:4315  D3 9B               		out 	(0x9B), a 			; sy 	(high-> page 0 or 1)
      26.  00:4317                      
      27.  00:4317  ED 51               		out 	(c), d 				; dx
      28.  00:4319  AF                  		xor a
      29.  00:431A  D3 9B               		out 	(0x9B), a			; dx (high)
      30.  00:431C                      		
      31.  00:431C  D3 9B               		out 	(0x9B), a 			; dy
      32.  00:431E  3A 03 C0            		ld 		a,(_displaypage)	; destination page
      33.  00:4321  EE 01               		xor	1				
      34.  00:4323  D3 9B               		out 	(0x9B), a			; dy 	(high-> page 0 or 1)
      35.  00:4325                      
      36.  00:4325  3E 10               		ld 		a,16 				; block size
      37.  00:4327  D3 9B               		out 	(0x9B), a
      38.  00:4329  AF                  		xor a
      39.  00:432A  D3 9B               		out 	(0x9B), a	
      40.  00:432C  3E A0               		ld		a,10*16				; mapHeight*16
      41.  00:432E  D3 9B               		out 	(0x9B), a			; y block size
      42.  00:4330  AF                  		xor		a
      43.  00:4331  D3 9B               		out 	(0x9B), a
      44.  00:4333  D3 9B               		out 	(0x9B), a
      45.  00:4335  D3 9B               		out 	(0x9B), a
      46.  00:4337                      
      47.  00:4337  3E D0               		ld		a,11010000B
      48.  00:4339  D3 9B               		out 	(0x9B), a			; command HMMM
      49.  00:433B  C9                  		ret
      50.  00:433C                      		
      51.  00:433C                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      52.  00:433C                      ; input
      53.  00:433C                      ; d = page
      54.  00:433C                      ; e = dx
      55.  00:433C                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      56.  00:433C                      		
      57.  00:433C                      clear_slice:
      58.  00:433C  3E 24               		ld 		a, 36
      59.  00:433E  D3 99               		out 	(0x99),a
      60.  00:4340  3E 91               		ld 		a, 17+128
      61.  00:4342  D3 99               		out 	(0x99),a
      62.  00:4344                      		
      63.  00:4344                      		; call _waitvdp
      64.  00:4344                      		
      65.  00:4344  7B                  		ld		a,e
      66.  00:4345  D3 9B               		out 	(0x9B), a 			; dx
      67.  00:4347  AF                  		xor		a
      68.  00:4348  D3 9B               		out 	(0x9B), a			; dx (high)
      69.  00:434A                      		
      70.  00:434A  D3 9B               		out 	(0x9B), a			; dy
      71.  00:434C  7A                  		ld 		a,d					; destination page
      72.  00:434D  D3 9B               		out 	(0x9B), a			; dy (high-> page 0 or 1)
      73.  00:434F                      		
      74.  00:434F  3E 10               		ld 		a,16
      75.  00:4351  D3 9B               		out 	(0x9B), a			; x block size
      76.  00:4353  AF                  		xor	a
      77.  00:4354  D3 9B               		out 	(0x9B), a
      78.  00:4356                      
      79.  00:4356  3E A0               		ld		a,10*16				; mapHeight*16
      80.  00:4358  D3 9B               		out 	(0x9B), a			; y block size
      81.  00:435A  AF                  		xor a
      82.  00:435B  D3 9B               		out 	(0x9B), a
      83.  00:435D                      
      84.  00:435D  3E 1C               		ld	a,00011100B
      85.  00:435F  D3 9B               		out 	(0x9B), a			; border_color
      86.  00:4361  AF                  		xor a
      87.  00:4362  D3 9B               		out 	(0x9B), a
      88.  00:4364                      
      89.  00:4364  3E C0               		ld		a,11000000B
      90.  00:4366  D3 9B               		out 	(0x9B), a			; command HMMV
      91.  00:4368  C9                  		ret
      42   00:4369                      		include brdrs.asm
       1.  00:4369                      
       2.  00:4369                      _brdrs:
       3.  00:4369  21 74 45            		ld	hl,_levelmap
       4.  00:436C                      
       5.  00:436C  0E 98               		ld	c,0x98
       6.  00:436E                      				
       7.  00:436E  3A 03 C0            		ld	a,(_displaypage)
       8.  00:4371  87 87               [2] 	add a,a
       9.  00:4373  D3 99               		out (0x99),a 	; set bits 14-16
      10.  00:4375  3E 8E               		ld a,14+128
      11.  00:4377  D3 99               		out (0x99),a
      12.  00:4379                      
      13.  00:4379  16 40               		ld	d,0x40		; write access
      14.  00:437B  CD A3 43            		call	plot_col64
      15.  00:437E                      
      16.  00:437E  3A 03 C0            		ld	a,(_displaypage)
      17.  00:4381  87 87               [2] 	add a,a
      18.  00:4383  F6 01               		or	1
      19.  00:4385  D3 99               		out (0x99),a 	; set bits 14-16
      20.  00:4387  3E 8E               		ld a,14+128
      21.  00:4389  D3 99               		out (0x99),a
      22.  00:438B                      
      23.  00:438B  16 40               		ld	d,0x40		; write access	
      24.  00:438D  CD A3 43            		call	plot_col64
      25.  00:4390                      		
      26.  00:4390  3A 03 C0            		ld	a,(_displaypage)
      27.  00:4393  87 87               [2] 	add a,a
      28.  00:4395  F6 02               		or	2
      29.  00:4397  D3 99               		out (0x99),a 	; set bits 14-16
      30.  00:4399  3E 8E               		ld a,14+128
      31.  00:439B  D3 99               		out (0x99),a
      32.  00:439D                      
      33.  00:439D  16 40               		ld	d,0x40		; write access	
      34.  00:439F  CD AF 43            		call	plot_col32
      35.  00:43A2                      				
      36.  00:43A2  C9                  		ret
      37.  00:43A3                      
      38.  00:43A3                      plot_col64:
      39.  00:43A3                      	; hl -> tile in the map
      40.  00:43A3                      		repeat 2
      41.  00:43A3                    < 		push	hl
      42.  00:43A3                    < 		call	plot_col16
      43.  00:43A3                    < 		pop		hl
      44.  00:43A3                    < 	; inc h			; next line in the map
      45.  00:43A3                    < 		inc l
      46.  00:43A3                    < 		endrepeat
      46.  00:43A3  E5 CD BC 43 E1 2C E5 CD BC 43 E1 2C 
      47.  00:43AF                      plot_col32:		
      48.  00:43AF                      		repeat 2
      49.  00:43AF                    < 		push	hl
      50.  00:43AF                    < 		call	plot_col16
      51.  00:43AF                    < 		pop		hl
      52.  00:43AF                    < 	; inc h			; next line in the map
      53.  00:43AF                    < 		inc l
      54.  00:43AF                    < 		endrepeat
      54.  00:43AF  E5 CD BC 43 E1 2C E5 CD BC 43 E1 2C 
      55.  00:43BB  C9                  		ret
      56.  00:43BC                      
      57.  00:43BC                      
      58.  00:43BC                      plot_col16:
      59.  00:43BC  7E                  		ld	a,(hl)
      60.  00:43BD  07 07 07            [3]		rlca
      61.  00:43C0  E6 07               		and	00000111B
      62.  00:43C2  C6 03               		add	a,:_tiles0
      63.  00:43C4  32 00 B0            		ld	(_kBank4),a
      64.  00:43C7  7E                  		ld	a,(hl)
      65.  00:43C8  E6 1F               		and	00011111B
      66.  00:43CA  C6 A0               		add	a,high _tiles0
      67.  00:43CC  67                  		ld	h,a
      68.  00:43CD  3A 04 C0            		ld	a,(_xoffset)
      69.  00:43D0  87 87 87 87         [4]		add	a,a
      70.  00:43D4  6F                  		ld	l,a
      71.  00:43D5                      
      72.  00:43D5                      	; hl -> tile column in the tileset
      73.  00:43D5                      	
      74.  00:43D5                      		repeat 16
      75.  00:43D5                    < 		ld	a,ixl 		;set bits 0-7
      76.  00:43D5                    < 		out (0x99),a
      77.  00:43D5                    < 		ld a,d 			;set bits 8-13
      78.  00:43D5                    < 		out (0x99),a
      79.  00:43D5                    < 		ld	a,e
      80.  00:43D5                    < 		out	(0x98),a
      81.  00:43D5                    < 		ld a,e 			;set bits 0-7
      82.  00:43D5                    < 		out (0x99),a
      83.  00:43D5                    < 		ld a,d 			;set bits 8-13
      84.  00:43D5                    < 		out (0x99),a
      85.  00:43D5                    < 		inc	d
      86.  00:43D5                    < 		outi			; 18
      87.  00:43D5                    < 		endrepeat
      87.  00:43D5  DD 7D D3 99 7A D3 99 7B D3 98 7B D3 99 7A D3 99 
      87.  00:43E5  14 ED A3 DD 7D D3 99 7A D3 99 7B D3 98 7B D3 99 
      87.  00:43F5  7A D3 99 14 ED A3 DD 7D D3 99 7A D3 99 7B D3 98 
      87.  00:4405  7B D3 99 7A D3 99 14 ED A3 DD 7D D3 99 7A D3 99 
      87.  00:4415  7B D3 98 7B D3 99 7A D3 99 14 ED A3 DD 7D D3 99 
      87.  00:4425  7A D3 99 7B D3 98 7B D3 99 7A D3 99 14 ED A3 DD 
      87.  00:4435  7D D3 99 7A D3 99 7B D3 98 7B D3 99 7A D3 99 14 
      87.  00:4445  ED A3 DD 7D D3 99 7A D3 99 7B D3 98 7B D3 99 7A 
      87.  00:4455  D3 99 14 ED A3 DD 7D D3 99 7A D3 99 7B D3 98 7B 
      87.  00:4465  D3 99 7A D3 99 14 ED A3 DD 7D D3 99 7A D3 99 7B 
      87.  00:4475  D3 98 7B D3 99 7A D3 99 14 ED A3 DD 7D D3 99 7A 
      87.  00:4485  D3 99 7B D3 98 7B D3 99 7A D3 99 14 ED A3 DD 7D 
      87.  00:4495  D3 99 7A D3 99 7B D3 98 7B D3 99 7A D3 99 14 ED 
      87.  00:44A5  A3 DD 7D D3 99 7A D3 99 7B D3 98 7B D3 99 7A D3 
      87.  00:44B5  99 14 ED A3 DD 7D D3 99 7A D3 99 7B D3 98 7B D3 
      87.  00:44C5  99 7A D3 99 14 ED A3 DD 7D D3 99 7A D3 99 7B D3 
      87.  00:44D5  98 7B D3 99 7A D3 99 14 ED A3 DD 7D D3 99 7A D3 
      87.  00:44E5  99 7B D3 98 7B D3 99 7A D3 99 14 ED A3 DD 7D D3 
      87.  00:44F5  99 7A D3 99 7B D3 98 7B D3 99 7A D3 99 14 ED A3 
      88.  00:4505  C9                  		ret
      89.  00:4506                      		
      43   00:4506                      		
      44   00:4506                      		include checkkbd.asm
       1.  00:4506                      
       2.  00:4506                      ; // Line Bit_7 Bit_6 Bit_5 Bit_4 Bit_3 Bit_2 Bit_1 Bit_0
       3.  00:4506                      ; // 0 "7" "6" "5" "4" "3" "2" "1" "0"
       4.  00:4506                      ; // 1 ";" "]" "[" "\" "=" "-" "9" "8"
       5.  00:4506                      ; // 2 "B" "A" ??? "/" "." "," "'" "`"
       6.  00:4506                      ; // 3 "J" "I" "H" "G" "F" "E" "D" "C"
       7.  00:4506                      ; // 4 "R" "Q" "P" "O" "N" "M" "L" "K"
       8.  00:4506                      ; // 5 "Z" "Y" "X" "W" "V" "U" "T" "S"
       9.  00:4506                      ; // 6 F3 F2 F1 CODE CAP GRAPH CTRL SHIFT
      10.  00:4506                      ; // 7 RET SEL BS STOP TAB ESC F5 F4
      11.  00:4506                      ; // 8 RIGHT DOWN UP LEFT DEL INS HOME SPACE
      12.  00:4506                      
      13.  00:4506                      checkkbd:
      14.  00:4506  F3                  		di
      15.  00:4507  DB AA               		in	a,(0aah)
      16.  00:4509  E6 F0               		and 011110000B			; upper 4 bits contain info to preserve
      17.  00:450B  B3                  		or	e
      18.  00:450C  D3 AA               		out (0aah),a
      19.  00:450E  DB A9               		in	a,(0a9h)
      20.  00:4510  6F                  		ld	l,a
      21.  00:4511  FB                  		ei
      22.  00:4512  C9                  		ret
      45   00:4513                      		
      46   00:4513                      ;-------------------------------------
      47   00:4513                      ; Entry point
      48   00:4513                      ;-------------------------------------
      49   00:4513                      START:
      50   00:4513  AF                  		xor	a
      51   00:4514                      		; dec	a
      52   00:4514  32 02 C0            		ld	(SEL_NTSC),a
      53   00:4517  CD EA 41            		call	set_scr
      54   00:451A  F3                  		di
      55   00:451B                      		
      56   00:451B                      ;-------------------------------------
      57   00:451B                      ;   Power-up routine for 32K ROM
      58   00:451B                      ;   set pages and sub slot
      59   00:451B                      ;-------------------------------------
      60   00:451B  CD 10 40                    call    search_slot
      61   00:451E  CD 2F 40                    call    search_slotram
      62   00:4521  CD 61 40            		call	setrompage2
      63   00:4524  CD 5B 40            		call	setrampage0
      64   00:4527                      
      65   00:4527                      
      66   00:4527  AF                  		xor	a
      67   00:4528  32 00 50            		ld	(_kBank1),a
      68   00:452B  3C                  		inc	a
      69   00:452C  32 00 70            		ld	(_kBank2),a
      70   00:452F  3C                  		inc	a
      71   00:4530  32 00 90            		ld	(_kBank3),a
      72   00:4533                      
      73   00:4533  CD 78 41            		call	_cls
      74   00:4536                      		
      75   00:4536                      		;--- initialise ISR in RAM
      76   00:4536                      		
      77   00:4536  F3                  		di
      78   00:4537  21 38 00            		ld	hl,0x0038
      79   00:453A  36 C3               		ld	(hl),0xC3
      80   00:453C  23                  		inc	hl
      81   00:453D  36 3C               		ld	(hl),low _fake_isr
      82   00:453F  23                  		inc	hl
      83   00:4540  36 42               		ld	(hl),high _fake_isr
      84   00:4542                      
      85   00:4542  21 00 00            		ld	hl,0
      86   00:4545  22 9E FC            		ld	(_jiffy),hl		
      87   00:4548  AF                  		xor	a
      88   00:4549  32 03 C0            		ld	(_displaypage),a		
      89   00:454C  32 04 C0            		ld	(_xoffset),a
      90   00:454F                      		
      91   00:454F  FB                  		ei
      92   00:4550  76                  1:		halt
      93   00:4551  3A 04 C0            		ld	a,(_xoffset)		
      94   00:4554  A7                  		and	a
      95   00:4555  C2 50 45            		jp	nz,1b
      96   00:4558                      		
      97   00:4558  1E 08               		ld	e,8
      98   00:455A  CD 06 45            		call	checkkbd
      99   00:455D  E6 01               		and	1				; space
     100   00:455F  CC 65 45            		call	z,PAL_ntsc
     101   00:4562  C3 50 45            		jp	1b
     102   00:4565                      		
     103   00:4565                      PAL_ntsc
     104   00:4565  3A E8 FF            		ld		a,(RG9SAV)		
     105   00:4568  EE 02               		xor		00000010B		; PAL or NTSC 
     106   00:456A  32 E8 FF            		ld		(RG9SAV),a
     107   00:456D  D3 99               		out		(0x99),a
     108   00:456F  3E 89               		ld		a,9+128
     109   00:4571  D3 99               		out		(0x99),a
     110   00:4573  C9                  		ret
     111   00:4574                      		
     112   00:4574                      _levelmap
     113   00:4574                      		repeat 16
     114   00:4574                    < 		db	0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
     115   00:4574                    < 		endrepeat
     115   00:4574  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 
     115   00:4584  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 
     115   00:4594  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 
     115   00:45A4  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 
     115   00:45B4  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 
     115   00:45C4  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 
     115   00:45D4  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 
     115   00:45E4  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 
     115   00:45F4  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 
     115   00:4604  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 
     115   00:4614  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 
     115   00:4624  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 
     115   00:4634  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 
     115   00:4644  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 
     115   00:4654  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 
     115   00:4664  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 
     116   00:4674                      		
     117   00:4674  (03)                		page 3
     118   03:A000                      _tiles0:
     119   03:A000                      		repeat 16
     120   03:A000                    < 		ds 256,255-@#
     121   03:A000  FF (256)          < 		endrepeat
     122   03:B000                      		; call	opening
     123   03:B000                      		
     124   03:B000                      
     125   03:B000                      		; call 	_hw_sprite_init
     126   03:B000                      
     127   03:B000                      		; ld		c,0
     128   03:B000                      		; ld		de,256*(mapHeight*16+3)
     129   03:B000                      		; call	_vdpsetvramwr
     130   03:B000                      
     131   03:B000                      		; ld		de, 256*:_scorebar+1
     132   03:B000                      		; call	outvram
     133   03:B000                      		
     134   03:B000                      		; ld		c,1
     135   03:B000                      		; ld		de,256*mapHeight*16
     136   03:B000                      		; call	_vdpsetvramwr
     137   03:B000                      
     138   03:B000                      		; ld		de, 256*:_animated+2
     139   03:B000                      		; call	outvram
     140   03:B000                      
     141   03:B000                      	
     142   03:B000                      		; ; ld	a,:demo_song
     143   03:B000                      		; ; setpage_a
     144   03:B000                      		
     145   03:B000                      		; ; ld	bc,	end_demo_song-musbuff
     146   03:B000                      		; ; ld	hl,	demo_song
     147   03:B000                      		; ; ld	de,	musbuff
     148   03:B000                      		; ; ldir
     149   03:B000                      			
     150   03:B000                      		; ; call	replay_init
     151   03:B000                      		; ; ld		hl,musbuff
     152   03:B000                      		; ; call	replay_loadsong
     153   03:B000                      
     154   03:B000                      
     155   03:B000                      		; ld		e,0
     156   03:B000                      		; call	_setpage
     157   03:B000                      				
     158   03:B000                      		; ld	a, :_level
     159   03:B000                      		; ld	(_kBank4),a
     160   03:B000                      		
     161   03:B000                      		; ld		hl,_level
     162   03:B000                      		; ld		de,_levelmap
     163   03:B000                      		; ld		bc,mapWidth*mapHeight
     164   03:B000                      		; ldir
     165   03:B000                      
     166   03:B000                      
     167   03:B000                      		; ; call	init_page0
     168   03:B000                      
     169   03:B000                      		; ld		a,0
     170   03:B000                      		; ld		(cur_level),a
     171   03:B000                      
     172   03:B000                      		; ei
     173   03:B000                      
     174   03:B000                      ; restart:
     175   03:B000                      		; call	_intreset
     176   03:B000                      
     177   03:B000                      		
     178   03:B000                      
     179   03:B000                      		; ld		a,1
     180   03:B000                      		; ld		(_displaypage),a		
     181   03:B000                      		; call 	_cls0
     182   03:B000                      		; ld		hl,_levelmap
     183   03:B000                      		; ld		(_levelmap_pos),hl
     184   03:B000                      		
     185   03:B000                      		; xor		a
     186   03:B000                      		; ld		h,a
     187   03:B000                      		; ld		l,a
     188   03:B000                      		; ld		(flip_flop),a
     189   03:B000                      		; ld		(god_mode),a
     190   03:B000                      		; ld		(_ymappos),a
     191   03:B000                      		; ld		(_xmappos),hl
     192   03:B000                      		
     193   03:B000                      		; ld		(_nframes),hl
     194   03:B000                      		; ld		(_mcdx),hl
     195   03:B000                      		; ld		(_mcframe),a
     196   03:B000                      		
     197   03:B000                      		; ld		(_yoffset),a		;  0 tutto su
     198   03:B000                      		; ld		(_xoffset),a		;  0 tutto su
     199   03:B000                      								
     200   03:B000                      		; ld		(aniframe),a
     201   03:B000                      		; ld		(anispeed),a
     202   03:B000                      		; ld		(ms_state),a
     203   03:B000                      		; inc 	a
     204   03:B000                      		; ld		(old_aniframe),a		; old_aniframe!=aniframe
     205   03:B000                      	
     206   03:B000                      		; ld		(dxmap),a		; moving right
     207   03:B000                      		; ld		(_dxmap),a		; moving right
     208   03:B000                      
     209   03:B000                      		; ld		(xmap),hl
     210   03:B000                      		; ld		(_xmapx4),hl
     211   03:B000                      		; ld		bc,xship_rel
     212   03:B000                      		; add 	hl,bc
     213   03:B000                      		; ld		(xship),hl
     214   03:B000                      		; ld		a,80
     215   03:B000                      		; ld		(yship),a
     216   03:B000                      
     217   03:B000                      		; call 	npc_init								
     218   03:B000                      		; call 	load_colors
     219   03:B000                      
     220   03:B000                      		; xor	a
     221   03:B000                      		; ld		(_kBank1),a
     222   03:B000                      		; inc	a
     223   03:B000                      		; ld		(_kBank2),a
     224   03:B000                      		; inc	a
     225   03:B000                      		; ld		(_kBank3),a
     226   03:B000                      		
     227   03:B000                      
     228   03:B000                      		; call	_isrinit
     229   03:B000                      
     230   03:B000                      ; main_loop: 
     231   03:B000                      				
     232   03:B000                      		; ld	hl,0
     233   03:B000                      		; ld	(_jiffy),hl
     234   03:B000                      
     235   03:B000                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     236   03:B000                      ; ; run ms FSM and place its sprites in the SAT in RAM
     237   03:B000                      		; call	ms_ctrl
     238   03:B000                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     239   03:B000                      ; ; test for game restart
     240   03:B000                      		; ld	a,(ms_state)
     241   03:B000                      		; cp	ms_reset
     242   03:B000                      		; jp	z,restart
     243   03:B000                      
     244   03:B000                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     245   03:B000                      ; ; place MS in the SAT and test for collision
     246   03:B000                      		; call	put_ms_sprt
     247   03:B000                      		; ld		a,(god_mode)
     248   03:B000                      		; and 	a
     249   03:B000                      		; ; call	z,test_obstacles
     250   03:B000                      
     251   03:B000                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     252   03:B000                      ; ; run NCPS FSM
     253   03:B000                      		; call	wave_timer
     254   03:B000                      		; call	npc_loop
     255   03:B000                      		; call	enemy_bullet_loop
     256   03:B000                      
     257   03:B000                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     258   03:B000                      ; ; run MS bullets FSM
     259   03:B000                      		; call	bullet_loop
     260   03:B000                      
     261   03:B000                      		; ; ld	a,00100101B			; random colour
     262   03:B000                      		; ; out		(0x99),a
     263   03:B000                      		; ; ld		a,7+128
     264   03:B000                      		; ; out		(0x99),a
     265   03:B000                      		
     266   03:B000                      		; ; call	_waitvdp
     267   03:B000                      
     268   03:B000                      		; ; ld	a,10100101B			; random colour
     269   03:B000                      		; ; out		(0x99),a
     270   03:B000                      		; ; ld		a,7+128
     271   03:B000                      		; ; out		(0x99),a
     272   03:B000                      				
     273   03:B000                      		; ld	a,(joystick)
     274   03:B000                      		; and	32
     275   03:B000                      		; ; call	z,_plot_distrucable
     276   03:B000                      
     277   03:B000                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     278   03:B000                      		; ; ld		a,3
     279   03:B000                      		; ; out		(0x99),a
     280   03:B000                      		; ; ld		a,7+128
     281   03:B000                      		; ; out		(0x99),a
     282   03:B000                      		
     283   03:B000                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     284   03:B000                      		; ; call	test_star
     285   03:B000                      
     286   03:B000                      		; ; xor		a
     287   03:B000                      		; ; out		(0x99),a
     288   03:B000                      		; ; ld		a,7+128
     289   03:B000                      		; ; out		(0x99),a
     290   03:B000                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     291   03:B000                      
     292   03:B000                      		
     293   03:B000                      ; 1:		ld	a,(_jiffy)		; wait for vblank (and not for linit)
     294   03:B000                      		; or	a
     295   03:B000                      		; jr	z,1b
     296   03:B000                      	
     297   03:B000                      		; ld	hl,(xmap)
     298   03:B000                      		; ld	bc,xship_rel
     299   03:B000                      		; add hl,bc
     300   03:B000                      		; ld	(xship),hl
     301   03:B000                      
     302   03:B000                      		; ld		a,(dxmap)
     303   03:B000                      		; ld		(_dxmap),a
     304   03:B000                      
     305   03:B000                      		; jp      main_loop
     306   03:B000                      
     307   03:B000                      ; ;-------------------------------------
     308   03:B000                      ; AFXPLAY:
     309   03:B000                      		; ret
     310   03:B000                      ; ;	include vuitpakker.asm
     311   03:B000                      	; include print.asm
     312   03:B000                      	; include plot_line.asm
     313   03:B000                      	; include plot_line2.asm
     314   03:B000                      	; include color_update.asm
     315   03:B000                      ; ms_bllts_col_win:
     316   03:B000                      	; include ms_bllts_frm_coll_wind.asm
     317   03:B000                      	; include	ms_bllts.asm
     318   03:B000                      		
     319   03:B000                      ; ;-------------------------------------
     320   03:B000                      
     321   03:B000                      	
     322   03:B000                      		; page 1
     323   03:B000                      
     324   03:B000                      		; include	ms_crtl.asm
     325   03:B000                      		; include	put_ms_sprt.asm
     326   03:B000                      		; include probe_level.asm				
     327   03:B000                      		; include opening.asm		
     328   03:B000                      ; outvram:
     329   03:B000                      ; 2:		ld	a,d
     330   03:B000                      		; ld	(_kBank4),a
     331   03:B000                      		; ld	hl,0xA000
     332   03:B000                      		; ld	bc,0x98
     333   03:B000                      		; ld	a,32
     334   03:B000                      ; 1:		otir
     335   03:B000                      		; dec	a
     336   03:B000                      		; jp	nz,1b
     337   03:B000                      		; inc	d
     338   03:B000                      		; dec	e
     339   03:B000                      		; jr	nz,2b
     340   03:B000                      		; ret
     341   03:B000                      		
     342   03:B000                      		; page 2
     343   03:B000                      	; ; include mainhero_LMMM.asm
     344   03:B000                      
     345   03:B000                      	
     346   03:B000                      		; page 3
     347   03:B000                      ; manta_color:
     348   03:B000                      		; incbin mship03_clr.bin
     349   03:B000                      ; ms_spt:
     350   03:B000                      		; incbin mship03_frm.bin
     351   03:B000                      		
     352   03:B000                      		; page 4
     353   03:B000                      ; _tiles0:
     354   03:B000                      		; incbin "tiles.bin",0x0000,0x2000
     355   03:B000                      		; page 5
     356   03:B000                      		; incbin "tiles.bin",0x2000,0x2000
     357   03:B000                      		; page 6
     358   03:B000                      		; incbin "tiles.bin",0x4000,0x2000
     359   03:B000                      		; page 7
     360   03:B000                      		; incbin "tiles.bin",0x6000,0x2000
     361   03:B000                      		; page 8
     362   03:B000                      		; incbin "tiles.bin",0x8000,0x2000
     363   03:B000                      		; page 9
     364   03:B000                      		; incbin "tiles.bin",0xA000,0x2000
     365   03:B000                      		; page 10
     366   03:B000                      		; incbin "tiles.bin",0xC000,0x2000
     367   03:B000                      		; page 11
     368   03:B000                      		; incbin "tiles.bin",0xE000;,0x2000
     369   03:B000                      
     370   03:B000                      		; page 12
     371   03:B000                      
     372   03:B000                      		; page 15
     373   03:B000                      ; _level:
     374   03:B000                      		; incbin "datamap.bin"
     375   03:B000                      	
     376   03:B000                      		; page 16
     377   03:B000                      ; _opening:
     378   03:B000                      		; incbin "opening.bin",0x0000,0x2000
     379   03:B000                      		; page 17
     380   03:B000                      		; incbin "opening.bin",0x2000,0x2000
     381   03:B000                      		; page 18
     382   03:B000                      		; incbin "opening.bin",0x4000,0x2000
     383   03:B000                      		; page 19
     384   03:B000                      		; incbin "opening.bin",0x6000,0x2000
     385   03:B000                      		; page 20
     386   03:B000                      		; incbin "opening.bin",0x8000,0x2000
     387   03:B000                      		; page 21
     388   03:B000                      		; incbin "opening.bin",0xA000,0x2000
     389   03:B000                      		; page 22
     390   03:B000                      		; incbin "opening.bin",0xC000;,0x2000
     391   03:B000                      		; page 23
     392   03:B000                      		; ; incbin "opening.bin",0xE000;,,0x2000
     393   03:B000                      	
     394   03:B000                      		; page 24
     395   03:B000                      ; _scorebar:	
     396   03:B000                      		; incbin scorebar.bin
     397   03:B000                      	
     398   03:B000                      		; page 25
     399   03:B000                      ; _animated:	
     400   03:B000                      		; incbin animated.bin,0x0000,0x2000
     401   03:B000                      		; page 26
     402   03:B000                      		; incbin animated.bin,0x2000,0x2000
     403   03:B000                      
     404   03:B000                      		; page 27
     405   03:B000                      ; sprtdata:
     406   03:B000                      		; incbin 	uridium_revA.bin,,16*32
     407   03:B000                      		; incbin 	enemies_frm.bin
     408   03:B000                      
     409   03:B000                      		; page 28
     410   03:B000                      ; color_base:
     411   03:B000                      		; repeat 4
     412   03:B000                      		; ds	16,8
     413   03:B000                      		; ds	16,10+64
     414   03:B000                      		; endrepeat
     415   03:B000                      		; repeat 4
     416   03:B000                      		; ds	16,8
     417   03:B000                      		; ds	16,10+64
     418   03:B000                      		; endrepeat
     419   03:B000                      
     420   03:B000                      		
     421   03:B000                      		; incbin 	enemies_clr.bin
     422   03:B000                      		
     423   03:B000                      ; FINISH:
     424   03:B000                      
     425   03:B000                      
     426   03:B000                      ; ;---------------------------------------------------------
     427   03:B000                      ; ; Variables
     428   03:B000                      ; ;---------------------------------------------------------
     429   03:B000                      	
     430   03:B000                      	
     431   03:B000  (C000)              	MAP 0xC000
     432   03:B000                      
     433   03:B000                      ; _levelmap:			#mapWidth*mapHeight
     434   03:B000                      
     435   03:B000  (03:C000)           slotvar				#1
     436   03:B000  (03:C001)           slotram				#1
     437   03:B000  (03:C002)           SEL_NTSC			#1
     438   03:B000                      
     439   03:B000                      ; joystick			#1
     440   03:B000                      
     441   03:B000                      ; _mcdivider			#1
     442   03:B000                      
     443   03:B000                      ; _mcx				#2	; relative with in the frame on the screen
     444   03:B000                      ; _mcy				#2
     445   03:B000                      
     446   03:B000                      ; _mclx				#2	; absolute with the level in ram
     447   03:B000                      ; _mcly				#2
     448   03:B000                      
     449   03:B000                      ; _mcframe			#1
     450   03:B000                      ; _mcstate			#1
     451   03:B000                      
     452   03:B000                      ; _mcdx				#2
     453   03:B000                      ; _mcdy				#2
     454   03:B000                      
     455   03:B000                      ; _mcprobe:			#1
     456   03:B000                      ; _mcprobeb:			#1
     457   03:B000                      
     458   03:B000                      ; _ticxframe			#1
     459   03:B000                      
     460   03:B000                      ; _buffer:			#16
     461   03:B000                      ; _fps:				#2
     462   03:B000                      ; _nframes:			#2
     463   03:B000                      ; _vbit16:			#2
     464   03:B000                      
     465   03:B000                      ; _ymappos:			#1
     466   03:B000                      ; _xmappos:			#2
     467   03:B000                      ; _levelmap_pos:		#2
     468   03:B000                      
     469   03:B000                      ; _shadowbuff:		#2
     470   03:B000                      
     471   03:B000  (03:C003)           _displaypage:		#1
     472   03:B000                      
     473   03:B000                      ; _mccolorchange:		#1
     474   03:B000  (03:C004)           _xoffset:			#1
     475   03:B000                      ; _yoffset:			#1
     476   03:B000                      
     477   03:B000                      ; __xoffset:			#1
     478   03:B000                      ; __r18:				#1
     479   03:B000                      
     480   03:B000                      ; randSeed:			#2
     481   03:B000                      ; cur_level:			#1
     482   03:B000                      ; wave_count:			#1
     483   03:B000                      ; landing_permission:	#1
     484   03:B000                      ; assault_wave_timer:	#2
     485   03:B000                      ; bullet_rate:		#1
     486   03:B000                      ; _dxchng:			#1		; <>0 if direction changes
     487   03:B000                      ; _dxmap:				#1		; previous dxmap
     488   03:B000                      ; dxmap:				#1
     489   03:B000                      ; xmap:				#2
     490   03:B000                      ; _xmapx4:			#2		; xmap x 4
     491   03:B000                      ; yship:				#1
     492   03:B000                      ; xship:				#2
     493   03:B000                      ; aniframe:			#1
     494   03:B000                      ; ms_state:			#1
     495   03:B000                      ; old_aniframe:		#1
     496   03:B000                      ; anispeed:			#1
     497   03:B000                      ; already_dead:		#1
     498   03:B000                      ; lives_bin:			#1
     499   03:B000                      
     500   03:B000                      ; god_mode:			#1
     501   03:B000                      ; visible_sprts:		#1
     502   03:B000                      ; flip_flop:			#1
     503   03:B000                      
     504   03:B000                      ; ram_sat:			#3*4
     505   03:B000                      
     506   03:B000                      	; struct enemy_data
     507   03:B000                      ; y				db	0
     508   03:B000                      ; x				dw	0
     509   03:B000                      ; xoff			db	0
     510   03:B000                      ; yoff			db	0
     511   03:B000                      ; xsize			db	0
     512   03:B000                      ; ysize			db	0
     513   03:B000                      ; status			db	0	; B7 = DWN/UP | B6 = RIGHT/LEFT | B5 = ok/wrong clr | B0 = Inactive/Active
     514   03:B000                      ; cntr			db	0
     515   03:B000                      ; kind			db	0
     516   03:B000                      ; frame			db	0
     517   03:B000                      ; color			db	0
     518   03:B000                      ; color2			db	0
     519   03:B000                      ; speed			dw	0
     520   03:B000                      	; ends
     521   03:B000                      	
     522   03:B000                      ; any_object:			#0
     523   03:B000                      ; ms_bullets:			#enemy_data*max_bullets
     524   03:B000                      ; enem_bullets:		#enemy_data*max_enem_bullets
     525   03:B000                      ; enemies:			#enemy_data*max_enem
     526   03:B000                      ; endram:				#1
     527   03:B000  (0000)              	ENDMAP

    LABELS
-------------------------------------------------
00:00005000   _kBank1
00:00007000   _kBank2
00:00009000   _kBank3
00:0000B000   _kBank4
00:0000F3DF X RG0SAV
00:0000F3E0   RG1SAV
00:0000F3E1 X RG2SAV
00:0000F3E2 X RG3SAV
00:0000F3E3 X RG4SAV
00:0000F3E4 X RG5SAV
00:0000F3E5 X RG6SAV
00:0000F3E6   RG7SAV
00:0000FFE7   RG8SAV
00:0000FFE8   RG9SAV
00:0000FFE9 X RG10SAV
00:0000FFEA X RG11SAV
00:0000FFEB X RG12SAV
00:0000FFEC X RG13SAV
00:0000FFED X RG14SAV
00:0000FFEE X RG15SAV
00:0000FFEF X RG16SAV
00:0000FFF0 X RG17SAV
00:0000FFF1 X RG18SAV
00:0000FFF2 X RG19SAV
00:0000FFF3 X RG20SAV
00:0000FFF4 X RG21SAV
00:0000FFF5 X RG22SAV
00:0000FFF7 X RG23SAV
00:0000FC9E   _jiffy
00:0000000C X max_enem
00:00000003 X max_enem_bullets
00:00000002 X max_bullets
00:00000004 X maxspeed
00:000000B4 X assault_wave_timer_preset
00:00000002 X enemy_bullet_speed
00:00000078 X xship_rel
00:00000100 X mapWidth
00:0000000B   mapHeight
00:000000A8 X YSIZE
00:00000024 X ENASLT
00:00000138   RSLREG
00:0000FCC1   EXPTBL
00:00004010   search_slot
00:0000402F   search_slotram
00:00004050   search_slotram0
00:00004055 X setrompage0
00:0000405B   setrampage0
00:00004061   setrompage2
00:00004067 X setrampage2
00:0000406D X setrompage3
00:00004073 X setrampage3
00:00004079 X recbios
00:0000407C   setslotpage0
00:000040B3 X setslotpage1
00:000040F2   setslotpage2
00:00004139   setslotpage3
00:00004178   _cls
00:00004190 X _cls0
00:00000099 X vdpport1
00:0000009A X vdpport2
00:000041A5   _vdpsetvramwr
00:000041A6 X _vdpsetvramwr2
00:000041B6 X _vdpsetvramwr14
00:000041BF X _vdpsetvramrd
00:000041D9 X _setpage
00:0000005F   chgmod
00:0000000C X RDSLT
00:00000156 X KILBUF
00:000041EA   set_scr
00:0000422D X _waitvdp
00:0000423C   _fake_isr
00:00004285   xfsm
00:0000429C X x1_14
00:000042B7   x15
00:000042D2   x0
00:000042E6   hfsm
00:00004301   move_slice
00:0000433C   clear_slice
00:00004369   _brdrs
00:000043A3   plot_col64
00:000043AF   plot_col32
00:000043BC   plot_col16
00:00004506   checkkbd
00:00004513   START
00:00004565   PAL_ntsc
00:00004574   _levelmap
03:0000A000   _tiles0
03:0000C000   slotvar
03:0000C001   slotram
03:0000C002   SEL_NTSC
03:0000C003   _displaypage
03:0000C004   _xoffset


 Output: main.out
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: *  Used: 00000000

    No output

 Output: urd2.rom
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: 00002000  Used: 00000674

   Address   Length Align   Label
   00004000    1652         search_slot
   00004674    6540       <empty>

 Page: 01
  Org: 00006000  Size: 00002000  Used: 00000000

   00006000    8192       <empty>

 Page: 02
  Org: 00008000  Size: 00002000  Used: 00000000

   00008000    8192       <empty>

 Page: 03
  Org: 0000A000  Size: 00002000  Used: 00001000

   Address   Length Align   Label
   0000A000    4096         _tiles0
   0000B000    4096       <empty>

 Page: 04
  Org: 0000A000  Size: 00002000  Used: 00000000

   0000A000    8192       <empty>

 Page: 05
  Org: 0000A000  Size: 00002000  Used: 00000000

   0000A000    8192       <empty>

 Page: 06
  Org: 0000A000  Size: 00002000  Used: 00000000

   0000A000    8192       <empty>

 Page: 07
  Org: 0000A000  Size: 00002000  Used: 00000000

   0000A000    8192       <empty>

 Page: 08
  Org: 0000A000  Size: 00002000  Used: 00000000

   0000A000    8192       <empty>

 Page: 09
  Org: 0000A000  Size: 00002000  Used: 00000000

   0000A000    8192       <empty>

 Page: 0A
  Org: 0000A000  Size: 00002000  Used: 00000000

   0000A000    8192       <empty>

 Page: 0B
  Org: 0000A000  Size: 00002000  Used: 00000000

   0000A000    8192       <empty>

 Page: 0C
  Org: 0000A000  Size: 00002000  Used: 00000000

   0000A000    8192       <empty>

 Page: 0D
  Org: 0000A000  Size: 00002000  Used: 00000000

   0000A000    8192       <empty>

 Page: 0E
  Org: 0000A000  Size: 00002000  Used: 00000000

   0000A000    8192       <empty>

 Page: 0F
  Org: 0000A000  Size: 00002000  Used: 00000000

   0000A000    8192       <empty>
