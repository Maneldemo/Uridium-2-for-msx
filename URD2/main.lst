Sjasm Z80 Assembler v0.42c - www.xl2s.tk             [2016.02.01 - 08:53:51]

main.asm
Errors: 0

       1   00:0000                      ;----------------------------------------------------------------------------
       2   00:0000                      ;
       3   00:0000                      ;----------------------------------------------------------------------------
       4   00:0000                      
       5   00:0000                              output "urd2.rom"
       6   00:0000                      
       7   00:0000                      		;	konami scc
       8   00:0000                      		
       9   00:0000  (00:5000)           _kBank1:	equ 05000h ;- 57FFh (5000h used)
      10   00:0000  (00:7000)           _kBank2: 	equ 07000h ;- 77FFh (7000h used)
      11   00:0000  (00:9000)           _kBank3: 	equ 09000h ;- 97FFh (9000h used)
      12   00:0000  (00:B000)           _kBank4: 	equ 0B000h ;- B7FFh (B000h used)
      13   00:0000                      
      14   00:0000                      
      15   00:0000                      
      16   00:0000                      		defpage	 0,0x4000, 0x2000		; page 0 main code 
      17   00:0000                      		defpage	 1,0x6000, 0x2000		; page 1 code 
      18   00:0000                      		defpage	 2,0x8000, 0x2000		; page 2 code  
      19   00:0000                      		defpage	 3,0xA000, 0x2000		; swapped data 
      20   00:0000                      		
      21   00:0000                      		defpage	 4..15					; 64KB of swapped data 
      22   00:0000                      
      23   00:0000                      
      24   00:0000                      
      25   00:0000                        		include "header.asm"			; only definitions
       1.  00:0000                      
       2.  00:0000                        // MSX 1 
       3.  00:0000  (00:F3DF)           RG0SAV  equ 0xF3DF  
       4.  00:0000  (00:F3E0)           RG1SAV  equ 0xF3E0  
       5.  00:0000  (00:F3E1)           RG2SAV  equ 0xF3E1
       6.  00:0000  (00:F3E2)           RG3SAV  equ 0xF3E2
       7.  00:0000  (00:F3E3)           RG4SAV  equ 0xF3E3
       8.  00:0000  (00:F3E4)           RG5SAV  equ 0xF3E4
       9.  00:0000  (00:F3E5)           RG6SAV  equ 0xF3E5
      10.  00:0000  (00:F3E6)           RG7SAV  equ 0xF3E6
      11.  00:0000                      // MSX 2
      12.  00:0000  (00:FFE7)           RG8SAV  equ 0xFFE7 
      13.  00:0000  (00:FFE8)           RG9SAV  equ 0xFFE8 
      14.  00:0000  (00:FFE9)           RG10SAV equ 0xFFE9 
      15.  00:0000  (00:FFEA)           RG11SAV equ 0xFFEA 
      16.  00:0000  (00:FFEB)           RG12SAV equ 0xFFEB 
      17.  00:0000  (00:FFEC)           RG13SAV equ 0xFFEC 
      18.  00:0000  (00:FFED)           RG14SAV equ 0xFFED 
      19.  00:0000  (00:FFEE)           RG15SAV equ 0xFFEE 
      20.  00:0000  (00:FFEF)           RG16SAV equ 0xFFEF 
      21.  00:0000  (00:FFF0)           RG17SAV equ 0xFFF0 
      22.  00:0000  (00:FFF1)           RG18SAV equ 0xFFF1 
      23.  00:0000  (00:FFF2)           RG19SAV equ 0xFFF2 
      24.  00:0000  (00:FFF3)           RG20SAV equ 0xFFF3 
      25.  00:0000  (00:FFF4)           RG21SAV equ 0xFFF4 
      26.  00:0000  (00:FFF5)           RG22SAV equ 0xFFF5 
      27.  00:0000  (00:FFF7)           RG23SAV equ 0xFFF7 
      28.  00:0000                      
      29.  00:0000  (00:FC9E)           _jiffy: equ 0xFC9E 
      30.  00:0000                      
      31.  00:0000                      	
      32.  00:0000                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      33.  00:0000                      
      34.  00:0000  (00:000C)           max_enem:					equ 12		; max 12
      35.  00:0000  (00:0003)           max_enem_bullets:			equ 3
      36.  00:0000  (00:0002)           max_bullets:				equ 2		; max number of enemies*2 + ms_bullets + enem_bullets + 3 for ms	<= 32 sprites
      37.  00:0000                      
      38.  00:0000  (00:0004)           maxspeed:					equ 4		; the actual speed is divided by 4
      39.  00:0000  (00:00B4)           assault_wave_timer_preset:	equ	3*60	; a wave each 3 seconds
      40.  00:0000  (00:0002)           enemy_bullet_speed:			equ	2	
      41.  00:0000  (00:0078)           xship_rel:					equ (128-8)
      42.  00:0000                      
      43.  00:0000  (00:0100)           mapWidth	equ	256
      44.  00:0000  (00:000A)           mapHeight	equ	10
      45.  00:0000  (00:00A0)           YSIZE		equ	10*16
      46.  00:0000                      
      47.  00:0000                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      48.  00:0000  (00:0001)           debug equ 1
      49.  00:0000                      
      50.  00:0000                      	macro setpage_a
      51.  00:0000                    < 		ld	(_kBank3),a
      52.  00:0000                    < 		inc	a
      53.  00:0000                    < 		ld	(_kBank4),a
      54.  00:0000                    < 	endmacro
      55.  00:0000                      	
      56.  00:0000                      	macro bdrclr n
      57.  00:0000                    < 		if debug
      58.  00:0000                    < 		ifdif	n,0	
      59.  00:0000                    < 			ld		a,n
      60.  00:0000                    < 		else
      61.  00:0000                    < 			xor	a
      62.  00:0000                    < 		endif
      63.  00:0000                    < 		out		(0x99),a
      64.  00:0000                    < 		ld		a,7+128
      65.  00:0000                    < 		out		(0x99),a	
      66.  00:0000                    < 		endif
      67.  00:0000                    < 	endmacro
      68.  00:0000                      	
      69.  00:0000                      	macro set_tile reg
      70.  00:0000                    < 		ld	a,reg
      71.  00:0000                    < [3]		rlca
      72.  00:0000                    < 		and	00000111B
      73.  00:0000                    < 		add	a,:_tiles0
      74.  00:0000                    < 		ld	(_kBank4),a		; select tile bank
      75.  00:0000                    < 
      76.  00:0000                    < 		ld	a,reg
      77.  00:0000                    < 		and	00011111B
      78.  00:0000                    < 		add	a,high _tiles0
      79.  00:0000                    < 	endmacro
      80.  00:0000                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
      26   00:0000                      		
      27   00:0000                      		
      28   00:0000                      		
      29   00:0000  (00)                		page 0
      30   00:4000                      		
      31   00:4000                              org 4000h
      32   00:4000                              dw  4241h,START,0,0,0,0,0,0
      32   00:4000  41 42 E5 48 00 00 00 00 00 00 00 00 00 00 00 00 
      33   00:4010                      
      34   00:4010                      	;-------------------------------------		
      35   00:4010                      
      36   00:4010                      
      37   00:4010                      		include rominit64.asm				
       1.  00:4010                      
       2.  00:4010                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       3.  00:4010                      ; set pages and subslot
       4.  00:4010                      ;
       5.  00:4010                      
       6.  00:4010                      
       7.  00:4010  (00:0024)           ENASLT:			equ		024h
       8.  00:4010  (00:0138)           RSLREG:			equ		0138h
       9.  00:4010  (00:FCC1)           EXPTBL:			equ		0FCC1h	; Bios Slot / Expansion Slot
      10.  00:4010                      
      11.  00:4010                      
      12.  00:4010                      ; ----------------------------
      13.  00:4010                      ; pre-set main slot for page 3
      14.  00:4010                      ; and set sub-slot for page 3
      15.  00:4010                      ; ----------------------------
      16.  00:4010                      	macro	mainslot_setup n
      17.  00:4010                    < 	and		3
      18.  00:4010                    < [2]	rrca
      19.  00:4010                    < 	and		0xC0
      20.  00:4010                    < 	ld		c,a
      21.  00:4010                    < 	ld		a,d
      22.  00:4010                    < 	and		0x3F
      23.  00:4010                    < 	or		c
      24.  00:4010                    < 	ld		c,a					; Primary slot value with main slot in page 3
      25.  00:4010                    < 
      26.  00:4010                    < 	ld		a,b
      27.  00:4010                    < 	and		0x0C
      28.  00:4010                    < [2]	rrca
      29.  00:4010                    < 	and		3
      30.  00:4010                    < 	ld		b,a					; B = Expanded slot in page 3
      31.  00:4010                    < 	ld		a,c
      32.  00:4010                    < 	out		(0A8h),a			; Slot : Main Slot, xx, xx, Main slot
      33.  00:4010                    < 	ld		a,(0FFFFh)
      34.  00:4010                    < 	cpl
      35.  00:4010                    < 	if (n<=4)
      36.  00:4010                    < [n]	RLCA
      37.  00:4010                    < 	else
      38.  00:4010                    < [8-n] RRCA	
      39.  00:4010                    < 	endif
      40.  00:4010                    < 	and		0xFC
      41.  00:4010                    < 	or		b
      42.  00:4010                    < 	if (n<=4)
      43.  00:4010                    < [n]	RRCA
      44.  00:4010                    < 	else
      45.  00:4010                    < [8-n] RLCA
      46.  00:4010                    < 	endif
      47.  00:4010                    < 	ld		(0FFFFh),a		; Expanded slot selected
      48.  00:4010                    < 	ld		b,a				; save for later	
      49.  00:4010                    < 	endmacro
      50.  00:4010                      		
      51.  00:4010                      
      52.  00:4010                      ; ------------------------------
      53.  00:4010                      ; SEARCH_SLOT
      54.  00:4010                      ; look for the slot of our rom
      55.  00:4010                      ; active in page 1
      56.  00:4010                      ; ------------------------------
      57.  00:4010                      
      58.  00:4010                      search_slot:
      59.  00:4010  CD 38 01            	call	RSLREG
      60.  00:4013  0F 0F               [2]	rrca
      61.  00:4015  E6 03               	and		3
      62.  00:4017  4F                  	ld		c,a
      63.  00:4018  06 00               	ld		b,0
      64.  00:401A  21 C1 FC            	ld		hl,EXPTBL
      65.  00:401D  09                  	add		hl,bc
      66.  00:401E  7E                  	ld		a,(hl)
      67.  00:401F  E6 80               	and		080h
      68.  00:4021  B1                  	or		c
      69.  00:4022  4F                  	ld		c,a
      70.  00:4023  23 23 23 23         [4]	inc		hl
      71.  00:4027  7E                  	ld		a,(hl)
      72.  00:4028  E6 0C               	and		0Ch
      73.  00:402A  B1                  	or		c
      74.  00:402B  32 11 CA            	ld		(slotvar),a
      75.  00:402E  C9                  	ret
      76.  00:402F                      	
      77.  00:402F                      ; ------------------------------
      78.  00:402F                      ; look for the slot of ram
      79.  00:402F                      ; active in page 3
      80.  00:402F                      ; ------------------------------
      81.  00:402F                      
      82.  00:402F                      search_slotram:
      83.  00:402F  F3                  	di
      84.  00:4030  CD 38 01            	call	RSLREG
      85.  00:4033  07 07               [2]	rlca
      86.  00:4035  E6 03               	and		3
      87.  00:4037  4F                  	ld		c,a
      88.  00:4038  06 00               	ld		b,0
      89.  00:403A  21 C1 FC            	ld		hl,EXPTBL
      90.  00:403D  09                  	add		hl,bc
      91.  00:403E  7E                  	ld		a,(hl)
      92.  00:403F  E6 80               	and		080h
      93.  00:4041  28 0D               	jr		z,search_slotram0
      94.  00:4043  B1                  	or		c
      95.  00:4044  4F                  	ld		c,a
      96.  00:4045  23 23 23 23         [4]	inc		hl
      97.  00:4049  7E                  	ld		a,(hl)
      98.  00:404A  07 07 07 07         [4]	rlca
      99.  00:404E  E6 0C               	and		0Ch
     100.  00:4050                      search_slotram0:
     101.  00:4050  B1                  	or		c
     102.  00:4051  32 12 CA            	ld		(slotram),a
     103.  00:4054  C9                  	ret
     104.  00:4055                      	
     105.  00:4055                      ; ------------------------------
     106.  00:4055                      ; SETROMPAGE0
     107.  00:4055                      ; Set the chart in
     108.  00:4055                      ; Page 0
     109.  00:4055                      ; -----------------------------
     110.  00:4055                      
     111.  00:4055                      setrompage0:
     112.  00:4055  3A 11 CA            	ld		a,(slotvar)
     113.  00:4058  C3 7C 40            	jp		setslotpage0
     114.  00:405B                      
     115.  00:405B                      setrampage0:
     116.  00:405B  3A 12 CA            	ld		a,(slotram)
     117.  00:405E  C3 7C 40            	jp		setslotpage0
     118.  00:4061                      
     119.  00:4061                      setrompage2:
     120.  00:4061  3A 11 CA            	ld		a,(slotvar)
     121.  00:4064  C3 F2 40            	jp		setslotpage2
     122.  00:4067                      
     123.  00:4067                      setrampage2:
     124.  00:4067  3A 12 CA            	ld		a,(slotram)
     125.  00:406A  C3 F2 40            	jp		setslotpage2
     126.  00:406D                      	
     127.  00:406D                      setrompage3:
     128.  00:406D  3A 11 CA            	ld		a,(slotvar)
     129.  00:4070  C3 39 41            	jp		setslotpage3
     130.  00:4073                      
     131.  00:4073                      setrampage3:
     132.  00:4073  3A 12 CA            	ld		a,(slotram)
     133.  00:4076  C3 39 41            	jp		setslotpage3
     134.  00:4079                      	
     135.  00:4079                      ; ------------------------------
     136.  00:4079                      ; RECBIOS
     137.  00:4079                      ; set the bios ROM
     138.  00:4079                      ; -------------------------------
     139.  00:4079                      recbios:
     140.  00:4079  3A C1 FC            	ld		a,(EXPTBL)
     141.  00:407C                      
     142.  00:407C                      ; ---------------------------
     143.  00:407C                      ; SETSLOTPAGE0
     144.  00:407C                      ; Set the slot passed in A
     145.  00:407C                      ; at page 0 in the Z80 address space
     146.  00:407C                      ; A: Format FxxxSSPP
     147.  00:407C                      ; ----------------------------
     148.  00:407C                      
     149.  00:407C                      setslotpage0:
     150.  00:407C  F3                  	di
     151.  00:407D  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     152.  00:407E  DB A8               	in		a,(0A8h)
     153.  00:4080  E6 FC               	and		0xFC
     154.  00:4082  57                  	ld		d,a					; D = Primary slot value
     155.  00:4083  78                  	ld		a,b
     156.  00:4084  E6 03               	and		3
     157.  00:4086  B2                  	or		d
     158.  00:4087  57                  	ld		d,a		; D = Final Value for primary slot
     159.  00:4088  78                  	ld		a,b		; Check if expanded
     160.  00:4089  CB 7F               	bit		7,a
     161.  00:408B  28 22               	jr		z,1f	; Not Expanded
     162.  00:408D                      	mainslot_setup	0
     162.  00:408D  E6 03             >  and  3
     162.  00:408F  0F 0F             > [2] rrca
     162.  00:4091  E6 C0             >  and  0xC0
     162.  00:4093  4F                >  ld  c,a
     162.  00:4094  7A                >  ld  a,d
     162.  00:4095  E6 3F             >  and  0x3F
     162.  00:4097  B1                >  or  c
     162.  00:4098  4F                >  ld  c,a
     162.  00:4099                    > 
     162.  00:4099  78                >  ld  a,b
     162.  00:409A  E6 0C             >  and  0x0C
     162.  00:409C  0F 0F             > [2] rrca
     162.  00:409E  E6 03             >  and  3
     162.  00:40A0  47                >  ld  b,a
     162.  00:40A1  79                >  ld  a,c
     162.  00:40A2  D3 A8             >  out  (0A8h),a
     162.  00:40A4  3A FF FF          >  ld  a,(0FFFFh)
     162.  00:40A7  2F                >  cpl
     162.  00:40A8                    >  if (n<=4)
     162.  00:40A8                    > [n] RLCA
     162.  00:40A8                    >  else
     162.  00:40A8                    ~ [8-n] RRCA
     162.  00:40A8                    ~  endif
     162.  00:40A8  E6 FC             >  and  0xFC
     162.  00:40AA  B0                >  or  b
     162.  00:40AB                    >  if (n<=4)
     162.  00:40AB                    > [n] RRCA
     162.  00:40AB                    >  else
     162.  00:40AB                    ~ [8-n] RLCA
     162.  00:40AB                    ~  endif
     162.  00:40AB  32 FF FF          >  ld  (0FFFFh),a
     162.  00:40AE  47                >  ld  b,a
     163.  00:40AF  7A                  1:	ld		a,d				; A = Final value
     164.  00:40B0  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     165.  00:40B2  C9                  	ret
     166.  00:40B3                      
     167.  00:40B3                      ; ---------------------------
     168.  00:40B3                      ; SETSLOTPAGE1
     169.  00:40B3                      ; Set the slot passed in A
     170.  00:40B3                      ; at page 1 in the Z80 address space
     171.  00:40B3                      ; A: Format FxxxSSPP
     172.  00:40B3                      ; ----------------------------
     173.  00:40B3                      
     174.  00:40B3                      setslotpage1:
     175.  00:40B3  F3                  	di
     176.  00:40B4  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     177.  00:40B5  DB A8               	in		a,(0A8h)
     178.  00:40B7  0F 0F               [2]	RRCA
     179.  00:40B9  E6 FC               	and		0xFC
     180.  00:40BB  57                  	ld		d,a					; D = Primary slot value
     181.  00:40BC  78                  	ld		a,b
     182.  00:40BD  E6 03               	and		3
     183.  00:40BF  B2                  	or		d
     184.  00:40C0  07 07               [2]	RLCA
     185.  00:40C2  57                  	ld		d,a		; D = Final Value for primary slot
     186.  00:40C3  78                  	ld		a,b		; Check if expanded
     187.  00:40C4  CB 7F               	bit		7,a
     188.  00:40C6  28 26               	jr		z,1f	; Not Expanded
     189.  00:40C8                      	mainslot_setup	6
     189.  00:40C8  E6 03             >  and  3
     189.  00:40CA  0F 0F             > [2] rrca
     189.  00:40CC  E6 C0             >  and  0xC0
     189.  00:40CE  4F                >  ld  c,a
     189.  00:40CF  7A                >  ld  a,d
     189.  00:40D0  E6 3F             >  and  0x3F
     189.  00:40D2  B1                >  or  c
     189.  00:40D3  4F                >  ld  c,a
     189.  00:40D4                    > 
     189.  00:40D4  78                >  ld  a,b
     189.  00:40D5  E6 0C             >  and  0x0C
     189.  00:40D7  0F 0F             > [2] rrca
     189.  00:40D9  E6 03             >  and  3
     189.  00:40DB  47                >  ld  b,a
     189.  00:40DC  79                >  ld  a,c
     189.  00:40DD  D3 A8             >  out  (0A8h),a
     189.  00:40DF  3A FF FF          >  ld  a,(0FFFFh)
     189.  00:40E2  2F                >  cpl
     189.  00:40E3                    >  if (n<=4)
     189.  00:40E3                    ~ [n] RLCA
     189.  00:40E3                    ~  else
     189.  00:40E3  0F 0F             > [8-n] RRCA
     189.  00:40E5                    >  endif
     189.  00:40E5  E6 FC             >  and  0xFC
     189.  00:40E7  B0                >  or  b
     189.  00:40E8                    >  if (n<=4)
     189.  00:40E8                    ~ [n] RRCA
     189.  00:40E8                    ~  else
     189.  00:40E8  07 07             > [8-n] RLCA
     189.  00:40EA                    >  endif
     189.  00:40EA  32 FF FF          >  ld  (0FFFFh),a
     189.  00:40ED  47                >  ld  b,a
     190.  00:40EE  7A                  1:	ld		a,d				; A = Final value
     191.  00:40EF  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     192.  00:40F1  C9                  	ret
     193.  00:40F2                      	
     194.  00:40F2                      
     195.  00:40F2                      ; ---------------------------
     196.  00:40F2                      ; SETSLOTPAGE2
     197.  00:40F2                      ; Set the slot passed in A
     198.  00:40F2                      ; at page 2 in the Z80 address space
     199.  00:40F2                      ; A: Format FxxxSSPP
     200.  00:40F2                      ; ----------------------------
     201.  00:40F2                      
     202.  00:40F2                      setslotpage2:
     203.  00:40F2  F3                  	di
     204.  00:40F3  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     205.  00:40F4  DB A8               	in		a,(0A8h)
     206.  00:40F6  07 07 07 07         [4]	RLCA
     207.  00:40FA  E6 FC               	and		0xFC
     208.  00:40FC  57                  	ld		d,a					; D = Primary slot value
     209.  00:40FD  78                  	ld		a,b
     210.  00:40FE  E6 03               	and		3
     211.  00:4100  B2                  	or		d
     212.  00:4101  0F 0F 0F 0F         [4]	RRCA
     213.  00:4105  57                  	ld		d,a		; D = Final Value for primary slot
     214.  00:4106  78                  	ld		a,b		; Check if expanded
     215.  00:4107  CB 7F               	bit		7,a
     216.  00:4109  28 2A               	jr		z,1f	; Not Expanded
     217.  00:410B                      	mainslot_setup	4
     217.  00:410B  E6 03             >  and  3
     217.  00:410D  0F 0F             > [2] rrca
     217.  00:410F  E6 C0             >  and  0xC0
     217.  00:4111  4F                >  ld  c,a
     217.  00:4112  7A                >  ld  a,d
     217.  00:4113  E6 3F             >  and  0x3F
     217.  00:4115  B1                >  or  c
     217.  00:4116  4F                >  ld  c,a
     217.  00:4117                    > 
     217.  00:4117  78                >  ld  a,b
     217.  00:4118  E6 0C             >  and  0x0C
     217.  00:411A  0F 0F             > [2] rrca
     217.  00:411C  E6 03             >  and  3
     217.  00:411E  47                >  ld  b,a
     217.  00:411F  79                >  ld  a,c
     217.  00:4120  D3 A8             >  out  (0A8h),a
     217.  00:4122  3A FF FF          >  ld  a,(0FFFFh)
     217.  00:4125  2F                >  cpl
     217.  00:4126                    >  if (n<=4)
     217.  00:4126  07 07 07 07       > [n] RLCA
     217.  00:412A                    >  else
     217.  00:412A                    ~ [8-n] RRCA
     217.  00:412A                    ~  endif
     217.  00:412A  E6 FC             >  and  0xFC
     217.  00:412C  B0                >  or  b
     217.  00:412D                    >  if (n<=4)
     217.  00:412D  0F 0F 0F 0F       > [n] RRCA
     217.  00:4131                    >  else
     217.  00:4131                    ~ [8-n] RLCA
     217.  00:4131                    ~  endif
     217.  00:4131  32 FF FF          >  ld  (0FFFFh),a
     217.  00:4134  47                >  ld  b,a
     218.  00:4135  7A                  1:	ld		a,d				; A = Final value
     219.  00:4136  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     220.  00:4138  C9                  	ret
     221.  00:4139                      	
     222.  00:4139                      ; ---------------------------
     223.  00:4139                      ; SETSLOTPAGE3
     224.  00:4139                      ; Set the slot passed in A
     225.  00:4139                      ; at page 3 in the Z80 address space
     226.  00:4139                      ; A: Format FxxxSSPP
     227.  00:4139                      ; ----------------------------
     228.  00:4139                      	
     229.  00:4139                      setslotpage3:
     230.  00:4139  F3                  	di
     231.  00:413A  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     232.  00:413B  DB A8               	in		a,(0A8h)
     233.  00:413D  07 07               [2]	RLCA
     234.  00:413F  E6 FC               	and		0xFC
     235.  00:4141  57                  	ld		d,a					; D = Primary slot value
     236.  00:4142  78                  	ld		a,b
     237.  00:4143  E6 03               	and		3
     238.  00:4145  B2                  	or		d
     239.  00:4146  0F 0F               [2]	RRCA	
     240.  00:4148  57                  	ld		d,a		; D = Final Value for primary slot
     241.  00:4149  78                  	ld		a,b		; Check if expanded
     242.  00:414A  CB 7F               	bit		7,a
     243.  00:414C  28 26               	jr		z,1f	; Not Expanded
     244.  00:414E                      	mainslot_setup	2
     244.  00:414E  E6 03             >  and  3
     244.  00:4150  0F 0F             > [2] rrca
     244.  00:4152  E6 C0             >  and  0xC0
     244.  00:4154  4F                >  ld  c,a
     244.  00:4155  7A                >  ld  a,d
     244.  00:4156  E6 3F             >  and  0x3F
     244.  00:4158  B1                >  or  c
     244.  00:4159  4F                >  ld  c,a
     244.  00:415A                    > 
     244.  00:415A  78                >  ld  a,b
     244.  00:415B  E6 0C             >  and  0x0C
     244.  00:415D  0F 0F             > [2] rrca
     244.  00:415F  E6 03             >  and  3
     244.  00:4161  47                >  ld  b,a
     244.  00:4162  79                >  ld  a,c
     244.  00:4163  D3 A8             >  out  (0A8h),a
     244.  00:4165  3A FF FF          >  ld  a,(0FFFFh)
     244.  00:4168  2F                >  cpl
     244.  00:4169                    >  if (n<=4)
     244.  00:4169  07 07             > [n] RLCA
     244.  00:416B                    >  else
     244.  00:416B                    ~ [8-n] RRCA
     244.  00:416B                    ~  endif
     244.  00:416B  E6 FC             >  and  0xFC
     244.  00:416D  B0                >  or  b
     244.  00:416E                    >  if (n<=4)
     244.  00:416E  0F 0F             > [n] RRCA
     244.  00:4170                    >  else
     244.  00:4170                    ~ [8-n] RLCA
     244.  00:4170                    ~  endif
     244.  00:4170  32 FF FF          >  ld  (0FFFFh),a
     244.  00:4173  47                >  ld  b,a
     245.  00:4174  7A                  1:	ld		a,d				; A = Final value
     246.  00:4175  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     247.  00:4177  C9                  	ret
     248.  00:4178                      
     249.  00:4178                      	
      38   00:4178                      		include vdpio.asm
       1.  00:4178                      
       2.  00:4178                             
       3.  00:4178                      ;-------------------------------------
       4.  00:4178                      _cls:		
       5.  00:4178  0E 00               		ld		c,0
       6.  00:417A  51                  		ld		d,c
       7.  00:417B  59                  		ld		e,c
       8.  00:417C  F3                  		di
       9.  00:417D  CD C5 41            		call	_vdpsetvramwr
      10.  00:4180  41                  		ld		b,c
      11.  00:4181  1E 01               		ld		e,1
      12.  00:4183  AF                  		xor		a
      13.  00:4184  D3 98               1:		out		(0x98),a
      14.  00:4186  ED A1               		cpi
      15.  00:4188  EA 84 41            		jp   		pe,1b
      16.  00:418B  1D                  		dec	e
      17.  00:418C  C2 84 41            		jp		nz,1b
      18.  00:418F  C9                  		ret
      19.  00:4190                      		
      20.  00:4190                      _cls0:
      21.  00:4190  0E 00               		ld		c,0
      22.  00:4192  51                  		ld		d,c
      23.  00:4193  59                  		ld		e,c
      24.  00:4194  F3                  		di
      25.  00:4195  CD C5 41            		call	_vdpsetvramwr
      26.  00:4198  FB                  		ei
      27.  00:4199  01 00 A0            		ld		bc,mapHeight*16*256
      28.  00:419C  AF                  		xor		a
      29.  00:419D  D3 98               1:		out		(0x98),a
      30.  00:419F  ED A1                       cpi
      31.  00:41A1  EA 9D 41                    jp   	pe,1b
      32.  00:41A4  C9                  		ret
      33.  00:41A5                      		
      34.  00:41A5                      font_cpy:		
      35.  00:41A5  0E 01               		ld		c,1
      36.  00:41A7  11 00 A0            		ld		de,160*256
      37.  00:41AA  CD C5 41            		call	_vdpsetvramwr
      38.  00:41AD  21 00 A0            		ld		hl,fonts
      39.  00:41B0  3E 0D               		ld		a,:fonts
      40.  00:41B2  16 03               		ld		d,3
      41.  00:41B4  32 00 B0            2:		ld		(_kBank4),a
      42.  00:41B7  01 98 00            		ld		bc,0x98
      43.  00:41BA  1E 20               		ld		e,32
      44.  00:41BC  ED B3               1:		otir
      45.  00:41BE  1D                  		dec	e
      46.  00:41BF  20 FB               		jr	nz,1b
      47.  00:41C1  15                  		dec	d
      48.  00:41C2  20 F0               		jr	nz,2b
      49.  00:41C4  C9                  		ret
      50.  00:41C5                      		
      51.  00:41C5                      ;-------------------------------------
      52.  00:41C5                      		
      53.  00:41C5  (00:0099)           vdpport1 equ 0x99
      54.  00:41C5  (00:009A)           vdpport2 equ 0x9A
      55.  00:41C5                      
      56.  00:41C5                      ; levelcolors:
      57.  00:41C5                      	;  incbin "palette.bin"
      58.  00:41C5                      
      59.  00:41C5                      ; _SetPalet:   
      60.  00:41C5                      		; di
      61.  00:41C5                      		; xor a 			;Set pointer to zero.
      62.  00:41C5                      		; out (vdpport1),a        
      63.  00:41C5                      		; ld  a,16 | 010000000B
      64.  00:41C5                      		; out (vdpport1),a
      65.  00:41C5                      
      66.  00:41C5                      		; ld  hl,levelcolors
      67.  00:41C5                      		; ld bc,vdpport2+32*256
      68.  00:41C5                      		; otir
      69.  00:41C5                      		; ei
      70.  00:41C5                      		; ret
      71.  00:41C5                      
      72.  00:41C5                      ;Set VDP for writing at address CDE (17-bit) 
      73.  00:41C5                      
      74.  00:41C5                      _vdpsetvramwr:
      75.  00:41C5  79                  		ld a,c
      76.  00:41C6                      _vdpsetvramwr2:
      77.  00:41C6                      ;Set VDP for writing at address ADE (17-bit) ;
      78.  00:41C6  CB 02               		rlc d
      79.  00:41C8  17                  		rla
      80.  00:41C9  CB 02               		rlc d
      81.  00:41CB  17                  		rla
      82.  00:41CC  CB 3A               		srl d ; primo shift, il secondo dopo la out
      83.  00:41CE                      
      84.  00:41CE  D3 99               		out (0x99),a ;set bits 14-16
      85.  00:41D0  3E 8E               		ld a,14+128
      86.  00:41D2  D3 99               		out (0x99),a
      87.  00:41D4                      
      88.  00:41D4  CB 3A               		srl d ; secondo shift.     
      89.  00:41D6                      _vdpsetvramwr14
      90.  00:41D6  7B                  		ld a,e ;set bits 0-7
      91.  00:41D7  D3 99               		out (0x99),a
      92.  00:41D9  7A                  		ld a,d ;set bits 8-13
      93.  00:41DA  F6 40               		or 0x40 ; + write access
      94.  00:41DC  D3 99               		out (0x99),a
      95.  00:41DE  C9                  		ret
      96.  00:41DF                      	
      97.  00:41DF                      ;Set VDP port #98 to start reading at address CDE (17-bit) ;
      98.  00:41DF                      
      99.  00:41DF                      _vdpsetvramrd:
     100.  00:41DF  79                  		ld a,c
     101.  00:41E0                      ;Set VDP port #98 to start reading at address ADE (17-bit) ;
     102.  00:41E0  CB 02               		rlc d
     103.  00:41E2  17                  		rla
     104.  00:41E3  CB 02               		rlc d
     105.  00:41E5  17                  		rla
     106.  00:41E6  CB 3A               		srl d 			; primo shift, il secondo dopo la out
     107.  00:41E8                      
     108.  00:41E8  D3 99               		out (0x99),a 	; set bits 14-16
     109.  00:41EA  3E 8E               		ld a,14+128
     110.  00:41EC  D3 99               		out (0x99),a
     111.  00:41EE                      
     112.  00:41EE  CB 3A               		srl d 	; secondo shift.            
     113.  00:41F0  7B                  		ld a,e 	; set bits 0-7
     114.  00:41F1  D3 99               		out (0x99),a
     115.  00:41F3  7A                  		ld a,d 	; set bits 8-13
     116.  00:41F4  E6 3F               		and 0x3F
     117.  00:41F6  D3 99               		out (0x99),a
     118.  00:41F8  C9                  		ret
     119.  00:41F9                      
     120.  00:41F9                      ;Display page E in screen 5
     121.  00:41F9                      _setpage:
     122.  00:41F9  7B                  	ld a,e
     123.  00:41FA  87 87 87 87 87      [5]	add a,a ;x32
     124.  00:41FF  F6 1F               	or	 00011111B
     125.  00:4201  F3                  	di
     126.  00:4202  D3 99               	out (0x99),a
     127.  00:4204  3E 82               	ld a,2+128
     128.  00:4206  D3 99               	out (0x99),a
     129.  00:4208  FB                  	ei            
     130.  00:4209  C9                  	ret
     131.  00:420A                      
     132.  00:420A  (00:005F)           chgmod        equ     0x005f      ;change graphic mode
     133.  00:420A  (00:000C)           RDSLT         equ     0x000c      ;read address HL in slot A
     134.  00:420A  (00:0156)           KILBUF        equ     0x0156      ;clear keyboard buffer
     135.  00:420A                      
     136.  00:420A                      set_scr:
     137.  00:420A                      	
     138.  00:420A                      	// sprites 16x16
     139.  00:420A  3A E0 F3            	ld		a,(RG1SAV)
     140.  00:420D  F6 02               	or		00000010B
     141.  00:420F  32 E0 F3            	ld		(RG1SAV),a
     142.  00:4212                      
     143.  00:4212                      	// enable sprites + TP
     144.  00:4212  3A E7 FF            	ld		a,(RG8SAV)
     145.  00:4215                      	; or		00100010B
     146.  00:4215  F6 20               	or		00100000B
     147.  00:4217  32 E7 FF            	ld		(RG8SAV),a
     148.  00:421A                      		
     149.  00:421A                      	// Set @50Hz (only PAL is supported)
     150.  00:421A  3A 13 CA            	ld	a,(SEL_NTSC)
     151.  00:421D  A7                  	and 	a
     152.  00:421E  20 07               	jr		nz,1f
     153.  00:4220                      	
     154.  00:4220  3A E8 FF            	ld		a,(RG9SAV)		
     155.  00:4223  F6 02               	or		00000010B		; PAL
     156.  00:4225  18 05               	jr	2f
     157.  00:4227                      1:		
     158.  00:4227  3A E8 FF            	ld		a,(RG9SAV)		
     159.  00:422A  E6 FD               	and		11111101B		; NTSC 
     160.  00:422C  32 E8 FF            2:	ld		(RG9SAV),a
     161.  00:422F                      
     162.  00:422F  3E 08               	ld  	a,8
     163.  00:4231  CD 5F 00            	call	chgmod
     164.  00:4234                      
     165.  00:4234  3A E8 FF            	ld		a,(RG9SAV)		
     166.  00:4237  E6 7F               	and		01111111B		; 192 lines	
     167.  00:4239  32 E8 FF            	ld		(RG9SAV),a
     168.  00:423C  D3 99               	out		(0x99),a
     169.  00:423E  3E 89               	ld		a,9+128
     170.  00:4240  D3 99               	out		(0x99),a
     171.  00:4242                      	
     172.  00:4242                      	// border color
     173.  00:4242  AF                  	xor		a
     174.  00:4243  32 E6 F3            	ld		(RG7SAV),a
     175.  00:4246  D3 99               	out		(0x99),a
     176.  00:4248  3E 87               	ld		a,7+128
     177.  00:424A  D3 99               	out		(0x99),a
     178.  00:424C  C9                  	ret
     179.  00:424D                      
     180.  00:424D                      
     181.  00:424D                      _waitvdp:
     182.  00:424D  3E 02               	ld a,2
     183.  00:424F  D3 99               	out (0x99),a
     184.  00:4251  3E 8F               	ld a, 128+15
     185.  00:4253  D3 99               	out (0x99),a
     186.  00:4255  DB 99               1:  in	a,(0x99)
     187.  00:4257  0F                  	rrca
     188.  00:4258  DA 55 42            	jp c,1b
     189.  00:425B                      
     190.  00:425B  C9                  	ret
     191.  00:425C                      
     192.  00:425C                      ; .inf:
     193.  00:425C                      	; ld	a,r			; random colour
     194.  00:425C                      	; out		(0x99),a
     195.  00:425C                      	; ld		a,7+128
     196.  00:425C                      	; out		(0x99),a
     197.  00:425C                      	; jp	1b
     198.  00:425C                      	
      39   00:425C                      		include isr.asm
       1.  00:425C                      
       2.  00:425C                      
       3.  00:425C                      isr_set:
       4.  00:425C  F3                  		di
       5.  00:425D  21 38 00            		ld	hl,0x0038
       6.  00:4260  36 C3               		ld	(hl),0xC3
       7.  00:4262  23                  		inc	hl
       8.  00:4263  36 9B               		ld	(hl),low _scroll
       9.  00:4265  23                  		inc	hl
      10.  00:4266  36 42               		ld	(hl),high _scroll
      11.  00:4268                      
      12.  00:4268  3E 9E               		ld    A,YSIZE-2
      13.  00:426A  D3 99               		out (0x99),a
      14.  00:426C  3E 93               		ld    A,19+128
      15.  00:426E  D3 99               		out (0x99),a	; set interrupt line
      16.  00:4270                      	
      17.  00:4270  3A DF F3            		ld    A,(RG0SAV)
      18.  00:4273  F6 10               		or    00010000B
      19.  00:4275  32 DF F3            		ld    (RG0SAV),A
      20.  00:4278  D3 99               		out (0x99),a
      21.  00:427A  3E 80               		ld    A,0+128
      22.  00:427C  D3 99               		out (0x99),a	; enable line interrupt
      23.  00:427E  C9                  		ret
      24.  00:427F                      	
      25.  00:427F                      isr_reset:
      26.  00:427F  F3                  		di
      27.  00:4280  21 38 00            		ld	hl,0x0038
      28.  00:4283  36 C3               		ld	(hl),0xC3
      29.  00:4285  23                  		inc	hl
      30.  00:4286  36 BA               		ld	(hl),low _fake_isr
      31.  00:4288  23                  		inc	hl
      32.  00:4289  36 42               		ld	(hl),high _fake_isr
      33.  00:428B                      
      34.  00:428B  3A DF F3            		ld    A,(RG0SAV)
      35.  00:428E  E6 EF               		and    11101111B
      36.  00:4290  32 DF F3            		ld    (RG0SAV),A
      37.  00:4293  D3 99               		out (0x99),a
      38.  00:4295  3E 80               		ld    A,0+128
      39.  00:4297  D3 99               		out (0x99),a	; disable line interrupt		
      40.  00:4299  FB                  		ei
      41.  00:429A  C9                  		ret
      42.  00:429B                      
      43.  00:429B                      
      44.  00:429B                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      45.  00:429B                      ;  actual ISR handler
      46.  00:429B                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      47.  00:429B                      
      48.  00:429B                      _scroll:
      49.  00:429B  F5                  		push	af
      50.  00:429C                      		
      51.  00:429C  3E 01               		ld a,1 			; read S#1
      52.  00:429E  D3 99               		out (0x99),a
      53.  00:42A0  3E 8F               		ld a,128+15
      54.  00:42A2  D3 99               		out (0x99),a
      55.  00:42A4                      		 
      56.  00:42A4  DB 99               		in	a,(0x99)
      57.  00:42A6  1F                  		rra
      58.  00:42A7  DA 51 43            		jp	c,lint	
      59.  00:42AA                      
      60.  00:42AA  AF                  		xor	a 			; read S#0
      61.  00:42AB  D3 99               		out (0x99),a
      62.  00:42AD  3E 8F               		ld a,128+15
      63.  00:42AF  D3 99               		out (0x99),a
      64.  00:42B1                      		 
      65.  00:42B1  DB 99               		in	a,(0x99)
      66.  00:42B3  07                  		rlca
      67.  00:42B4  DA C7 42            		jp	c,vblank
      68.  00:42B7                      		
      69.  00:42B7  F1                  		pop	af			; none of them (?)
      70.  00:42B8  FB                  		ei
      71.  00:42B9  C9                  		ret
      72.  00:42BA                      
      73.  00:42BA                      _fake_isr:
      74.  00:42BA  F5                  		push	af
      75.  00:42BB                      
      76.  00:42BB  AF                  		xor	a 			; read S#0
      77.  00:42BC  D3 99               		out (0x99),a
      78.  00:42BE  3E 8F               		ld a,128+15
      79.  00:42C0  D3 99               		out (0x99),a
      80.  00:42C2                      		 
      81.  00:42C2  DB 99               		in	a,(0x99)
      82.  00:42C4                      		
      83.  00:42C4  F1                  		pop	af			
      84.  00:42C5  FB                  		ei
      85.  00:42C6  C9                  		ret
      86.  00:42C7                      		
      87.  00:42C7                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      88.  00:42C7                      ;  VBLANK
      89.  00:42C7                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      90.  00:42C7                      	
      91.  00:42C7                      vblank:
      92.  00:42C7  3A E7 FF            		ld	a,(RG8SAV)
      93.  00:42CA  E6 FD               		and	011111101B		
      94.  00:42CC  32 E7 FF            		ld	(RG8SAV),a
      95.  00:42CF  D3 99               		out	(0x99),a
      96.  00:42D1  3E 88               		ld	a,8+128
      97.  00:42D3  D3 99               		out	(0x99),a			; enable sprites
      98.  00:42D5                      
      99.  00:42D5                      		; ld	a,(noscroll)
     100.  00:42D5                      		; or	a
     101.  00:42D5                      		; jr	z,1f
     102.  00:42D5                      		
     103.  00:42D5  E5                  		push   hl         
     104.  00:42D6  D5                  		push   de         
     105.  00:42D7  C5                  		push   bc         
     106.  00:42D8  D9                  		exx               
     107.  00:42D9  08                  		ex     af,af'     
     108.  00:42DA  E5                  		push   hl         
     109.  00:42DB  D5                  		push   de         
     110.  00:42DC  C5                  		push   bc         
     111.  00:42DD  F5                  		push   af         
     112.  00:42DE  FD E5               		push   iy         
     113.  00:42E0  DD E5               		push   ix         
     114.  00:42E2                      
     115.  00:42E2  CD E4 43            		call	pageswap			; test for page swap
     116.  00:42E5  CD 12 44            		call	reset_sliceflag
     117.  00:42E8                      		
     118.  00:42E8  2A 1D CA            		ld	hl,(_xmappos)			; corner top left of the screen window in the map in pixels
     119.  00:42EB                      
     120.  00:42EB                      		repeat 4
     121.  00:42EB                    < 		srl	h
     122.  00:42EB                    < 		rr	l
     123.  00:42EB                    < 		endrepeat					; corner top left of the screen window in the map in tiles
     123.  00:42EB  CB 3C CB 1D CB 3C CB 1D CB 3C CB 1D CB 3C CB 1D 
     124.  00:42FB                      		
     125.  00:42FB  3A 21 CA            		ld		a,(_xspeed+1)
     126.  00:42FE  CB 07               		rlc a
     127.  00:4300  DA 18 43            		jp	c,.scroll_left
     128.  00:4303                      		
     129.  00:4303                      .scroll_right		
     130.  00:4303  11 0F C0            		ld	de,_levelmap+15
     131.  00:4306  19                  		add	hl,de					; HL = corner top right of the screen window in the map in tiles
     132.  00:4307                      
     133.  00:4307  CD D6 43            		call	xscroll				; move the screen ! Not if VDP commands are being executed			
     134.  00:430A  CD 8D 45            		call	brdrs_right			; build a column right pointed by HL, clear a column left, move a stripe of screen
     135.  00:430D                      		
     136.  00:430D                      		bdrclr 00000011B
     136.  00:430D                    >   if debug
     136.  00:430D                    >   ifdif n,0
     136.  00:430D  3E 03             >    ld  a,n
     136.  00:430F                    >   else
     136.  00:430F                    ~    xor a
     136.  00:430F                    ~   endif
     136.  00:430F  D3 99             >   out  (0x99),a
     136.  00:4311  3E 87             >   ld  a,7+128
     136.  00:4313  D3 99             >   out  (0x99),a
     136.  00:4315                    >   endif
     137.  00:4315                      		
     138.  00:4315  C3 2A 43            		jp	.return
     139.  00:4318                      		
     140.  00:4318                      .scroll_left
     141.  00:4318  11 00 C0            		ld	de,_levelmap+0
     142.  00:431B  19                  		add	hl,de					; HL = corner top left of the screen window in the map in tiles
     143.  00:431C                      		
     144.  00:431C  CD D6 43            		call	xscroll				; move the screen ! Not if VDP commands are being executed			
     145.  00:431F  CD 68 45            		call	brdrs_left			; build a column left pointed by HL, clear a column right, move a stripe of screen
     146.  00:4322                      		
     147.  00:4322                      		bdrclr 00000011B
     147.  00:4322                    >   if debug
     147.  00:4322                    >   ifdif n,0
     147.  00:4322  3E 03             >    ld  a,n
     147.  00:4324                    >   else
     147.  00:4324                    ~    xor a
     147.  00:4324                    ~   endif
     147.  00:4324  D3 99             >   out  (0x99),a
     147.  00:4326  3E 87             >   ld  a,7+128
     147.  00:4328  D3 99             >   out  (0x99),a
     147.  00:432A                    >   endif
     148.  00:432A                      		
     149.  00:432A                      .return
     150.  00:432A  CD 5D 44            		call 	changexpos
     151.  00:432D  CD 26 44            		call 	changespeed
     152.  00:4330                      		
     153.  00:4330  2A 9E FC            		ld	hl,(_jiffy)				; timer
     154.  00:4333  23                  		inc	hl
     155.  00:4334  22 9E FC            		ld	(_jiffy),hl
     156.  00:4337                      				
     157.  00:4337  CD 4D 42            		call _waitvdp
     158.  00:433A                      		bdrclr 0
     158.  00:433A                    >   if debug
     158.  00:433A                    >   ifdif n,0
     158.  00:433A                    ~    ld  a,n
     158.  00:433A                    ~   else
     158.  00:433A  AF                >    xor a
     158.  00:433B                    >   endif
     158.  00:433B  D3 99             >   out  (0x99),a
     158.  00:433D  3E 87             >   ld  a,7+128
     158.  00:433F  D3 99             >   out  (0x99),a
     158.  00:4341                    >   endif
     159.  00:4341                      		
     160.  00:4341  DD E1               		pop    ix         
     161.  00:4343  FD E1               		pop    iy         
     162.  00:4345  F1                  		pop    af         
     163.  00:4346  C1                  		pop    bc         
     164.  00:4347  D1                  		pop    de         
     165.  00:4348  E1                  		pop    hl         
     166.  00:4349  08                  		ex     af,af'     
     167.  00:434A  D9                  		exx               
     168.  00:434B  C1                  		pop    bc         
     169.  00:434C  D1                  		pop    de         
     170.  00:434D  E1                  		pop    hl         
     171.  00:434E                      
     172.  00:434E                      1:		
     173.  00:434E  F1                  		pop	af
     174.  00:434F  FB                  		ei
     175.  00:4350  C9                  		ret
     176.  00:4351                      		
     177.  00:4351                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     178.  00:4351                      ;  Line Interrupt
     179.  00:4351                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     180.  00:4351                      	; -hperiod number of CPU cycles per HBlank [228]
     181.  00:4351                      	; -vperiod number of CPU cycles per VBlank in NTSC [59736]
     182.  00:4351                      lint:
     183.  00:4351  3A E0 F3            		ld	a,(RG1SAV)
     184.  00:4354  E6 BF               		and	010111111B			; disable screen
     185.  00:4356  32 E0 F3            		ld	(RG1SAV),a
     186.  00:4359  D3 99               		out	(0x99),a
     187.  00:435B  3E 81               		ld	a,1+128
     188.  00:435D  D3 99               		out	(0x99),a
     189.  00:435F                      
     190.  00:435F  E5                  		push   hl         
     191.  00:4360  D5                  		push   de         
     192.  00:4361  C5                  		push   bc         
     193.  00:4362  D9                  		exx               
     194.  00:4363  08                  		ex     af,af'     
     195.  00:4364  E5                  		push   hl         
     196.  00:4365  D5                  		push   de         
     197.  00:4366  C5                  		push   bc         
     198.  00:4367  F5                  		push   af         
     199.  00:4368  FD E5               		push   iy         
     200.  00:436A  DD E5               		push   ix         
     201.  00:436C                      		
     202.  00:436C  3A E7 FF            		ld		a,(RG8SAV)
     203.  00:436F  F6 02               		or		000000010B		
     204.  00:4371  32 E7 FF            		ld		(RG8SAV),a
     205.  00:4374  D3 99               		out		(0x99),a
     206.  00:4376  3E 88               		ld		a,8+128
     207.  00:4378  D3 99               		out		(0x99),a		; disable sprites
     208.  00:437A                      		
     209.  00:437A  3E 3F               		ld a,3FH				; 0XX11111B
     210.  00:437C  D3 99               		out (0x99),a
     211.  00:437E  3E 82               		ld a,2+128				; R#2 
     212.  00:4380  D3 99               		out (0x99),a			; score bar in page 1
     213.  00:4382                      		
     214.  00:4382                      
     215.  00:4382  CD F5 43            		call	set_displaypage	; update displaypage and _xoffset
     216.  00:4385                      		
     217.  00:4385  CD BF 43            		call	waitHBLANK		; now we are at the start of HBLANK
     218.  00:4388                      		
     219.  00:4388  AF                  		xor	a
     220.  00:4389  D3 99               		out	(099h),a
     221.  00:438B  3E 92               		ld	a,18+128
     222.  00:438D  D3 99               		out	(099h),a			; score bar fixed 
     223.  00:438F                      		
     224.  00:438F  3A E0 F3            		ld	a,(RG1SAV)
     225.  00:4392  F6 42               		or 	01000010B			; enable screen
     226.  00:4394  32 E0 F3            		ld	(RG1SAV),a
     227.  00:4397  D3 99               		out	(0x99),a
     228.  00:4399  3E 81               		ld	a,1+128
     229.  00:439B  D3 99               		out	(0x99),a
     230.  00:439D                      		
     231.  00:439D  1E 08               		ld	e,8
     232.  00:439F  CD DA 48            		call	checkkbd
     233.  00:43A2  32 1B CA            		ld	(joystick),a
     234.  00:43A5                      		
     235.  00:43A5  1E 06               		ld	e,6
     236.  00:43A7  CD DA 48            		call	checkkbd
     237.  00:43AA  E6 01               		and		1				; SHIFT
     238.  00:43AC  CC 46 48            		call 	z,animtest
     239.  00:43AF                      
     240.  00:43AF  DD E1               		pop    ix         
     241.  00:43B1  FD E1               		pop    iy         
     242.  00:43B3  F1                  		pop    af         
     243.  00:43B4  C1                  		pop    bc         
     244.  00:43B5  D1                  		pop    de         
     245.  00:43B6  E1                  		pop    hl         
     246.  00:43B7  08                  		ex     af,af'     
     247.  00:43B8  D9                  		exx               
     248.  00:43B9  C1                  		pop    bc         
     249.  00:43BA  D1                  		pop    de         
     250.  00:43BB  E1                  		pop    hl         
     251.  00:43BC                      
     252.  00:43BC  F1                  		pop	 af
     253.  00:43BD  FB                  		ei
     254.  00:43BE  C9                  		ret
     255.  00:43BF                      	
     256.  00:43BF                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
     257.  00:43BF                      ; ; manage score bar at YSIZE
     258.  00:43BF                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
     259.  00:43BF                      waitHBLANK:
     260.  00:43BF  3E 02               		ld a,2 				; read S#2
     261.  00:43C1  D3 99               		out (0x99),a
     262.  00:43C3  3E 8F               		ld a,128+15
     263.  00:43C5  D3 99               		out (0x99),a		; poll for HBLANK
     264.  00:43C7                      		 
     265.  00:43C7  DB 99               1:		in	a,(0x99)		; if 1 we are in HBLANK already, so wait until end of HBLANK
     266.  00:43C9  E6 20               		and	0x20
     267.  00:43CB  C2 C7 43            		jp	nz,1b			
     268.  00:43CE                      
     269.  00:43CE  DB 99               1:		in	a,(0x99)		; wait until end of the active area
     270.  00:43D0  E6 20               		and	0x20
     271.  00:43D2  CA CE 43            		jp	z,1b
     272.  00:43D5  C9                  		ret
     273.  00:43D6                      	
     274.  00:43D6                      ; lint:	
     275.  00:43D6                      		; ; call	waitHBLANK
     276.  00:43D6                      		; ; now we are at the start of HBLANK
     277.  00:43D6                      	
     278.  00:43D6                      		; ; ld	a,(RG1SAV)
     279.  00:43D6                      		; ; and	010111111B			; disable screen
     280.  00:43D6                      		; ; ld	(RG1SAV),a
     281.  00:43D6                      		; ; out	(0x99),a
     282.  00:43D6                      		; ; ld	a,1+128
     283.  00:43D6                      		; ; out	(0x99),a
     284.  00:43D6                      
     285.  00:43D6                      
     286.  00:43D6                      		; ld a,00011111B		; 0XX11111B
     287.  00:43D6                      		; out (0x99),a
     288.  00:43D6                      		; ld a,2+128			; R#2 
     289.  00:43D6                      		; out (0x99),a		; score bar in page 0
     290.  00:43D6                      
     291.  00:43D6                      		; ld    A,mapHeight*16-(YSIZE-2)	; SCROLL DOWN
     292.  00:43D6                      		; out (0x99),a
     293.  00:43D6                      		; ld    A,23+128
     294.  00:43D6                      		; out (0x99),a
     295.  00:43D6                      
     296.  00:43D6                      		; xor		a
     297.  00:43D6                      		; out	(099h),a
     298.  00:43D6                      		; ld	a,18+128
     299.  00:43D6                      		; out	(099h),a		; set adjust 0,0
     300.  00:43D6                      
     301.  00:43D6                      
     302.  00:43D6                      		; ld	a,(RG8SAV)
     303.  00:43D6                      		; or	000000010B		; disable sprites
     304.  00:43D6                      		; ld	(RG8SAV),a
     305.  00:43D6                      		; out	(0x99),a
     306.  00:43D6                      		; ld	a,8+128
     307.  00:43D6                      		; out	(0x99),a
     308.  00:43D6                      
     309.  00:43D6                      		; ; call	waitHBLANK
     310.  00:43D6                      		
     311.  00:43D6                      		; ; ld	a,(RG1SAV)
     312.  00:43D6                      		; ; or 	01000010B		; enable screen
     313.  00:43D6                      		; ; ld	(RG1SAV),a
     314.  00:43D6                      		; ; out	(0x99),a
     315.  00:43D6                      		; ; ld	a,1+128
     316.  00:43D6                      		; ; out	(0x99),a
     317.  00:43D6                      	
     318.  00:43D6                      		; push   hl         
     319.  00:43D6                      		; push   de         
     320.  00:43D6                      		; push   bc         
     321.  00:43D6                      		; exx               
     322.  00:43D6                      		; ex     af,af'     
     323.  00:43D6                      		; push   hl         
     324.  00:43D6                      		; push   de         
     325.  00:43D6                      		; push   bc         
     326.  00:43D6                      		; push   af         
     327.  00:43D6                      		; push   iy         
     328.  00:43D6                      		; push   ix         
     329.  00:43D6                      
     330.  00:43D6                      		
     331.  00:43D6                      		; ld	hl,.exit
     332.  00:43D6                      		; push	hl
     333.  00:43D6                      		; ld		a,(dxmap)
     334.  00:43D6                      		; rlc a
     335.  00:43D6                      
     336.  00:43D6                      		; jp	nc,_blank_line_lft		; >0 == dx
     337.  00:43D6                      		; jp	 c,_blank_line_rgt		; <0 == sx
     338.  00:43D6                      ; 1:		pop	hl
     339.  00:43D6                      ; .exit:
     340.  00:43D6                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     341.  00:43D6                      		; ; ld		a,00001000B
     342.  00:43D6                      		; ; out		(0x99),a
     343.  00:43D6                      		; ; ld		a,7+128
     344.  00:43D6                      		; ; out		(0x99),a
     345.  00:43D6                      		
     346.  00:43D6                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     347.  00:43D6                      		; call	test_star
     348.  00:43D6                      
     349.  00:43D6                      		; xor		a
     350.  00:43D6                      		; out		(0x99),a
     351.  00:43D6                      		; ld		a,7+128
     352.  00:43D6                      		; out		(0x99),a
     353.  00:43D6                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     354.  00:43D6                      		
     355.  00:43D6                      		; pop    ix         
     356.  00:43D6                      		; pop    iy         
     357.  00:43D6                      		; pop    af         
     358.  00:43D6                      		; pop    bc         
     359.  00:43D6                      		; pop    de         
     360.  00:43D6                      		; pop    hl         
     361.  00:43D6                      		; ex     af,af'     
     362.  00:43D6                      		; exx               
     363.  00:43D6                      		; pop    bc         
     364.  00:43D6                      		; pop    de         
     365.  00:43D6                      		; pop    hl         
     366.  00:43D6                      
     367.  00:43D6                      		; pop		af
     368.  00:43D6                      		; ei
     369.  00:43D6                      		; ret
     370.  00:43D6                      
     371.  00:43D6                      ; ;-------------------------------------		
     372.  00:43D6                      
     373.  00:43D6                      ; border_color	equ 	0;	00100101B
     374.  00:43D6                      		
     375.  00:43D6                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
     376.  00:43D6                      ; ;   manage normal vblank routine
     377.  00:43D6                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
     378.  00:43D6                      
     379.  00:43D6                      ; vblank:
     380.  00:43D6                      		; call	activate_window	
     381.  00:43D6                      
     382.  00:43D6                      		; push   hl         
     383.  00:43D6                      		; push   de         
     384.  00:43D6                      		; push   bc         
     385.  00:43D6                      		; exx               
     386.  00:43D6                      		; ex     af,af'     
     387.  00:43D6                      		; push   hl         
     388.  00:43D6                      		; push   de         
     389.  00:43D6                      		; push   bc         
     390.  00:43D6                      		; push   af         
     391.  00:43D6                      		; push   iy         
     392.  00:43D6                      		; push   ix         
     393.  00:43D6                      
     394.  00:43D6                      		; ; ld	a,00011100B		; red
     395.  00:43D6                      		; ; out		(0x99),a
     396.  00:43D6                      		; ; ld		a,7+128
     397.  00:43D6                      		; ; out		(0x99),a
     398.  00:43D6                      
     399.  00:43D6                      		; call	changedir
     400.  00:43D6                      				
     401.  00:43D6                      		; ld	hl,(_jiffy)
     402.  00:43D6                      		; inc	hl
     403.  00:43D6                      		; ld	(_jiffy),hl
     404.  00:43D6                      				
     405.  00:43D6                      		; ; ld	a,00011100B		; red
     406.  00:43D6                      		; ; out	(0x99),a
     407.  00:43D6                      		; ; ld	a,7+128
     408.  00:43D6                      		; ; out	(0x99),a
     409.  00:43D6                      		
     410.  00:43D6                      
     411.  00:43D6                      		; ; xor		a		; black
     412.  00:43D6                      		; ; out	(0x99),a
     413.  00:43D6                      		; ; ld	a,7+128
     414.  00:43D6                      		; ; out	(0x99),a
     415.  00:43D6                      	
     416.  00:43D6                      		; pop    ix         
     417.  00:43D6                      		; pop    iy         
     418.  00:43D6                      		; pop    af         
     419.  00:43D6                      		; pop    bc         
     420.  00:43D6                      		; pop    de         
     421.  00:43D6                      		; pop    hl         
     422.  00:43D6                      		; ex     af,af'     
     423.  00:43D6                      		; exx               
     424.  00:43D6                      		; pop    bc         
     425.  00:43D6                      		; pop    de         
     426.  00:43D6                      		; pop    hl         
     427.  00:43D6                      
     428.  00:43D6                      		; pop		af
     429.  00:43D6                      		; ei
     430.  00:43D6                      		; ret
     431.  00:43D6                      ; ;-------------------------------------
     432.  00:43D6                      ; ;-------------------------------------
     433.  00:43D6                      
     434.  00:43D6                      ; _blank_line_lft:
     435.  00:43D6                      		; ; ld	a,00000111B		; blue
     436.  00:43D6                      		; ; out	(0x99),a
     437.  00:43D6                      		; ; ld	a,7+128
     438.  00:43D6                      		; ; out	(0x99),a
     439.  00:43D6                      
     440.  00:43D6                      		; ld	e,0
     441.  00:43D6                      		; call	blank_line
     442.  00:43D6                      
     443.  00:43D6                      		
     444.  00:43D6                      		
     445.  00:43D6                      		; ; xor	a
     446.  00:43D6                      		; ; out	(0x99),a
     447.  00:43D6                      		; ; ld	a,7+128
     448.  00:43D6                      		; ; out	(0x99),a
     449.  00:43D6                      		; ret
     450.  00:43D6                      
     451.  00:43D6                      ; ;-------------------------------------	
     452.  00:43D6                      
     453.  00:43D6                      ; _blank_line_rgt
     454.  00:43D6                      		; ; ld	a,00000111B		; blue
     455.  00:43D6                      		; ; out	(0x99),a
     456.  00:43D6                      		; ; ld	a,7+128
     457.  00:43D6                      		; ; out	(0x99),a
     458.  00:43D6                      
     459.  00:43D6                      		; ld	e,240
     460.  00:43D6                      		; call	blank_line
     461.  00:43D6                      
     462.  00:43D6                      		; ; xor	a
     463.  00:43D6                      		; ; out	(0x99),a
     464.  00:43D6                      		; ; ld	a,7+128
     465.  00:43D6                      		; ; out	(0x99),a
     466.  00:43D6                      		; ret
     467.  00:43D6                      		
     468.  00:43D6                      ; ;-------------------------------------	
     469.  00:43D6                      		
     470.  00:43D6                      ; inc_xoffset
     471.  00:43D6                      		; call	plot_line_rgt1
     472.  00:43D6                      		; call	.movex
     473.  00:43D6                      		; call	plot_line_rgt2
     474.  00:43D6                      				
     475.  00:43D6                      		; ; ld	a,00000010B		; blue
     476.  00:43D6                      		; ; out	(0x99),a
     477.  00:43D6                      		; ; ld	a,7+128
     478.  00:43D6                      		; ; out	(0x99),a
     479.  00:43D6                      		
     480.  00:43D6                      		; jp		newxmap
     481.  00:43D6                      		
     482.  00:43D6                      ; .movex
     483.  00:43D6                      		; ld		a,(_xoffset)
     484.  00:43D6                      		; and		a
     485.  00:43D6                      		; jr		nz,.case1_15
     486.  00:43D6                      ; .case0
     487.  00:43D6                      		; ld 		a,(_displaypage)
     488.  00:43D6                      		; xor		1
     489.  00:43D6                      		; ld 		d,a
     490.  00:43D6                      		; ld		e,240
     491.  00:43D6                      		; jp		clrboder
     492.  00:43D6                      		
     493.  00:43D6                      ; .case1_15
     494.  00:43D6                      ; [4]		add		a,a
     495.  00:43D6                      		; ld		e,a
     496.  00:43D6                      		; sub		a,16
     497.  00:43D6                      		; ld		d,a
     498.  00:43D6                      		; jp		move_block
     499.  00:43D6                      
     500.  00:43D6                      
     501.  00:43D6                      ; ;-------------------------------------	
     502.  00:43D6                      	
     503.  00:43D6                      ; dec_xoffset
     504.  00:43D6                      		; call	plot_line_lft1
     505.  00:43D6                      		; call	.movex
     506.  00:43D6                      		; call	plot_line_lft2
     507.  00:43D6                      				
     508.  00:43D6                      		; ; ld	a,00000011B		; blue
     509.  00:43D6                      		; ; out	(0x99),a
     510.  00:43D6                      		; ; ld	a,7+128
     511.  00:43D6                      		; ; out	(0x99),a
     512.  00:43D6                      
     513.  00:43D6                      		; jp		newxmap
     514.  00:43D6                      		
     515.  00:43D6                      ; .movex
     516.  00:43D6                      		; ld		a,(_xoffset)
     517.  00:43D6                      		; cp	15
     518.  00:43D6                      		; jr		nz,.case0_14
     519.  00:43D6                      ; .case15
     520.  00:43D6                      		; ld 		a,(_displaypage)
     521.  00:43D6                      		; xor		1
     522.  00:43D6                      		; ld 		d,a
     523.  00:43D6                      		; ld		e,0
     524.  00:43D6                      		; jp		clrboder
     525.  00:43D6                      		
     526.  00:43D6                      ; .case0_14
     527.  00:43D6                      ; [4]		add		a,a
     528.  00:43D6                      		; ld		e,a
     529.  00:43D6                      		; add		a,16
     530.  00:43D6                      		; ld		d,a
     531.  00:43D6                      		; jp		move_block
     532.  00:43D6                      
     533.  00:43D6                      
     534.  00:43D6                      ; ;-------------------------------------
     535.  00:43D6                      ; newxmap
     536.  00:43D6                      		; call 	plot_enemy		
     537.  00:43D6                      		; call	color_enemy
     538.  00:43D6                      
     539.  00:43D6                      		; ld		hl,(_xmapx4)
     540.  00:43D6                      		; ld		a,(dxmap)
     541.  00:43D6                      		; ld		e,a
     542.  00:43D6                      		; add 	a,a
     543.  00:43D6                      		; sbc 	a,a
     544.  00:43D6                      		; ld		d,a
     545.  00:43D6                      		; add 	hl,de
     546.  00:43D6                      		; ld		(_xmapx4),hl
     547.  00:43D6                      		; repeat 2
     548.  00:43D6                      		; sra		h
     549.  00:43D6                      		; rr  	l
     550.  00:43D6                      		; endrepeat
     551.  00:43D6                      		; ld		(xmap),hl
     552.  00:43D6                      		; ld 		a,l
     553.  00:43D6                      		; and		15
     554.  00:43D6                      		; ld		(_xoffset),a
     555.  00:43D6                      		; repeat 4
     556.  00:43D6                      		; sra		h
     557.  00:43D6                      		; rr  	l
     558.  00:43D6                      		; endrepeat
     559.  00:43D6                      		; ld 		a,l
     560.  00:43D6                      		; and		1
     561.  00:43D6                      		; ld		(_displaypage),a
     562.  00:43D6                      		; ld		de,_levelmap
     563.  00:43D6                      		; add		hl,de
     564.  00:43D6                      		; ld		(_levelmap_pos),hl
     565.  00:43D6                      		; ret
     566.  00:43D6                      		
     567.  00:43D6                      ; ;-------------------------------------
     568.  00:43D6                      
     569.  00:43D6                      ; activate_window	
     570.  00:43D6                      		; ld	a,(_displaypage)
     571.  00:43D6                      ; [5]		add a,a 			; x32
     572.  00:43D6                      		; or	00011111B
     573.  00:43D6                      		; out (0x99),a
     574.  00:43D6                      		; ld a,2+128
     575.  00:43D6                      		; out (0x99),a
     576.  00:43D6                      		
     577.  00:43D6                      		; ld    A,(_yoffset)		; SCROLL DOWN
     578.  00:43D6                      		; out (0x99),a
     579.  00:43D6                      		; add    A,YSIZE-1
     580.  00:43D6                      		; ld		l,a
     581.  00:43D6                      		; ld    A,23+128
     582.  00:43D6                      		; out (0x99),a
     583.  00:43D6                      
     584.  00:43D6                      		; ld    a,l
     585.  00:43D6                      		; out (0x99),a			; set interrupt line
     586.  00:43D6                      		; ld    A,19+128
     587.  00:43D6                      		; out (0x99),a
     588.  00:43D6                      		
     589.  00:43D6                      		; ld	a,(_xoffset)		; set R#18 only if not scrolling
     590.  00:43D6                      		; add	a,-8
     591.  00:43D6                      		; and	0Fh
     592.  00:43D6                      		; out	(099h),a
     593.  00:43D6                      		; ld	a,18+128
     594.  00:43D6                      		; out	(099h),a
     595.  00:43D6                      
     596.  00:43D6                      		; ld	a,(RG8SAV)		; enable sprites
     597.  00:43D6                      		; and	11111101B
     598.  00:43D6                      		; ld	(RG8SAV),a
     599.  00:43D6                      		; out	(0x99),a
     600.  00:43D6                      		; ld	a,8+128
     601.  00:43D6                      		; out	(0x99),a
     602.  00:43D6                      
     603.  00:43D6                      		; ret
     604.  00:43D6                      			
     605.  00:43D6                      ; ;-------------------------------------
     606.  00:43D6                      	
     607.  00:43D6                      ; changedir:
     608.  00:43D6                      		; ld		a,(_dxmap)
     609.  00:43D6                      		; and		128
     610.  00:43D6                      		; ld		b,a
     611.  00:43D6                      		; inc		hl
     612.  00:43D6                      		; ld		a,(dxmap)		; dxmap
     613.  00:43D6                      		; ld		c,a
     614.  00:43D6                      		; and		128
     615.  00:43D6                      		; xor		b				; compare signs
     616.  00:43D6                      		; jp		z,nodirchange
     617.  00:43D6                      		; ld		(_dxchng),a		; a<>0
     618.  00:43D6                      		; bit		7,c
     619.  00:43D6                      		; jr		z,.right
     620.  00:43D6                      ; .left
     621.  00:43D6                      		; call	plot_line_lft1
     622.  00:43D6                      		; ld 		a,(_displaypage)
     623.  00:43D6                      		; xor		1
     624.  00:43D6                      		; ld 		d,a
     625.  00:43D6                      		; ld		e,0
     626.  00:43D6                      		; call	clrboder
     627.  00:43D6                      		; call	plot_line_lft2
     628.  00:43D6                      		; jp		newxmap
     629.  00:43D6                      
     630.  00:43D6                      ; .right
     631.  00:43D6                      		; call	plot_line_rgt1
     632.  00:43D6                      		; ld 		a,(_displaypage)
     633.  00:43D6                      		; xor		1
     634.  00:43D6                      		; ld 		d,a
     635.  00:43D6                      		; ld		e,240
     636.  00:43D6                      		; call	clrboder
     637.  00:43D6                      		; call	plot_line_rgt2
     638.  00:43D6                      		; jp		newxmap
     639.  00:43D6                      
     640.  00:43D6                      ; nodirchange:
     641.  00:43D6                      		; ld		a,(_dxchng)
     642.  00:43D6                      		; and		a
     643.  00:43D6                      		; jr		nz,1f
     644.  00:43D6                      		; bit		7,c
     645.  00:43D6                      		; jp		z,inc_xoffset
     646.  00:43D6                      		; jp		dec_xoffset
     647.  00:43D6                      	
     648.  00:43D6                      ; 1:		xor	a
     649.  00:43D6                      		; ld		(_dxchng),a
     650.  00:43D6                      		; bit		7,c
     651.  00:43D6                      		; jp		z,.right
     652.  00:43D6                      ; .left
     653.  00:43D6                      		; call	plot_line_lft1
     654.  00:43D6                      		; ld		e,240-16
     655.  00:43D6                      		; ld		d,240
     656.  00:43D6                      		; call	move_block
     657.  00:43D6                      		; call	plot_line_lft2
     658.  00:43D6                      		; jp		newxmap
     659.  00:43D6                      
     660.  00:43D6                      ; .right
     661.  00:43D6                      		; call	plot_line_rgt1
     662.  00:43D6                      		; ld		e,16
     663.  00:43D6                      		; ld		d,0
     664.  00:43D6                      		; call	move_block
     665.  00:43D6                      		; call	plot_line_rgt2
     666.  00:43D6                      		; jp		newxmap
     667.  00:43D6                      
     668.  00:43D6                      ; ;-------------------------------------
      40   00:43D6                      		include fsmscroll.asm
       1.  00:43D6                      
       2.  00:43D6                      
       3.  00:43D6                      xscroll:
       4.  00:43D6  3A 24 CA            		ld		a,(_xoffset)		; set R#18 
       5.  00:43D9                      
       6.  00:43D9  C6 F8               		add		a,-8
       7.  00:43DB  E6 0F               		and		0Fh
       8.  00:43DD  D3 99               		out		(099h),a
       9.  00:43DF  3E 92               		ld		a,18+128
      10.  00:43E1  D3 99               		out		(099h),a
      11.  00:43E3                      		
      12.  00:43E3  C9                  		ret
      13.  00:43E4                      
      14.  00:43E4                      pageswap:
      15.  00:43E4                      
      16.  00:43E4  3A 23 CA            		ld		a,(_displaypage)
      17.  00:43E7  A7                  		and		a
      18.  00:43E8  3E 1F               		ld		a,00011111B			; page 0
      19.  00:43EA  28 02               		jr		z,1f
      20.  00:43EC  3E 3F               		ld		a,00111111B			; page 1
      21.  00:43EE  D3 99               1:		out 	(0x99),a
      22.  00:43F0  3E 82               		ld 		a,2+128
      23.  00:43F2  D3 99               		out 	(0x99),a
      24.  00:43F4  C9                  		ret
      25.  00:43F5                      		
      26.  00:43F5                      		
      27.  00:43F5                      set_displaypage:
      28.  00:43F5  2A 1D CA            		ld		hl,(_xmappos)		; corner top left of the screen window in the map in pixels
      29.  00:43F8  3E 0F               		ld		a,15
      30.  00:43FA  A5                  		and		l
      31.  00:43FB  32 24 CA            		ld		(_xoffset),a		; screen offset
      32.  00:43FE                      
      33.  00:43FE  3A 23 CA            		ld		a,(_displaypage)
      34.  00:4401  67                  		ld		h,a
      35.  00:4402                      
      36.  00:4402  3E 10               		ld		a,16
      37.  00:4404  A5                  		and		l
      38.  00:4405                      		
      39.  00:4405  28 02               		jr		z,1f
      40.  00:4407                      		
      41.  00:4407  3E 01               		ld		a,1
      42.  00:4409                      		
      43.  00:4409  32 23 CA            1:		ld		(_displaypage),a
      44.  00:440C  AC                  		xor		h
      45.  00:440D  C8                  		ret		z	
      46.  00:440E  32 10 CA            		ld		(_sliceflag_reset),a 	; page has changed !
      47.  00:4411  C9                  		ret
      48.  00:4412                      
      49.  00:4412                      reset_sliceflag:
      50.  00:4412  3A 10 CA            		ld		a,(_sliceflag_reset)
      51.  00:4415  A7                  		and		a
      52.  00:4416  C8                  		ret		z	; _sliceflag_reset testing
      53.  00:4417                      
      54.  00:4417  D9                  		exx			; clear _sliceflag and _sliceflag_reset
      55.  00:4418  01 10 00            		ld	bc,16			
      56.  00:441B  21 00 CA            		ld	hl,_sliceflag
      57.  00:441E  11 01 CA            		ld	de,_sliceflag+1
      58.  00:4421  70                  		ld	(hl),b
      59.  00:4422  ED B0               		ldir
      60.  00:4424  D9                  		exx
      61.  00:4425  C9                  		ret
      62.  00:4426                      		
      63.  00:4426                      		
      64.  00:4426                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      65.  00:4426                      ; test code to move a marker
      66.  00:4426                      ;
      67.  00:4426                      ; returns
      68.  00:4426                      ; _xspeed change pressing right and left
      69.  00:4426                      
      70.  00:4426                      changespeed:		
      71.  00:4426  3A 1B CA            		ld	a,(joystick)
      72.  00:4429  6F                  		ld	l,a
      73.  00:442A                      		
      74.  00:442A  CB 7D               		bit 7,l
      75.  00:442C  20 16               		jr	nz,.notright
      76.  00:442E                      
      77.  00:442E  2A 20 CA            		ld	hl,(_xspeed)
      78.  00:4431  7C                  		ld	a,h
      79.  00:4432  25                  		dec	h
      80.  00:4433  F0                  		ret	p		; if hl>1.0 exit
      81.  00:4434  23                  		inc	hl
      82.  00:4435  24                  		inc	h
      83.  00:4436  22 20 CA            		ld	(_xspeed),hl
      84.  00:4439  AC                  		xor	h
      85.  00:443A  E6 80               		and	128							;dir change neg to pos
      86.  00:443C  32 22 CA            		ld		(_dxchng),a 			; direction has changed !
      87.  00:443F  C8                  		ret	z		
      88.  00:4440  32 10 CA            		ld		(_sliceflag_reset),a 	; reset slice flags
      89.  00:4443  C9                  		ret
      90.  00:4444                      		
      91.  00:4444                      .notright:
      92.  00:4444  CB 65               		bit 4,l
      93.  00:4446  C0                  		ret	nz
      94.  00:4447                      		
      95.  00:4447  2A 20 CA            		ld	hl,(_xspeed)
      96.  00:444A  7C                  		ld	a,h
      97.  00:444B  2B                  		dec	hl
      98.  00:444C  24                  		inc	h
      99.  00:444D  F8                  		ret	m		; if hl<-1.0 exit
     100.  00:444E  25                  		dec	h
     101.  00:444F  22 20 CA            		ld	(_xspeed),hl
     102.  00:4452  AC                  		xor	h
     103.  00:4453  E6 80               		and	128							;dir change neg to pos
     104.  00:4455  32 22 CA            		ld		(_dxchng),a 			; direction has changed !
     105.  00:4458  C8                  		ret	z
     106.  00:4459  32 10 CA            		ld		(_sliceflag_reset),a 	; reset slice flags
     107.  00:445C  C9                  		ret
     108.  00:445D                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     109.  00:445D                      				
     110.  00:445D                      changexpos:
     111.  00:445D  ED 5B 20 CA         		ld	de,(_xspeed)
     112.  00:4461  3A 1F CA            		ld	a,(_xmappos+2)
     113.  00:4464  83                  		add	a,e
     114.  00:4465  32 1F CA            		ld	(_xmappos+2),a
     115.  00:4468  5A                  		ld	e,d
     116.  00:4469  CB 7A               		bit	7,d
     117.  00:446B  16 00               		ld	d,0
     118.  00:446D  28 02               		jr	z,1f
     119.  00:446F  16 FF               		ld	d,-1
     120.  00:4471  2A 1D CA            1:		ld	hl,(_xmappos)
     121.  00:4474  ED 5A               		adc	hl,de
     122.  00:4476  7C                  		ld	a,h
     123.  00:4477  E6 0F               		and	15
     124.  00:4479  67                  		ld	h,a
     125.  00:447A  22 1D CA            		ld	(_xmappos),hl			; scroll one pixel right
     126.  00:447D  C9                  		ret
     127.  00:447E                      		
      41   00:447E                      		include vdpcmds.asm
       1.  00:447E                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       2.  00:447E                      ; hl	-> 256 tile data (columnwise)
       3.  00:447E                      ; destination:
       4.  00:447E                      ; 	d,e = dy,dx
       5.  00:447E                      ;	b = page
       6.  00:447E                      ;
       7.  00:447E                      LMMC_tile:
       8.  00:447E  3E 24               		ld 		a, 36
       9.  00:4480  D3 99               		out 	(0x99),a
      10.  00:4482  3E 91               		ld 		a, 17+128
      11.  00:4484  D3 99               		out 	(0x99),a
      12.  00:4486                      
      13.  00:4486  0E 9B               		ld		c,0x9B
      14.  00:4488  ED 59               		out 	(c), e 			; dx
      15.  00:448A  AF                  		xor		a
      16.  00:448B  D3 9B               		out 	(0x9B), a		; dx (high)
      17.  00:448D                      
      18.  00:448D  ED 51               		out 	(c), d			; dy
      19.  00:448F                      								; destination page
      20.  00:448F  ED 41               		out 	(c), b			; dy (high-> page 0 or 1)
      21.  00:4491                      		
      22.  00:4491  06 10               		ld 		b,16
      23.  00:4493  ED 41               		out 	(c), b			; x block size
      24.  00:4495  D3 9B               		out 	(0x9B), a
      25.  00:4497                      
      26.  00:4497  ED 41               		out 	(c), b			; y block size
      27.  00:4499  D3 9B               		out 	(0x9B), a
      28.  00:449B                      
      29.  00:449B  ED A3               		outi					; 1st byte color
      30.  00:449D  D3 9B               		out 	(0x9B), a		; normal tracing
      31.  00:449F                      
      32.  00:449F  3E F0               		ld		a,0xF0			; HMMC
      33.  00:44A1  D3 9B               		out 	(0x9B), a
      34.  00:44A3                      
      35.  00:44A3  3E AC               		ld 		a, 44 + 128
      36.  00:44A5  D3 99               		out 	(0x99),a
      37.  00:44A7  3E 91               		ld 		a, 17+128
      38.  00:44A9  D3 99               		out 	(0x99),a
      39.  00:44AB                      		
      40.  00:44AB                      		
      41.  00:44AB  11 0F 00            		ld		de,15
      42.  00:44AE  43                  		ld		b,e					; 15 other bytes
      43.  00:44AF  3E 10               		ld		a,16
      44.  00:44B1                      		
      45.  00:44B1  19                  1:		add		hl,de
      46.  00:44B2  ED A3               		outi						; other byte color
      47.  00:44B4  C2 B1 44            		jp		nz,1b
      48.  00:44B7  25                  		dec	h
      49.  00:44B8  23                  		inc	hl
      50.  00:44B9  06 10               		ld		b,16
      51.  00:44BB  3D                  		dec		a
      52.  00:44BC  C2 B1 44            		jp		nz,1b
      53.  00:44BF                      	
      54.  00:44BF  C9                  		ret
      55.  00:44C0                      
      56.  00:44C0                      
      57.  00:44C0                      	
      58.  00:44C0                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      59.  00:44C0                      ; input
      60.  00:44C0                      ; a = tile number	from page 0
      61.  00:44C0                      ; 
      62.  00:44C0                      ; d = dx	
      63.  00:44C0                      ; e = dy	
      64.  00:44C0                      ; b = destination page 
      65.  00:44C0                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      66.  00:44C0                      
      67.  00:44C0                      ; destructible tiles have to be in range 0..n-1 in the tile set
      68.  00:44C0                      
      69.  00:44C0                      move_tile:
      70.  00:44C0  67                  		ld		h,a
      71.  00:44C1  E6 0F               		and		00001111B	
      72.  00:44C3  87 87 87 87         [4]		add		a,a					
      73.  00:44C7  6F                  		ld		l,a			; sx
      74.  00:44C8  7C                  		ld		a,h
      75.  00:44C9  E6 F0               		and		11110000B	; tiles are under the lower border						
      76.  00:44CB  C6 B0               		add		a,160+16
      77.  00:44CD  67                  		ld		h,a			; sy
      78.  00:44CE                      
      79.  00:44CE  3E 20               		ld 		a, 32
      80.  00:44D0  D3 99               		out 	(0x99),a
      81.  00:44D2  3E 91               		ld 		a, 17+128
      82.  00:44D4  D3 99               		out 	(0x99),a
      83.  00:44D6                      
      84.  00:44D6  0E 9B               		ld 		c, 0x9B
      85.  00:44D8                      		
      86.  00:44D8  CD 4D 42            		call _waitvdp				; do not change R#18 if the VDP is copying !! NEEDED FOR NTSC
      87.  00:44DB                      				
      88.  00:44DB  ED 69               		out		(c), l 				; sx
      89.  00:44DD  AF                  		xor 	a
      90.  00:44DE  D3 9B               		out		(0x9B), a 			; sx (high)
      91.  00:44E0                      		
      92.  00:44E0  ED 61               		out		(c), h 	     		; sy
      93.  00:44E2  3E 01               		ld		a,1					; source page
      94.  00:44E4  D3 9B               		out 	(0x9B), a 			; sy 	(high-> page 0 or 1)
      95.  00:44E6                      
      96.  00:44E6  ED 51               		out 	(c), d 				; dx
      97.  00:44E8  AF                  		xor 	a
      98.  00:44E9  D3 9B               		out 	(0x9B), a			; dx (high)
      99.  00:44EB                      		
     100.  00:44EB  ED 59               		out 	(c), e	 			; dy
     101.  00:44ED  ED 41               		out 	(c), b				; dy 	(high-> page 0 or 1)
     102.  00:44EF                      
     103.  00:44EF  2E 10               		ld 		l,16 				
     104.  00:44F1  ED 69               		out 	(c), l			; x block size
     105.  00:44F3  AF                  		xor 	a
     106.  00:44F4  D3 9B               		out 	(0x9B), a					
     107.  00:44F6  ED 69               		out 	(c), l			; y block size
     108.  00:44F8  D3 9B               		out 	(0x9B), a
     109.  00:44FA  D3 9B               		out 	(0x9B), a
     110.  00:44FC  D3 9B               		out 	(0x9B), a
     111.  00:44FE                      
     112.  00:44FE  3E D0               		ld		a,11010000B
     113.  00:4500  D3 9B               		out 	(0x9B), a			; command HMMM
     114.  00:4502  C9                  		ret
     115.  00:4503                      
     116.  00:4503                      
     117.  00:4503                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     118.  00:4503                      ; input
     119.  00:4503                      ; b = sx	from  _displaypage
     120.  00:4503                      ; d = dx	to not _displaypage
     121.  00:4503                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     122.  00:4503                      
     123.  00:4503                      move_slice:
     124.  00:4503  3E 20               		ld 		a, 32
     125.  00:4505  D3 99               		out 	(0x99),a
     126.  00:4507  3E 91               		ld 		a, 17+128
     127.  00:4509  D3 99               		out 	(0x99),a
     128.  00:450B                      
     129.  00:450B  0E 9B               		ld 		c, 0x9B
     130.  00:450D                      		
     131.  00:450D                      		; call _waitvdp				; no need ATM
     132.  00:450D                      		
     133.  00:450D  ED 41               		out		(c), b 				; sx
     134.  00:450F  AF                  		xor a
     135.  00:4510  D3 9B               		out		(0x9B), a 			; sx (high)
     136.  00:4512                      		
     137.  00:4512  D3 9B               		out		(0x9B), a 			; sy
     138.  00:4514  3A 23 CA            		ld 		a,(_displaypage)	; source page
     139.  00:4517  D3 9B               		out 	(0x9B), a 			; sy 	(high-> page 0 or 1)
     140.  00:4519                      
     141.  00:4519  ED 51               		out 	(c), d 				; dx
     142.  00:451B  AF                  		xor a
     143.  00:451C  D3 9B               		out 	(0x9B), a			; dx (high)
     144.  00:451E                      		
     145.  00:451E  D3 9B               		out 	(0x9B), a 			; dy
     146.  00:4520  3A 23 CA            		ld 		a,(_displaypage)	; destination page
     147.  00:4523  EE 01               		xor	1				
     148.  00:4525  D3 9B               		out 	(0x9B), a			; dy 	(high-> page 0 or 1)
     149.  00:4527                      
     150.  00:4527  3E 10               		ld 		a,16 				; block size
     151.  00:4529  D3 9B               		out 	(0x9B), a
     152.  00:452B  AF                  		xor a
     153.  00:452C  D3 9B               		out 	(0x9B), a	
     154.  00:452E  3E A0               		ld		a,10*16				; mapHeight*16
     155.  00:4530  D3 9B               		out 	(0x9B), a			; y block size
     156.  00:4532  AF                  		xor		a
     157.  00:4533  D3 9B               		out 	(0x9B), a
     158.  00:4535  D3 9B               		out 	(0x9B), a
     159.  00:4537  D3 9B               		out 	(0x9B), a
     160.  00:4539                      
     161.  00:4539  3E D0               		ld		a,11010000B
     162.  00:453B  D3 9B               		out 	(0x9B), a			; command HMMM
     163.  00:453D  C9                  		ret
     164.  00:453E                      		
     165.  00:453E                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     166.  00:453E                      ; input
     167.  00:453E                      ; d = page
     168.  00:453E                      ; e = dx
     169.  00:453E                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     170.  00:453E                      		
     171.  00:453E                      clear_slice:
     172.  00:453E  3E 24               		ld 		a, 36
     173.  00:4540  D3 99               		out 	(0x99),a
     174.  00:4542  3E 91               		ld 		a, 17+128
     175.  00:4544  D3 99               		out 	(0x99),a
     176.  00:4546                      		
     177.  00:4546  0E 9B               		ld 		c, 0x9B
     178.  00:4548                      		
     179.  00:4548                      		; call _waitvdp
     180.  00:4548                      		
     181.  00:4548  ED 59               		out 	(c), e 			; dx
     182.  00:454A  AF                  		xor		a
     183.  00:454B  D3 9B               		out 	(0x9B), a		; dx (high)
     184.  00:454D                      		
     185.  00:454D  D3 9B               		out 	(0x9B), a		; dy
     186.  00:454F                      								; destination page
     187.  00:454F  ED 51               		out 	(c), d			; dy (high-> page 0 or 1)
     188.  00:4551                      		
     189.  00:4551  3E 10               		ld 		a,16
     190.  00:4553  D3 9B               		out 	(0x9B), a			; x block size
     191.  00:4555  AF                  		xor		a
     192.  00:4556  D3 9B               		out 	(0x9B), a
     193.  00:4558                      
     194.  00:4558  3E A0               		ld		a,10*16				; mapHeight*16
     195.  00:455A  D3 9B               		out 	(0x9B), a			; y block size
     196.  00:455C  AF                  		xor a
     197.  00:455D  D3 9B               		out 	(0x9B), a
     198.  00:455F                      
     199.  00:455F  D3 9B               		out 	(0x9B), a			; border_color
     200.  00:4561  D3 9B               		out 	(0x9B), a
     201.  00:4563                      
     202.  00:4563  3E C0               		ld		a,11000000B
     203.  00:4565  D3 9B               		out 	(0x9B), a			; command HMMV
     204.  00:4567  C9                  		ret
      42   00:4568                      		include brdrs_opt.asm
       1.  00:4568                      brdrs_left:
       2.  00:4568                      		bdrclr 11100000B
       2.  00:4568                    >   if debug
       2.  00:4568                    >   ifdif n,0
       2.  00:4568  3E E0             >    ld  a,n
       2.  00:456A                    >   else
       2.  00:456A                    ~    xor a
       2.  00:456A                    ~   endif
       2.  00:456A  D3 99             >   out  (0x99),a
       2.  00:456C  3E 87             >   ld  a,7+128
       2.  00:456E  D3 99             >   out  (0x99),a
       2.  00:4570                    >   endif
       3.  00:4570  CD B3 45            		call	vdp_task_left
       4.  00:4573                      		bdrclr 0
       4.  00:4573                    >   if debug
       4.  00:4573                    >   ifdif n,0
       4.  00:4573                    ~    ld  a,n
       4.  00:4573                    ~   else
       4.  00:4573  AF                >    xor a
       4.  00:4574                    >   endif
       4.  00:4574  D3 99             >   out  (0x99),a
       4.  00:4576  3E 87             >   ld  a,7+128
       4.  00:4578  D3 99             >   out  (0x99),a
       4.  00:457A                    >   endif
       5.  00:457A  CD 0A 46            		call	_brdrs_left
       6.  00:457D  3A 24 CA            		ld		a,(_xoffset)
       7.  00:4580  A7                  		and		a
       8.  00:4581  CC C1 46            		call	z,colmn_patch_left
       9.  00:4584                      		bdrclr 11100000B
       9.  00:4584                    >   if debug
       9.  00:4584                    >   ifdif n,0
       9.  00:4584  3E E0             >    ld  a,n
       9.  00:4586                    >   else
       9.  00:4586                    ~    xor a
       9.  00:4586                    ~   endif
       9.  00:4586  D3 99             >   out  (0x99),a
       9.  00:4588  3E 87             >   ld  a,7+128
       9.  00:458A  D3 99             >   out  (0x99),a
       9.  00:458C                    >   endif
      10.  00:458C  C9                  		ret
      11.  00:458D                      
      12.  00:458D                      brdrs_right:
      13.  00:458D                      		bdrclr 11100000B
      13.  00:458D                    >   if debug
      13.  00:458D                    >   ifdif n,0
      13.  00:458D  3E E0             >    ld  a,n
      13.  00:458F                    >   else
      13.  00:458F                    ~    xor a
      13.  00:458F                    ~   endif
      13.  00:458F  D3 99             >   out  (0x99),a
      13.  00:4591  3E 87             >   ld  a,7+128
      13.  00:4593  D3 99             >   out  (0x99),a
      13.  00:4595                    >   endif
      14.  00:4595  CD DF 45            		call	vdp_task_right
      15.  00:4598                      		bdrclr 0
      15.  00:4598                    >   if debug
      15.  00:4598                    >   ifdif n,0
      15.  00:4598                    ~    ld  a,n
      15.  00:4598                    ~   else
      15.  00:4598  AF                >    xor a
      15.  00:4599                    >   endif
      15.  00:4599  D3 99             >   out  (0x99),a
      15.  00:459B  3E 87             >   ld  a,7+128
      15.  00:459D  D3 99             >   out  (0x99),a
      15.  00:459F                    >   endif
      16.  00:459F  CD 49 46            		call	_brdrs_right
      17.  00:45A2  3A 24 CA            		ld		a,(_xoffset)
      18.  00:45A5  FE 0F               		cp		15
      19.  00:45A7  CC 88 46            		call	z,colmn_patch_right
      20.  00:45AA                      		bdrclr 11100000B
      20.  00:45AA                    >   if debug
      20.  00:45AA                    >   ifdif n,0
      20.  00:45AA  3E E0             >    ld  a,n
      20.  00:45AC                    >   else
      20.  00:45AC                    ~    xor a
      20.  00:45AC                    ~   endif
      20.  00:45AC  D3 99             >   out  (0x99),a
      20.  00:45AE  3E 87             >   ld  a,7+128
      20.  00:45B0  D3 99             >   out  (0x99),a
      20.  00:45B2                    >   endif
      21.  00:45B2  C9                  		ret
      22.  00:45B3                      		
      23.  00:45B3                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;		
      24.  00:45B3                      vdp_task_left:
      25.  00:45B3  3A 22 CA            		ld		a,(_dxchng)
      26.  00:45B6  A7                  		and		a
      27.  00:45B7                      		; ld		a,0
      28.  00:45B7                      		; ld		(_dxchng),a
      29.  00:45B7  20 10               		jr		nz,.x15
      30.  00:45B9                      
      31.  00:45B9                      		;  _sliceflag management 
      32.  00:45B9                      		; NOTE _sliceflag has to be byte aligned!!
      33.  00:45B9                      		
      34.  00:45B9  3A 24 CA            		ld		a,(_xoffset)
      35.  00:45BC  5F                  		ld		e,a
      36.  00:45BD  16 CA               		ld		d,high _sliceflag
      37.  00:45BF  1A                  		ld		a,(de)
      38.  00:45C0  A7                  		and		a
      39.  00:45C1  C0                  		ret		nz		; avoid twice the same VDP command
      40.  00:45C2  3D                  		dec		a
      41.  00:45C3  12                  		ld		(de),a
      42.  00:45C4                      
      43.  00:45C4                      		
      44.  00:45C4  7B                  		ld		a,e
      45.  00:45C5  FE 0F               		cp		15
      46.  00:45C7  20 0B               		jr		nz,.x0_14
      47.  00:45C9                      .x15:		
      48.  00:45C9  3A 23 CA            		ld		a,(_displaypage)
      49.  00:45CC  EE 01               		xor		1
      50.  00:45CE  57                  		ld		d,a
      51.  00:45CF  1E 00               		ld		e,0
      52.  00:45D1  C3 3E 45            		jp 		clear_slice
      53.  00:45D4                      
      54.  00:45D4                      .x0_14:
      55.  00:45D4  87 87 87 87         [4]		add		a,a
      56.  00:45D8  47                  		ld		b,a			; source slice
      57.  00:45D9  C6 10               		add		a,16
      58.  00:45DB  57                  		ld		d,a			; destination slice
      59.  00:45DC  C3 03 45            		jp		move_slice
      60.  00:45DF                      
      61.  00:45DF                      
      62.  00:45DF                      vdp_task_right:
      63.  00:45DF  3A 22 CA            		ld		a,(_dxchng)
      64.  00:45E2  A7                  		and		a
      65.  00:45E3                      		; ld		a,0
      66.  00:45E3                      		; ld		(_dxchng),a
      67.  00:45E3  20 0F               		jr		nz,.x0
      68.  00:45E5                      		
      69.  00:45E5                      		;  _sliceflag management 
      70.  00:45E5                      		; NOTE _sliceflag has to be byte aligned!!
      71.  00:45E5                      		
      72.  00:45E5  3A 24 CA            		ld		a,(_xoffset)
      73.  00:45E8  5F                  		ld		e,a
      74.  00:45E9  16 CA               		ld		d,high _sliceflag
      75.  00:45EB  1A                  		ld		a,(de)
      76.  00:45EC  A7                  		and		a
      77.  00:45ED  C0                  		ret		nz		; avoid twice the same VDP command
      78.  00:45EE  3D                  		dec		a
      79.  00:45EF  12                  		ld		(de),a
      80.  00:45F0                      
      81.  00:45F0  7B                  		ld		a,e
      82.  00:45F1  A7                  		and		a
      83.  00:45F2  20 0B               		jr		nz,.x1_15
      84.  00:45F4                      .x0:		
      85.  00:45F4  3A 23 CA            		ld		a,(_displaypage)
      86.  00:45F7  EE 01               		xor		1
      87.  00:45F9  57                  		ld		d,a
      88.  00:45FA  1E F0               		ld		e,240
      89.  00:45FC  C3 3E 45            		jp 		clear_slice
      90.  00:45FF                      
      91.  00:45FF                      .x1_15:
      92.  00:45FF  87 87 87 87         [4]		add		a,a
      93.  00:4603  47                  		ld		b,a			; source slice
      94.  00:4604  D6 10               		sub		a,16
      95.  00:4606  57                  		ld		d,a			; destination slice
      96.  00:4607  C3 03 45            		jp		move_slice
      97.  00:460A                      
      98.  00:460A                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;		
      99.  00:460A                      	; hl -> tile column in the map
     100.  00:460A                      _brdrs_left:
     101.  00:460A  3A 24 CA            		ld		a,(_xoffset)
     102.  00:460D  5F                  		ld		e,a
     103.  00:460E  C6 F0               		add		a,240
     104.  00:4610  DD 6F               		ld		ixl,a
     105.  00:4612                      
     106.  00:4612  0E 98               		ld	c,0x98
     107.  00:4614                      				
     108.  00:4614  3A 23 CA            		ld	a,(_displaypage)
     109.  00:4617  87 87               [2] 	add a,a
     110.  00:4619  D3 99               		out (0x99),a 	; set bits 14-16
     111.  00:461B  3E 8E               		ld a,14+128
     112.  00:461D  D3 99               		out (0x99),a
     113.  00:461F                      
     114.  00:461F  16 40               		ld	d,0x40		; write access
     115.  00:4621  CD EF 46            		call plot_col64
     116.  00:4624                      
     117.  00:4624  3A 23 CA            		ld	a,(_displaypage)
     118.  00:4627  87 87               [2] 	add a,a
     119.  00:4629  F6 01               		or	1
     120.  00:462B  D3 99               		out (0x99),a 	; set bits 14-16
     121.  00:462D  3E 8E               		ld a,14+128
     122.  00:462F  D3 99               		out (0x99),a
     123.  00:4631                      
     124.  00:4631  16 40               		ld	d,0x40		; write access	
     125.  00:4633  CD EF 46            		call	plot_col64
     126.  00:4636                      		
     127.  00:4636  3A 23 CA            		ld	a,(_displaypage)
     128.  00:4639  87 87               [2] 	add a,a
     129.  00:463B  F6 02               		or	2
     130.  00:463D  D3 99               		out (0x99),a 	; set bits 14-16
     131.  00:463F  3E 8E               		ld a,14+128
     132.  00:4641  D3 99               		out (0x99),a
     133.  00:4643                      
     134.  00:4643  16 40               		ld	d,0x40		; write access	
     135.  00:4645  CD F2 46            		call	plot_col32
     136.  00:4648                      				
     137.  00:4648  C9                  		ret
     138.  00:4649                      
     139.  00:4649                      
     140.  00:4649                      	; hl -> tile column in the map
     141.  00:4649                      		
     142.  00:4649                      _brdrs_right:
     143.  00:4649  3A 24 CA            		ld		a,(_xoffset)
     144.  00:464C  DD 6F               		ld		ixl,a
     145.  00:464E  C6 F0               		add		a,240
     146.  00:4650  5F                  		ld		e,a
     147.  00:4651                      
     148.  00:4651  0E 98               		ld	c,0x98
     149.  00:4653                      				
     150.  00:4653  3A 23 CA            		ld	a,(_displaypage)
     151.  00:4656  87 87               [2] 	add a,a
     152.  00:4658  D3 99               		out (0x99),a 	; set bits 14-16
     153.  00:465A  3E 8E               		ld a,14+128
     154.  00:465C  D3 99               		out (0x99),a
     155.  00:465E                      
     156.  00:465E  16 40               		ld	d,0x40		; write access
     157.  00:4660  CD EF 46            		call plot_col64
     158.  00:4663                      
     159.  00:4663  3A 23 CA            		ld	a,(_displaypage)
     160.  00:4666  87 87               [2] 	add a,a
     161.  00:4668  F6 01               		or	1
     162.  00:466A  D3 99               		out (0x99),a 	; set bits 14-16
     163.  00:466C  3E 8E               		ld a,14+128
     164.  00:466E  D3 99               		out (0x99),a
     165.  00:4670                      
     166.  00:4670  16 40               		ld	d,0x40		; write access	
     167.  00:4672  CD EF 46            		call	plot_col64
     168.  00:4675                      		
     169.  00:4675  3A 23 CA            		ld	a,(_displaypage)
     170.  00:4678  87 87               [2] 	add a,a
     171.  00:467A  F6 02               		or	2
     172.  00:467C  D3 99               		out (0x99),a 	; set bits 14-16
     173.  00:467E  3E 8E               		ld a,14+128
     174.  00:4680  D3 99               		out (0x99),a
     175.  00:4682                      
     176.  00:4682  16 40               		ld	d,0x40		; write access	
     177.  00:4684  CD F2 46            		call	plot_col32
     178.  00:4687                      				
     179.  00:4687  C9                  		ret
     180.  00:4688                      
     181.  00:4688                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;		
     182.  00:4688                      	; small patch on last column
     183.  00:4688                      	
     184.  00:4688                      	; hl -> tile column in the map + mapHeight
     185.  00:4688                      	
     186.  00:4688                      colmn_patch_right:
     187.  00:4688  3E F6               		ld		a,-mapHeight		; return to the start of the column
     188.  00:468A  84                  		add		a,h
     189.  00:468B  67                  		ld 		h,a
     190.  00:468C                      		
     191.  00:468C                      		set_tile (hl)		; first tile in the column
     191.  00:468C  7E                >   ld a,reg
     191.  00:468D  07 07 07          > [3]  rlca
     191.  00:4690  E6 07             >   and 00000111B
     191.  00:4692  C6 04             >   add a,:_tiles0
     191.  00:4694  32 00 B0          >   ld (_kBank4),a
     191.  00:4697                    > 
     191.  00:4697  7E                >   ld a,reg
     191.  00:4698  E6 1F             >   and 00011111B
     191.  00:469A  C6 A0             >   add a,high _tiles0
     192.  00:469C                      
     193.  00:469C  67                  		ld		h,a
     194.  00:469D  2E F0               		ld		l,0xF0
     195.  00:469F                      		
     196.  00:469F  3A 23 CA            		ld		a,(_displaypage)
     197.  00:46A2  EE 01               		xor		1				; hidden page
     198.  00:46A4  87 87               [2] 	add 	a,a
     199.  00:46A6  D3 99               		out 	(0x99),a 		; set bits 14-16
     200.  00:46A8  3E 8E               		ld 		a,14+128
     201.  00:46AA  D3 99               		out 	(0x99),a
     202.  00:46AC                      
     203.  00:46AC  11 EF 40            		ld		de,0x40EF		; write access, columns 239 on hidden page
     204.  00:46AF                      				
     205.  00:46AF                      		; hl -> tile column in the tile set
     206.  00:46AF                      set2pixs:	
     207.  00:46AF  7B                  		ld 		a,e 			;set bits 0-7
     208.  00:46B0  D3 99               		out 	(0x99),a
     209.  00:46B2  7A                  		ld 		a,d 			;set bits 8-13
     210.  00:46B3  D3 99               		out 	(0x99),a
     211.  00:46B5  ED A3               		outi	
     212.  00:46B7  14                  		inc 	d
     213.  00:46B8  7B                  		ld 		a,e 			;set bits 0-7
     214.  00:46B9  D3 99               		out 	(0x99),a
     215.  00:46BB  7A                  		ld 		a,d 			;set bits 8-13
     216.  00:46BC  D3 99               		out 	(0x99),a
     217.  00:46BE  ED A3               		outi	
     218.  00:46C0  C9                  		ret
     219.  00:46C1                      
     220.  00:46C1                      	; small patch on first column
     221.  00:46C1                      	
     222.  00:46C1                      	; hl -> tile column in the map + mapHeight
     223.  00:46C1                      
     224.  00:46C1                      colmn_patch_left:
     225.  00:46C1  3E F6               		ld		a,-mapHeight		; return to the start of the column
     226.  00:46C3  84                  		add		a,h
     227.  00:46C4  67                  		ld 		h,a
     228.  00:46C5                      		
     229.  00:46C5                      		set_tile (hl)		; first tile in the column
     229.  00:46C5  7E                >   ld a,reg
     229.  00:46C6  07 07 07          > [3]  rlca
     229.  00:46C9  E6 07             >   and 00000111B
     229.  00:46CB  C6 04             >   add a,:_tiles0
     229.  00:46CD  32 00 B0          >   ld (_kBank4),a
     229.  00:46D0                    > 
     229.  00:46D0  7E                >   ld a,reg
     229.  00:46D1  E6 1F             >   and 00011111B
     229.  00:46D3  C6 A0             >   add a,high _tiles0
     230.  00:46D5                      
     231.  00:46D5  67                  		ld		h,a
     232.  00:46D6  2E 00               		ld		l,0x00
     233.  00:46D8                      		
     234.  00:46D8  3A 23 CA            		ld		a,(_displaypage)
     235.  00:46DB  EE 01               		xor		1				; hidden page
     236.  00:46DD  87 87               [2] 	add 	a,a
     237.  00:46DF  D3 99               		out 	(0x99),a 		; set bits 14-16
     238.  00:46E1  3E 8E               		ld 		a,14+128
     239.  00:46E3  D3 99               		out 	(0x99),a
     240.  00:46E5                      
     241.  00:46E5  11 10 40            		ld		de,0x4010		; write access, columns 16 on hidden page
     242.  00:46E8                      
     243.  00:46E8                      		; hl -> tile column in the tile set
     244.  00:46E8  CD AF 46            		call	set2pixs
     245.  00:46EB  14                  		inc		d
     246.  00:46EC  C3 AF 46            		jp		set2pixs
     247.  00:46EF                      		
     248.  00:46EF                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     249.  00:46EF                      		
     250.  00:46EF                      plot_col64:
     251.  00:46EF                      	; hl -> tile in the map
     252.  00:46EF  CD F2 46            		call	plot_col32
     253.  00:46F2                      plot_col32:		
     254.  00:46F2  CD F5 46            		call	plot_col16
     255.  00:46F5                      plot_col16:
     256.  00:46F5  E5                  		push	hl
     257.  00:46F6  CD FC 46            		call	_plot_col16
     258.  00:46F9  E1                  		pop		hl
     259.  00:46FA  24                  		inc h			; next line in the map 	; inc l for maps stored column-wise
     260.  00:46FB  C9                  		ret
     261.  00:46FC                      
     262.  00:46FC                      
     263.  00:46FC                      _plot_col16:
     264.  00:46FC                      		set_tile (hl)
     264.  00:46FC  7E                >   ld a,reg
     264.  00:46FD  07 07 07          > [3]  rlca
     264.  00:4700  E6 07             >   and 00000111B
     264.  00:4702  C6 04             >   add a,:_tiles0
     264.  00:4704  32 00 B0          >   ld (_kBank4),a
     264.  00:4707                    > 
     264.  00:4707  7E                >   ld a,reg
     264.  00:4708  E6 1F             >   and 00011111B
     264.  00:470A  C6 A0             >   add a,high _tiles0
     265.  00:470C                      
     266.  00:470C  67                  		ld	h,a
     267.  00:470D  3A 24 CA            		ld	a,(_xoffset)
     268.  00:4710  87 87 87 87         [4]		add	a,a
     269.  00:4714  6F                  		ld	l,a
     270.  00:4715                      
     271.  00:4715                      	; hl -> tile column in the tile set
     272.  00:4715                      	
     273.  00:4715                      		repeat 16
     274.  00:4715                    < 		ld a,e 			;set bits 0-7
     275.  00:4715                    < 		out (0x99),a
     276.  00:4715                    < 		ld a,d 			;set bits 8-13
     277.  00:4715                    < 		out (0x99),a
     278.  00:4715                    < 		outi			; 18
     279.  00:4715                    < 		ld	a,ixl 		;set bits 0-7
     280.  00:4715                    < 		out (0x99),a
     281.  00:4715                    < 		ld a,d 			;set bits 8-13
     282.  00:4715                    < 		out (0x99),a
     283.  00:4715                    < 		xor	a
     284.  00:4715                    < 		out	(0x98),a
     285.  00:4715                    < 		inc	d
     286.  00:4715                    < 		endrepeat
     286.  00:4715  7B D3 99 7A D3 99 ED A3 DD 7D D3 99 7A D3 99 AF 
     286.  00:4725  D3 98 14 7B D3 99 7A D3 99 ED A3 DD 7D D3 99 7A 
     286.  00:4735  D3 99 AF D3 98 14 7B D3 99 7A D3 99 ED A3 DD 7D 
     286.  00:4745  D3 99 7A D3 99 AF D3 98 14 7B D3 99 7A D3 99 ED 
     286.  00:4755  A3 DD 7D D3 99 7A D3 99 AF D3 98 14 7B D3 99 7A 
     286.  00:4765  D3 99 ED A3 DD 7D D3 99 7A D3 99 AF D3 98 14 7B 
     286.  00:4775  D3 99 7A D3 99 ED A3 DD 7D D3 99 7A D3 99 AF D3 
     286.  00:4785  98 14 7B D3 99 7A D3 99 ED A3 DD 7D D3 99 7A D3 
     286.  00:4795  99 AF D3 98 14 7B D3 99 7A D3 99 ED A3 DD 7D D3 
     286.  00:47A5  99 7A D3 99 AF D3 98 14 7B D3 99 7A D3 99 ED A3 
     286.  00:47B5  DD 7D D3 99 7A D3 99 AF D3 98 14 7B D3 99 7A D3 
     286.  00:47C5  99 ED A3 DD 7D D3 99 7A D3 99 AF D3 98 14 7B D3 
     286.  00:47D5  99 7A D3 99 ED A3 DD 7D D3 99 7A D3 99 AF D3 98 
     286.  00:47E5  14 7B D3 99 7A D3 99 ED A3 DD 7D D3 99 7A D3 99 
     286.  00:47F5  AF D3 98 14 7B D3 99 7A D3 99 ED A3 DD 7D D3 99 
     286.  00:4805  7A D3 99 AF D3 98 14 7B D3 99 7A D3 99 ED A3 DD 
     286.  00:4815  7D D3 99 7A D3 99 AF D3 98 14 7B D3 99 7A D3 99 
     286.  00:4825  ED A3 DD 7D D3 99 7A D3 99 AF D3 98 14 7B D3 99 
     286.  00:4835  7A D3 99 ED A3 DD 7D D3 99 7A D3 99 AF D3 98 14 
     287.  00:4845  C9                  		ret
     288.  00:4846                      		
      43   00:4846                      		include anim_opt.asm
       1.  00:4846                      	
       2.  00:4846                      		; ld		a,(_xoffset)		
       3.  00:4846                      ; [4]		add		a,a					
       4.  00:4846                      		; cp		d
       5.  00:4846                      		
       6.  00:4846                      		; if _xoffset*16 =>dx 	
       7.  00:4846                      			; b = _displaypage
       8.  00:4846                      		; else	
       9.  00:4846                      			; b = _displaypage xor 1
      10.  00:4846                      
      11.  00:4846                      		; jr		nc,1f
      12.  00:4846                      		
      13.  00:4846                      		; ld 		a,(_displaypage)	; destination page	
      14.  00:4846                      		; xor		1
      15.  00:4846                      		; ld		b,a	
      16.  00:4846                      		; ld		a,16
      17.  00:4846                      		; add		a,d
      18.  00:4846                      		; ld		d,a
      19.  00:4846                      		; ld		a,14	
      20.  00:4846                      		; jp move_tile
      21.  00:4846                      		
      22.  00:4846                      ; 1:		ld 		a,(_displaypage)	; destination page	
      23.  00:4846                      		; ld		b,a		
      24.  00:4846                      		; ld		a,15	
      25.  00:4846                      		; jp move_tile
      26.  00:4846                      
      27.  00:4846                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      28.  00:4846                      
      29.  00:4846                      
      30.  00:4846                      animtest:
      31.  00:4846  3A 16 CA            		ld	a,(anim_buffer.flag)
      32.  00:4849  A7                  		and	a
      33.  00:484A  20 2D               		jr	nz,.manage_buffer
      34.  00:484C                      
      35.  00:484C  CD 8E 48            		call 	movemarker
      36.  00:484F                      
      37.  00:484F  7B                  		ld	a,e
      38.  00:4850  32 17 CA            		ld	(anim_buffer.dy),a
      39.  00:4853                      		
      40.  00:4853  3A 21 CA            		ld		a,(_xspeed+1)
      41.  00:4856  CB 07               		rlc a
      42.  00:4858  7A                  		ld	a,d
      43.  00:4859  DA 60 48            		jp	c,.scroll_left
      44.  00:485C  D6 10               		sub	a,16
      45.  00:485E  18 02               		jr		1f
      46.  00:4860                      .scroll_left:
      47.  00:4860  C6 10               		add	a,16
      48.  00:4862  32 18 CA            1:		ld	(anim_buffer.dx),a
      49.  00:4865                      		
      50.  00:4865  3A 23 CA            		ld 		a,(_displaypage)	; destination page	
      51.  00:4868  47                  		ld		b,a		
      52.  00:4869  EE 01               		xor		1
      53.  00:486B  32 1A CA            		ld		(anim_buffer.page),a
      54.  00:486E                      		
      55.  00:486E  3E 0F               		ld		a,15	
      56.  00:4870  32 19 CA            		ld		(anim_buffer.tile),a
      57.  00:4873  32 16 CA            		ld		(anim_buffer.flag),a
      58.  00:4876                      		
      59.  00:4876  C3 C0 44            		jp move_tile
      60.  00:4879                      
      61.  00:4879                      	
      62.  00:4879                      .manage_buffer:
      63.  00:4879  AF                  		xor	a
      64.  00:487A  32 16 CA            		ld	(anim_buffer.flag),a
      65.  00:487D                      		
      66.  00:487D  3A 17 CA            		ld	a,(anim_buffer.dy)
      67.  00:4880  5F                  		ld	e,a
      68.  00:4881                      		
      69.  00:4881  3A 18 CA            		ld	a,(anim_buffer.dx)
      70.  00:4884  57                  		ld	d,a
      71.  00:4885                      		
      72.  00:4885  3A 1A CA            		ld	a,(anim_buffer.page)
      73.  00:4888  47                  		ld	b,a
      74.  00:4889                      		
      75.  00:4889  3E 0F               		ld	a,15	; c
      76.  00:488B  C3 C0 44            		jp move_tile
      77.  00:488E                      		
      78.  00:488E                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      79.  00:488E                      ; test code to move a marker
      80.  00:488E                      ;
      81.  00:488E                      ; returns
      82.  00:488E                      ; d = dx	
      83.  00:488E                      ; e = dy	
      84.  00:488E                      
      85.  00:488E                      movemarker:		
      86.  00:488E  1E 08               		ld	e,8
      87.  00:4890  CD DA 48            		call	checkkbd
      88.  00:4893  32 1B CA            		ld	(joystick),a
      89.  00:4896                      
      90.  00:4896  CB 7D               		bit 7,l
      91.  00:4898  20 0A               		jr	nz,notright
      92.  00:489A  3A 14 CA            		ld	a,(_xtest)
      93.  00:489D  C6 10               		add	a,16
      94.  00:489F  32 14 CA            		ld	(_xtest),a
      95.  00:48A2  18 0C               		jr	1f
      96.  00:48A4                      notright:
      97.  00:48A4  CB 65               		bit 4,l
      98.  00:48A6  20 08               		jr	nz,1f
      99.  00:48A8  3A 14 CA            		ld	a,(_xtest)
     100.  00:48AB  D6 10               		sub	a,16
     101.  00:48AD  32 14 CA            		ld	(_xtest),a
     102.  00:48B0                      1:		
     103.  00:48B0  3A 14 CA            		ld		a,(_xtest)
     104.  00:48B3  57                  		ld		d,a
     105.  00:48B4                      
     106.  00:48B4  CB 6D               		bit 5,l
     107.  00:48B6  20 0D               		jr	nz,notup
     108.  00:48B8  3A 15 CA            		ld	a,(_ytest)
     109.  00:48BB  D6 10               		sub	a,16
     110.  00:48BD  DA D5 48            		jp	c,1f
     111.  00:48C0  32 15 CA            		ld	(_ytest),a
     112.  00:48C3  18 10               		jr	1f
     113.  00:48C5                      notup:
     114.  00:48C5  CB 75               		bit 6,l
     115.  00:48C7  20 0C               		jr	nz,1f
     116.  00:48C9  3A 15 CA            		ld	a,(_ytest)
     117.  00:48CC  C6 10               		add	a,16
     118.  00:48CE  FE A0               		cp	10*16
     119.  00:48D0  28 03               		jr	z,1f
     120.  00:48D2  32 15 CA            		ld	(_ytest),a
     121.  00:48D5                      1:
     122.  00:48D5  3A 15 CA            		ld	a,(_ytest)
     123.  00:48D8  5F                  		ld		e,a
     124.  00:48D9  C9                  		ret
     125.  00:48DA                      		
     126.  00:48DA                      		
     127.  00:48DA                      		
      44   00:48DA                      		
      45   00:48DA                      		include checkkbd.asm
       1.  00:48DA                      
       2.  00:48DA                      ; // Line Bit_7 Bit_6 Bit_5 Bit_4 Bit_3 Bit_2 Bit_1 Bit_0
       3.  00:48DA                      ; // 0 	   "7"  "6"   "5"   "4"   "3"   "2"   "1"   "0"
       4.  00:48DA                      ; // 1 	   ";"  "]"   "["   "\"   "="   "-"   "9"   "8"
       5.  00:48DA                      ; // 2 	   "B"  "A"   ???   "/"   "."   ","   "'"   "`"
       6.  00:48DA                      ; // 3 	   "J"  "I"   "H"   "G"   "F"   "E"   "D"   "C"
       7.  00:48DA                      ; // 4 	   "R"  "Q"   "P"   "O"   "N"   "M"   "L"   "K"
       8.  00:48DA                      ; // 5 	   "Z"  "Y"   "X"   "W"   "V"   "U"   "T"   "S"
       9.  00:48DA                      ; // 6 	   F3 	 F2    F1  CODE   CAP  GRAPH  CTRL SHIFT
      10.  00:48DA                      ; // 7 	   RET  SEL    BS  STOP   TAB   ESC    F5    F4
      11.  00:48DA                      ; // 8 	   RIGHT DOWN  UP  LEFT   DEL   INS   HOME SPACE
      12.  00:48DA                      
      13.  00:48DA                      checkkbd:
      14.  00:48DA                      		; di
      15.  00:48DA  DB AA               		in	a,(0aah)
      16.  00:48DC  E6 F0               		and 011110000B			; upper 4 bits contain info to preserve
      17.  00:48DE  B3                  		or	e
      18.  00:48DF  D3 AA               		out (0aah),a
      19.  00:48E1  DB A9               		in	a,(0a9h)
      20.  00:48E3  6F                  		ld	l,a
      21.  00:48E4                      		; ei
      22.  00:48E4  C9                  		ret
      46   00:48E5                      		
      47   00:48E5                      ;-------------------------------------
      48   00:48E5                      ; Entry point
      49   00:48E5                      ;-------------------------------------
      50   00:48E5                      START:
      51   00:48E5  AF                  		xor	a
      52   00:48E6  3C                  		inc	a
      53   00:48E7  32 13 CA            		ld	(SEL_NTSC),a		; NTSC MODE
      54   00:48EA  CD 0A 42            		call	set_scr			; set video mode to screen 8
      55   00:48ED  F3                  		di
      56   00:48EE                      		
      57   00:48EE                      ;-------------------------------------
      58   00:48EE                      ;   Power-up routine for 32K ROM
      59   00:48EE                      ;   set pages and sub slot
      60   00:48EE                      ;-------------------------------------
      61   00:48EE  CD 10 40                    call    search_slot
      62   00:48F1  CD 2F 40                    call    search_slotram	
      63   00:48F4  CD 61 40            		call	setrompage2		; ROM in page 1 & 2
      64   00:48F7  CD 5B 40            		call	setrampage0		; RAM in page 0 & 3
      65   00:48FA                      
      66   00:48FA                      
      67   00:48FA                      		; activate  the fist 24K of rom
      68   00:48FA  AF                  		xor	a			   
      69   00:48FB  32 00 50            		ld	(_kBank1),a
      70   00:48FE  3C                  		inc	a
      71   00:48FF  32 00 70            		ld	(_kBank2),a
      72   00:4902  3C                  		inc	a
      73   00:4903  32 00 90            		ld	(_kBank3),a
      74   00:4906                      		
      75   00:4906  CD 78 41            		call	_cls
      76   00:4909                      		
      77   00:4909                      		;--- initialise ISR in RAM
      78   00:4909                      		
      79   00:4909  F3                  		di
      80   00:490A                      	
      81   00:490A  CD 5C 42            		call	isr_set
      82   00:490D                      		
      83   00:490D                      		; copy the level map from ROM to RAM
      84   00:490D                      		
      85   00:490D  CD C5 49            		call	vdptest
      86   00:4910  CD A5 41            		call	font_cpy
      87   00:4913  CD 51 49            		call	mapinit
      88   00:4916                      		
      89   00:4916                      		
      90   00:4916  21 00 00            		ld	hl,0
      91   00:4919  22 9E FC            		ld	(_jiffy),hl		
      92   00:491C  AF                  		xor	a
      93   00:491D  32 23 CA            		ld	(_displaypage),a		
      94   00:4920  32 14 CA            		ld	(_xtest),a
      95   00:4923  32 15 CA            		ld	(_ytest),a
      96   00:4926  32 16 CA            		ld	(anim_buffer.flag),a
      97   00:4929                      		
      98   00:4929  FB                  		ei
      99   00:492A  76                  1:		halt
     100   00:492B  76                  		halt
     101   00:492C                      		
     102   00:492C  3A 24 CA            		ld	a,(_xoffset)		
     103   00:492F  A7                  		and	a
     104   00:4930  C2 2A 49            		jp	nz,1b
     105   00:4933                      		
     106   00:4933  1E 08               		ld	e,8
     107   00:4935  CD DA 48            		call	checkkbd
     108   00:4938  E6 01               		and	1				; space
     109   00:493A  CC 40 49            		call	z,PAL_ntsc
     110   00:493D  C3 2A 49            		jp	1b
     111   00:4940                      		
     112   00:4940                      PAL_ntsc:
     113   00:4940  F3                  		di
     114   00:4941  3A E8 FF            		ld		a,(RG9SAV)		
     115   00:4944  EE 02               		xor		00000010B		; PAL or NTSC 
     116   00:4946  32 E8 FF            		ld		(RG9SAV),a
     117   00:4949  D3 99               		out		(0x99),a
     118   00:494B  3E 89               		ld		a,9+128
     119   00:494D  D3 99               		out		(0x99),a
     120   00:494F  FB                  		ei
     121   00:4950  C9                  		ret
     122   00:4951                      
     123   00:4951                      mapinit:		
     124   00:4951  3E 0C               		ld		a, :_level
     125   00:4953  32 00 B0            		ld		(_kBank4),a
     126   00:4956  21 00 A0            		ld		hl,_level
     127   00:4959  11 00 C0            		ld		de,_levelmap
     128   00:495C  01 00 0A            		ld		bc,mapWidth*mapHeight
     129   00:495F  ED B0               		ldir
     130   00:4961                      		
     131   00:4961  AF                  		xor		a
     132   00:4962  32 1C CA            		ld		(_ymappos),a
     133   00:4965  32 1F CA            		ld		(_xmappos+2),a	; 24 bit	
     134   00:4968  21 10 00            		ld		hl,16
     135   00:496B  22 20 CA            		ld		(_xspeed),hl
     136   00:496E  21 00 03            		ld		hl,768
     137   00:4971  22 1D CA            		ld		(_xmappos),hl
     138   00:4974                      		; ret
     139   00:4974                      
     140   00:4974                      buildmap:
     141   00:4974  2A 1D CA            		ld	hl,(_xmappos)
     142   00:4977                      
     143   00:4977                      		repeat 4
     144   00:4977                    < 		srl	h
     145   00:4977                    < 		rr	l
     146   00:4977                    < 		endrepeat					; corner top left of the screen window in the map in tiles
     146   00:4977  CB 3C CB 1D CB 3C CB 1D CB 3C CB 1D CB 3C CB 1D 
     147   00:4987                      		
     148   00:4987  11 00 C0            		ld	de,_levelmap
     149   00:498A  19                  		add	hl,de					; HL = corner top right of the screen window in the map in tiles
     150   00:498B                      		
     151   00:498B  11 00 00            		ld	de,0			; dest y,x
     152   00:498E  06 96               		ld	b,15*10
     153   00:4990                      1:		
     154   00:4990                      		set_tile (hl)
     154   00:4990  7E                >   ld a,reg
     154   00:4991  07 07 07          > [3]  rlca
     154   00:4994  E6 07             >   and 00000111B
     154   00:4996  C6 04             >   add a,:_tiles0
     154   00:4998  32 00 B0          >   ld (_kBank4),a
     154   00:499B                    > 
     154   00:499B  7E                >   ld a,reg
     154   00:499C  E6 1F             >   and 00011111B
     154   00:499E  C6 A0             >   add a,high _tiles0
     155   00:49A0  E5                  		push	hl
     156   00:49A1                      
     157   00:49A1  67                  		ld	h,a				; select offset in the bank
     158   00:49A2  2E 00               		ld	l,0
     159   00:49A4                      		
     160   00:49A4  D5                  		push	de
     161   00:49A5  C5                  		push	bc
     162   00:49A6  06 00               		ld		b,0				; page
     163   00:49A8  CD 7E 44            		call	LMMC_tile
     164   00:49AB  C1                  		pop		bc
     165   00:49AC  D1                  		pop		de
     166   00:49AD                      		
     167   00:49AD  E1                  		pop		hl
     168   00:49AE                      
     169   00:49AE  23                  		inc	hl
     170   00:49AF                      
     171   00:49AF  3E 10               		ld		a,16		; x=x+16
     172   00:49B1  83                  		add		a,e
     173   00:49B2  5F                  		ld		e,a
     174   00:49B3                      		
     175   00:49B3  FE F0               		cp		15*16
     176   00:49B5  38 0B               		jr		c,2f
     177   00:49B7                      
     178   00:49B7  1E 00               		ld		e,0			; x = 0
     179   00:49B9                      		
     180   00:49B9  3E 10               		ld		a,16		; y=y+16
     181   00:49BB  82                  		add		a,d
     182   00:49BC  57                  		ld		d,a
     183   00:49BD                      
     184   00:49BD  3E F1               		ld		a,-15
     185   00:49BF  85                  		add		a,l
     186   00:49C0  6F                  		ld		l,a
     187   00:49C1  24                  		inc		h
     188   00:49C2                      		
     189   00:49C2  10 CC               2:		djnz	1b
     190   00:49C4  C9                  		ret
     191   00:49C5                      		
     192   00:49C5                      vdptest:
     193   00:49C5  16 A0               		ld	d,160			; dest y
     194   00:49C7  1E 00               		ld	e,0				; dest x
     195   00:49C9  0E A0               		ld	c,160			; initial tile
     196   00:49CB  06 20               		ld	b,32			; number of tiles
     197   00:49CD                      1:		
     198   00:49CD                      		set_tile c
     198   00:49CD  79                >   ld a,reg
     198   00:49CE  07 07 07          > [3]  rlca
     198   00:49D1  E6 07             >   and 00000111B
     198   00:49D3  C6 04             >   add a,:_tiles0
     198   00:49D5  32 00 B0          >   ld (_kBank4),a
     198   00:49D8                    > 
     198   00:49D8  79                >   ld a,reg
     198   00:49D9  E6 1F             >   and 00011111B
     198   00:49DB  C6 A0             >   add a,high _tiles0
     199   00:49DD                      
     200   00:49DD  67                  		ld	h,a				; select offset in the bank
     201   00:49DE  2E 00               		ld	l,0
     202   00:49E0                      
     203   00:49E0  D5                  		push	de
     204   00:49E1  C5                  		push	bc
     205   00:49E2  06 01               		ld		b,1				; page
     206   00:49E4  CD 7E 44            		call	LMMC_tile
     207   00:49E7  C1                  		pop		bc
     208   00:49E8  D1                  		pop		de
     209   00:49E9                      		
     210   00:49E9  0C                  		inc		c
     211   00:49EA                      		
     212   00:49EA  3E 10               		ld		a,16		; x=x+16
     213   00:49EC  83                  		add		a,e
     214   00:49ED  5F                  		ld		e,a
     215   00:49EE  30 04               		jr		nc,2f
     216   00:49F0                      
     217   00:49F0  3E 10               		ld		a,16		; y=y+16
     218   00:49F2  82                  		add		a,d
     219   00:49F3  57                  		ld		d,a
     220   00:49F4                      		
     221   00:49F4  10 D7               2:		djnz	1b
     222   00:49F6  C9                  		ret
     223   00:49F7                      		
     224   00:49F7                      		
     225   00:49F7  (04)                		page 4
     226   04:A000                      _tiles0:
     227   04:A000  (2000)              		incbin "tiles.bin",0x0000,0x2000
     228   04:C000  (05)                		page 5
     229   05:A000  (2000)              		incbin "tiles.bin",0x2000,0x2000
     230   05:C000  (06)                		page 6
     231   06:A000  (2000)              		incbin "tiles.bin",0x4000,0x2000
     232   06:C000  (07)                		page 7
     233   07:A000  (2000)              		incbin "tiles.bin",0x6000,0x2000
     234   07:C000  (08)                		page 8
     235   08:A000  (2000)              		incbin "tiles.bin",0x8000,0x2000
     236   08:C000  (09)                		page 9
     237   09:A000  (2000)              		incbin "tiles.bin",0xA000,0x2000
     238   09:C000  (0A)                		page 10
     239   0A:A000  (2000)              		incbin "tiles.bin",0xC000,0x2000
     240   0A:C000  (0B)                		page 11
     241   0B:A000  (2000)              		incbin "tiles.bin",0xE000,0x2000
     242   0B:C000                      
     243   0B:C000  (0C)                		page 12		
     244   0C:A000                      _level:
     245   0C:A000  (0A00)              		incbin	datamap.bin	
     246   0C:AA00                      		
     247   0C:AA00  (0D)                		page 13		
     248   0D:A000                      fonts:
     249   0D:A000  (2000)              		incbin	fonts.bin,0x0000,0x2000
     250   0D:C000  (0E)                		page 14
     251   0E:A000  (2000)              		incbin 	fonts.bin,0x2000,0x2000
     252   0E:C000  (0F)                		page 15
     253   0F:A000  (2000)              		incbin 	fonts.bin,0x4000,0x2000
     254   0F:C000                      		
     255   0F:C000                      		; call	opening
     256   0F:C000                      		
     257   0F:C000                      
     258   0F:C000                      		; call 	_hw_sprite_init
     259   0F:C000                      
     260   0F:C000                      		; ld		c,0
     261   0F:C000                      		; ld		de,256*(mapHeight*16+3)
     262   0F:C000                      		; call	_vdpsetvramwr
     263   0F:C000                      
     264   0F:C000                      		; ld		de, 256*:_scorebar+1
     265   0F:C000                      		; call	outvram
     266   0F:C000                      		
     267   0F:C000                      		; ld		c,1
     268   0F:C000                      		; ld		de,256*mapHeight*16
     269   0F:C000                      		; call	_vdpsetvramwr
     270   0F:C000                      
     271   0F:C000                      		; ld		de, 256*:_animated+2
     272   0F:C000                      		; call	outvram
     273   0F:C000                      
     274   0F:C000                      	
     275   0F:C000                      		; ; ld	a,:demo_song
     276   0F:C000                      		; ; setpage_a
     277   0F:C000                      		
     278   0F:C000                      		; ; ld	bc,	end_demo_song-musbuff
     279   0F:C000                      		; ; ld	hl,	demo_song
     280   0F:C000                      		; ; ld	de,	musbuff
     281   0F:C000                      		; ; ldir
     282   0F:C000                      			
     283   0F:C000                      		; ; call	replay_init
     284   0F:C000                      		; ; ld		hl,musbuff
     285   0F:C000                      		; ; call	replay_loadsong
     286   0F:C000                      
     287   0F:C000                      
     288   0F:C000                      		; ld		e,0
     289   0F:C000                      		; call	_setpage
     290   0F:C000                      				
     291   0F:C000                      		; ld	a, :_level
     292   0F:C000                      		; ld	(_kBank4),a
     293   0F:C000                      		
     294   0F:C000                      		; ld		hl,_level
     295   0F:C000                      		; ld		de,_levelmap
     296   0F:C000                      		; ld		bc,mapWidth*mapHeight
     297   0F:C000                      		; ldir
     298   0F:C000                      
     299   0F:C000                      
     300   0F:C000                      		; ; call	init_page0
     301   0F:C000                      
     302   0F:C000                      		; ld		a,0
     303   0F:C000                      		; ld		(cur_level),a
     304   0F:C000                      
     305   0F:C000                      		; ei
     306   0F:C000                      
     307   0F:C000                      ; restart:
     308   0F:C000                      		; call	_intreset
     309   0F:C000                      
     310   0F:C000                      		
     311   0F:C000                      
     312   0F:C000                      		; ld		a,1
     313   0F:C000                      		; ld		(_displaypage),a		
     314   0F:C000                      		; call 	_cls0
     315   0F:C000                      		; ld		hl,_levelmap
     316   0F:C000                      		; ld		(_levelmap_pos),hl
     317   0F:C000                      		
     318   0F:C000                      		; xor		a
     319   0F:C000                      		; ld		h,a
     320   0F:C000                      		; ld		l,a
     321   0F:C000                      		; ld		(flip_flop),a
     322   0F:C000                      		; ld		(god_mode),a
     323   0F:C000                      		; ld		(_ymappos),a
     324   0F:C000                      		; ld		(_xmappos),hl
     325   0F:C000                      		
     326   0F:C000                      		; ld		(_nframes),hl
     327   0F:C000                      		; ld		(_mcdx),hl
     328   0F:C000                      		; ld		(_mcframe),a
     329   0F:C000                      		
     330   0F:C000                      		; ld		(_yoffset),a		;  0 tutto su
     331   0F:C000                      		; ld		(_xoffset),a		;  0 tutto su
     332   0F:C000                      								
     333   0F:C000                      		; ld		(aniframe),a
     334   0F:C000                      		; ld		(anispeed),a
     335   0F:C000                      		; ld		(ms_state),a
     336   0F:C000                      		; inc 	a
     337   0F:C000                      		; ld		(old_aniframe),a		; old_aniframe!=aniframe
     338   0F:C000                      	
     339   0F:C000                      		; ld		(dxmap),a		; moving right
     340   0F:C000                      		; ld		(_dxmap),a		; moving right
     341   0F:C000                      
     342   0F:C000                      		; ld		(xmap),hl
     343   0F:C000                      		; ld		(_xmapx4),hl
     344   0F:C000                      		; ld		bc,xship_rel
     345   0F:C000                      		; add 	hl,bc
     346   0F:C000                      		; ld		(xship),hl
     347   0F:C000                      		; ld		a,80
     348   0F:C000                      		; ld		(yship),a
     349   0F:C000                      
     350   0F:C000                      		; call 	npc_init								
     351   0F:C000                      		; call 	load_colors
     352   0F:C000                      
     353   0F:C000                      		; xor	a
     354   0F:C000                      		; ld		(_kBank1),a
     355   0F:C000                      		; inc	a
     356   0F:C000                      		; ld		(_kBank2),a
     357   0F:C000                      		; inc	a
     358   0F:C000                      		; ld		(_kBank3),a
     359   0F:C000                      		
     360   0F:C000                      
     361   0F:C000                      		; call	_isrinit
     362   0F:C000                      
     363   0F:C000                      ; main_loop: 
     364   0F:C000                      				
     365   0F:C000                      		; ld	hl,0
     366   0F:C000                      		; ld	(_jiffy),hl
     367   0F:C000                      
     368   0F:C000                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     369   0F:C000                      ; ; run ms FSM and place its sprites in the SAT in RAM
     370   0F:C000                      		; call	ms_ctrl
     371   0F:C000                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     372   0F:C000                      ; ; test for game restart
     373   0F:C000                      		; ld	a,(ms_state)
     374   0F:C000                      		; cp	ms_reset
     375   0F:C000                      		; jp	z,restart
     376   0F:C000                      
     377   0F:C000                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     378   0F:C000                      ; ; place MS in the SAT and test for collision
     379   0F:C000                      		; call	put_ms_sprt
     380   0F:C000                      		; ld		a,(god_mode)
     381   0F:C000                      		; and 	a
     382   0F:C000                      		; ; call	z,test_obstacles
     383   0F:C000                      
     384   0F:C000                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     385   0F:C000                      ; ; run NCPS FSM
     386   0F:C000                      		; call	wave_timer
     387   0F:C000                      		; call	npc_loop
     388   0F:C000                      		; call	enemy_bullet_loop
     389   0F:C000                      
     390   0F:C000                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     391   0F:C000                      ; ; run MS bullets FSM
     392   0F:C000                      		; call	bullet_loop
     393   0F:C000                      
     394   0F:C000                      		; ; ld	a,00100101B			; random colour
     395   0F:C000                      		; ; out		(0x99),a
     396   0F:C000                      		; ; ld		a,7+128
     397   0F:C000                      		; ; out		(0x99),a
     398   0F:C000                      		
     399   0F:C000                      		; ; call	_waitvdp
     400   0F:C000                      
     401   0F:C000                      		; ; ld	a,10100101B			; random colour
     402   0F:C000                      		; ; out		(0x99),a
     403   0F:C000                      		; ; ld		a,7+128
     404   0F:C000                      		; ; out		(0x99),a
     405   0F:C000                      				
     406   0F:C000                      		; ld	a,(joystick)
     407   0F:C000                      		; and	32
     408   0F:C000                      		; ; call	z,_plot_distrucable
     409   0F:C000                      
     410   0F:C000                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     411   0F:C000                      		; ; ld		a,3
     412   0F:C000                      		; ; out		(0x99),a
     413   0F:C000                      		; ; ld		a,7+128
     414   0F:C000                      		; ; out		(0x99),a
     415   0F:C000                      		
     416   0F:C000                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     417   0F:C000                      		; ; call	test_star
     418   0F:C000                      
     419   0F:C000                      		; ; xor		a
     420   0F:C000                      		; ; out		(0x99),a
     421   0F:C000                      		; ; ld		a,7+128
     422   0F:C000                      		; ; out		(0x99),a
     423   0F:C000                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     424   0F:C000                      
     425   0F:C000                      		
     426   0F:C000                      ; 1:		ld	a,(_jiffy)		; wait for vblank (and not for linit)
     427   0F:C000                      		; or	a
     428   0F:C000                      		; jr	z,1b
     429   0F:C000                      	
     430   0F:C000                      		; ld	hl,(xmap)
     431   0F:C000                      		; ld	bc,xship_rel
     432   0F:C000                      		; add hl,bc
     433   0F:C000                      		; ld	(xship),hl
     434   0F:C000                      
     435   0F:C000                      		; ld		a,(dxmap)
     436   0F:C000                      		; ld		(_dxmap),a
     437   0F:C000                      
     438   0F:C000                      		; jp      main_loop
     439   0F:C000                      
     440   0F:C000                      ; ;-------------------------------------
     441   0F:C000                      ; AFXPLAY:
     442   0F:C000                      		; ret
     443   0F:C000                      ; ;	include vuitpakker.asm
     444   0F:C000                      	; include print.asm
     445   0F:C000                      	; include plot_line.asm
     446   0F:C000                      	; include plot_line2.asm
     447   0F:C000                      	; include color_update.asm
     448   0F:C000                      ; ms_bllts_col_win:
     449   0F:C000                      	; include ms_bllts_frm_coll_wind.asm
     450   0F:C000                      	; include	ms_bllts.asm
     451   0F:C000                      		
     452   0F:C000                      ; ;-------------------------------------
     453   0F:C000                      
     454   0F:C000                      	
     455   0F:C000                      		; page 1
     456   0F:C000                      
     457   0F:C000                      		; include	ms_crtl.asm
     458   0F:C000                      		; include	put_ms_sprt.asm
     459   0F:C000                      		; include probe_level.asm				
     460   0F:C000                      		; include opening.asm		
     461   0F:C000                      ; outvram:
     462   0F:C000                      ; 2:		ld	a,d
     463   0F:C000                      		; ld	(_kBank4),a
     464   0F:C000                      		; ld	hl,0xA000
     465   0F:C000                      		; ld	bc,0x98
     466   0F:C000                      		; ld	a,32
     467   0F:C000                      ; 1:		otir
     468   0F:C000                      		; dec	a
     469   0F:C000                      		; jp	nz,1b
     470   0F:C000                      		; inc	d
     471   0F:C000                      		; dec	e
     472   0F:C000                      		; jr	nz,2b
     473   0F:C000                      		; ret
     474   0F:C000                      		
     475   0F:C000                      		; page 2
     476   0F:C000                      	; ; include mainhero_LMMM.asm
     477   0F:C000                      
     478   0F:C000                      	
     479   0F:C000                      		; page 3
     480   0F:C000                      ; manta_color:
     481   0F:C000                      		; incbin mship03_clr.bin
     482   0F:C000                      ; ms_spt:
     483   0F:C000                      		; incbin mship03_frm.bin
     484   0F:C000                      		
     485   0F:C000                      		; page 4
     486   0F:C000                      ; _tiles0:
     487   0F:C000                      		; incbin "tiles.bin",0x0000,0x2000
     488   0F:C000                      		; page 5
     489   0F:C000                      		; incbin "tiles.bin",0x2000,0x2000
     490   0F:C000                      		; page 6
     491   0F:C000                      		; incbin "tiles.bin",0x4000,0x2000
     492   0F:C000                      		; page 7
     493   0F:C000                      		; incbin "tiles.bin",0x6000,0x2000
     494   0F:C000                      		; page 8
     495   0F:C000                      		; incbin "tiles.bin",0x8000,0x2000
     496   0F:C000                      		; page 9
     497   0F:C000                      		; incbin "tiles.bin",0xA000,0x2000
     498   0F:C000                      		; page 10
     499   0F:C000                      		; incbin "tiles.bin",0xC000,0x2000
     500   0F:C000                      		; page 11
     501   0F:C000                      		; incbin "tiles.bin",0xE000;,0x2000
     502   0F:C000                      
     503   0F:C000                      		; page 12
     504   0F:C000                      
     505   0F:C000                      		; page 15
     506   0F:C000                      ; _level:
     507   0F:C000                      		; incbin "datamap.bin"
     508   0F:C000                      	
     509   0F:C000                      		; page 16
     510   0F:C000                      ; _opening:
     511   0F:C000                      		; incbin "opening.bin",0x0000,0x2000
     512   0F:C000                      		; page 17
     513   0F:C000                      		; incbin "opening.bin",0x2000,0x2000
     514   0F:C000                      		; page 18
     515   0F:C000                      		; incbin "opening.bin",0x4000,0x2000
     516   0F:C000                      		; page 19
     517   0F:C000                      		; incbin "opening.bin",0x6000,0x2000
     518   0F:C000                      		; page 20
     519   0F:C000                      		; incbin "opening.bin",0x8000,0x2000
     520   0F:C000                      		; page 21
     521   0F:C000                      		; incbin "opening.bin",0xA000,0x2000
     522   0F:C000                      		; page 22
     523   0F:C000                      		; incbin "opening.bin",0xC000;,0x2000
     524   0F:C000                      		; page 23
     525   0F:C000                      		; ; incbin "opening.bin",0xE000;,,0x2000
     526   0F:C000                      	
     527   0F:C000                      		; page 24
     528   0F:C000                      ; _scorebar:	
     529   0F:C000                      		; incbin scorebar.bin
     530   0F:C000                      	
     531   0F:C000                      		; page 25
     532   0F:C000                      ; _animated:	
     533   0F:C000                      		; incbin animated.bin,0x0000,0x2000
     534   0F:C000                      		; page 26
     535   0F:C000                      		; incbin animated.bin,0x2000,0x2000
     536   0F:C000                      
     537   0F:C000                      		; page 27
     538   0F:C000                      ; sprtdata:
     539   0F:C000                      		; incbin 	uridium_revA.bin,,16*32
     540   0F:C000                      		; incbin 	enemies_frm.bin
     541   0F:C000                      
     542   0F:C000                      		; page 28
     543   0F:C000                      ; color_base:
     544   0F:C000                      		; repeat 4
     545   0F:C000                      		; ds	16,8
     546   0F:C000                      		; ds	16,10+64
     547   0F:C000                      		; endrepeat
     548   0F:C000                      		; repeat 4
     549   0F:C000                      		; ds	16,8
     550   0F:C000                      		; ds	16,10+64
     551   0F:C000                      		; endrepeat
     552   0F:C000                      
     553   0F:C000                      		
     554   0F:C000                      		; incbin 	enemies_clr.bin
     555   0F:C000                      		
     556   0F:C000                      ; FINISH:
     557   0F:C000                      
     558   0F:C000                      
     559   0F:C000                      ; ;---------------------------------------------------------
     560   0F:C000                      ; ; Variables
     561   0F:C000                      ; ;---------------------------------------------------------
     562   0F:C000                      	
     563   0F:C000                      	
     564   0F:C000  (C000)              	MAP 0xC000
     565   0F:C000                      
     566   0F:C000  (0F:C000)           _levelmap:			#mapWidth*mapHeight
     567   0F:C000                      ; do not change position in ram
     568   0F:C000  (0F:CA00)           _sliceflag:			#16		; while scrolling right, 
     569   0F:C000                      							; if flag(n)>0, slice n+1 on displaypage has 
     570   0F:C000                      							; been copied to slice n in !displaypage
     571   0F:C000                      							; flag(0) is set when the hidden border on 
     572   0F:C000                      							; !displaypage has been built on slice 15
     573   0F:C000                      							;
     574   0F:C000                      							; while scrolling left,  
     575   0F:C000                      							; if flag(n)>0, slice n on displaypage has 
     576   0F:C000                      							; been copied to slice n+1 in !displaypage
     577   0F:C000                      							; flag(15) is set when the hidden border on 
     578   0F:C000                      							; !displaypage has been built on slice 0
     579   0F:C000                      							;
     580   0F:C000                      							; _sliceflag is reset at page swap
     581   0F:C000                      ; do not change position in ram
     582   0F:C000  (0F:CA10)           _sliceflag_reset:	#1		; is set, _sliceflag is reset				
     583   0F:C000                      
     584   0F:C000  (0F:CA11)           slotvar				#1
     585   0F:C000  (0F:CA12)           slotram				#1
     586   0F:C000  (0F:CA13)           SEL_NTSC			#1
     587   0F:C000                      
     588   0F:C000  (0F:CA14)           _xtest:				#1
     589   0F:C000  (0F:CA15)           _ytest:				#1
     590   0F:C000                      
     591   0F:C000  (0F:CA16)           anim_buffer.flag:		#1
     592   0F:C000  (0F:CA17)           anim_buffer.dy:			#1
     593   0F:C000  (0F:CA18)           anim_buffer.dx:			#1
     594   0F:C000  (0F:CA19)           anim_buffer.tile:		#1
     595   0F:C000  (0F:CA1A)           anim_buffer.page:		#1
     596   0F:C000                      
     597   0F:C000  (0F:CA1B)           joystick			#1
     598   0F:C000                      
     599   0F:C000                      ; _mcdivider			#1
     600   0F:C000                      
     601   0F:C000                      ; _mcx				#2	; relative with in the frame on the screen
     602   0F:C000                      ; _mcy				#2
     603   0F:C000                      
     604   0F:C000                      ; _mclx				#2	; absolute with the level in ram
     605   0F:C000                      ; _mcly				#2
     606   0F:C000                      
     607   0F:C000                      ; _mcframe			#1
     608   0F:C000                      ; _mcstate			#1
     609   0F:C000                      
     610   0F:C000                      ; _mcdx				#2
     611   0F:C000                      ; _mcdy				#2
     612   0F:C000                      
     613   0F:C000                      ; _mcprobe:			#1
     614   0F:C000                      ; _mcprobeb:			#1
     615   0F:C000                      
     616   0F:C000                      ; _ticxframe			#1
     617   0F:C000                      
     618   0F:C000                      ; _buffer:			#16
     619   0F:C000                      ; _fps:				#2
     620   0F:C000                      ; _nframes:			#2
     621   0F:C000                      ; _vbit16:			#2
     622   0F:C000                      
     623   0F:C000  (0F:CA1C)           _ymappos:			#1
     624   0F:C000  (0F:CA1D)           _xmappos:			#3		; 24 bit = 12.8 bit
     625   0F:C000  (0F:CA20)           _xspeed:			#2		; 16 bit = 8.8 bit
     626   0F:C000  (0F:CA22)           _dxchng:			#1		; <>0 if direction changes
     627   0F:C000                      
     628   0F:C000                      ; _shadowbuff:		#2
     629   0F:C000                      
     630   0F:C000  (0F:CA23)           _displaypage:		#1
     631   0F:C000                      
     632   0F:C000                      ; _mccolorchange:		#1
     633   0F:C000  (0F:CA24)           _xoffset:			#1
     634   0F:C000                      ; _yoffset:			#1
     635   0F:C000                      
     636   0F:C000                      ; __xoffset:			#1
     637   0F:C000                      ; __r18:				#1
     638   0F:C000                      
     639   0F:C000                      ; randSeed:			#2
     640   0F:C000                      ; cur_level:			#1
     641   0F:C000                      ; wave_count:			#1
     642   0F:C000                      ; landing_permission:	#1
     643   0F:C000                      ; assault_wave_timer:	#2
     644   0F:C000                      ; bullet_rate:		#1
     645   0F:C000                      
     646   0F:C000                      ; _dxmap:				#1		; previous dxmap
     647   0F:C000                      ; dxmap:				#1
     648   0F:C000                      ; xmap:				#2
     649   0F:C000                      ; _xmapx4:			#2		; xmap x 4
     650   0F:C000                      ; yship:				#1
     651   0F:C000                      ; xship:				#2
     652   0F:C000                      ; aniframe:			#1
     653   0F:C000                      ; ms_state:			#1
     654   0F:C000                      ; old_aniframe:		#1
     655   0F:C000                      ; anispeed:			#1
     656   0F:C000                      ; already_dead:		#1
     657   0F:C000                      ; lives_bin:			#1
     658   0F:C000                      
     659   0F:C000                      ; god_mode:			#1
     660   0F:C000                      ; visible_sprts:		#1
     661   0F:C000                      ; flip_flop:			#1
     662   0F:C000                      
     663   0F:C000                      ; ram_sat:			#3*4
     664   0F:C000                      
     665   0F:C000                      	; struct enemy_data
     666   0F:C000                      ; y				db	0
     667   0F:C000                      ; x				dw	0
     668   0F:C000                      ; xoff			db	0
     669   0F:C000                      ; yoff			db	0
     670   0F:C000                      ; xsize			db	0
     671   0F:C000                      ; ysize			db	0
     672   0F:C000                      ; status			db	0	; B7 = DWN/UP | B6 = RIGHT/LEFT | B5 = ok/wrong clr | B0 = Inactive/Active
     673   0F:C000                      ; cntr			db	0
     674   0F:C000                      ; kind			db	0
     675   0F:C000                      ; frame			db	0
     676   0F:C000                      ; color			db	0
     677   0F:C000                      ; color2			db	0
     678   0F:C000                      ; speed			dw	0
     679   0F:C000                      	; ends
     680   0F:C000                      	
     681   0F:C000                      ; any_object:			#0
     682   0F:C000                      ; ms_bullets:			#enemy_data*max_bullets
     683   0F:C000                      ; enem_bullets:		#enemy_data*max_enem_bullets
     684   0F:C000                      ; enemies:			#enemy_data*max_enem
     685   0F:C000                      ; endram:				#1
     686   0F:C000  (0000)              	ENDMAP

    LABELS
-------------------------------------------------
00:00005000   _kBank1
00:00007000   _kBank2
00:00009000   _kBank3
00:0000B000   _kBank4
00:0000F3DF   RG0SAV
00:0000F3E0   RG1SAV
00:0000F3E1 X RG2SAV
00:0000F3E2 X RG3SAV
00:0000F3E3 X RG4SAV
00:0000F3E4 X RG5SAV
00:0000F3E5 X RG6SAV
00:0000F3E6   RG7SAV
00:0000FFE7   RG8SAV
00:0000FFE8   RG9SAV
00:0000FFE9 X RG10SAV
00:0000FFEA X RG11SAV
00:0000FFEB X RG12SAV
00:0000FFEC X RG13SAV
00:0000FFED X RG14SAV
00:0000FFEE X RG15SAV
00:0000FFEF X RG16SAV
00:0000FFF0 X RG17SAV
00:0000FFF1 X RG18SAV
00:0000FFF2 X RG19SAV
00:0000FFF3 X RG20SAV
00:0000FFF4 X RG21SAV
00:0000FFF5 X RG22SAV
00:0000FFF7 X RG23SAV
00:0000FC9E   _jiffy
00:0000000C X max_enem
00:00000003 X max_enem_bullets
00:00000002 X max_bullets
00:00000004 X maxspeed
00:000000B4 X assault_wave_timer_preset
00:00000002 X enemy_bullet_speed
00:00000078 X xship_rel
00:00000100   mapWidth
00:0000000A   mapHeight
00:000000A0   YSIZE
00:00000001 X debug
00:00000024 X ENASLT
00:00000138   RSLREG
00:0000FCC1   EXPTBL
00:00004010   search_slot
00:0000402F   search_slotram
00:00004050   search_slotram0
00:00004055 X setrompage0
00:0000405B   setrampage0
00:00004061   setrompage2
00:00004067 X setrampage2
00:0000406D X setrompage3
00:00004073 X setrampage3
00:00004079 X recbios
00:0000407C   setslotpage0
00:000040B3 X setslotpage1
00:000040F2   setslotpage2
00:00004139   setslotpage3
00:00004178   _cls
00:00004190 X _cls0
00:000041A5   font_cpy
00:00000099 X vdpport1
00:0000009A X vdpport2
00:000041C5   _vdpsetvramwr
00:000041C6 X _vdpsetvramwr2
00:000041D6 X _vdpsetvramwr14
00:000041DF X _vdpsetvramrd
00:000041F9 X _setpage
00:0000005F   chgmod
00:0000000C X RDSLT
00:00000156 X KILBUF
00:0000420A   set_scr
00:0000424D   _waitvdp
00:0000425C   isr_set
00:0000427F X isr_reset
00:0000429B   _scroll
00:000042BA   _fake_isr
00:000042C7   vblank
00:00004303 X vblank.scroll_right
00:00004318   vblank.scroll_left
00:0000432A   vblank.return
00:00004351   lint
00:000043BF   waitHBLANK
00:000043D6   xscroll
00:000043E4   pageswap
00:000043F5   set_displaypage
00:00004412   reset_sliceflag
00:00004426   changespeed
00:00004444   changespeed.notright
00:0000445D   changexpos
00:0000447E   LMMC_tile
00:000044C0   move_tile
00:00004503   move_slice
00:0000453E   clear_slice
00:00004568   brdrs_left
00:0000458D   brdrs_right
00:000045B3   vdp_task_left
00:000045C9   vdp_task_left.x15
00:000045D4   vdp_task_left.x0_14
00:000045DF   vdp_task_right
00:000045F4   vdp_task_right.x0
00:000045FF   vdp_task_right.x1_15
00:0000460A   _brdrs_left
00:00004649   _brdrs_right
00:00004688   colmn_patch_right
00:000046AF   set2pixs
00:000046C1   colmn_patch_left
00:000046EF   plot_col64
00:000046F2   plot_col32
00:000046F5   plot_col16
00:000046FC   _plot_col16
00:00004846   animtest
00:00004860   animtest.scroll_left
00:00004879   animtest.manage_buffer
00:0000488E   movemarker
00:000048A4   notright
00:000048C5   notup
00:000048DA   checkkbd
00:000048E5   START
00:00004940   PAL_ntsc
00:00004951   mapinit
00:00004974 X buildmap
00:000049C5   vdptest
04:0000A000   _tiles0
0C:0000A000   _level
0D:0000A000   fonts
0F:0000C000   _levelmap
0F:0000CA00   _sliceflag
0F:0000CA10   _sliceflag_reset
0F:0000CA11   slotvar
0F:0000CA12   slotram
0F:0000CA13   SEL_NTSC
0F:0000CA14   _xtest
0F:0000CA15   _ytest
0F:0000CA16   anim_buffer.flag
0F:0000CA17   anim_buffer.dy
0F:0000CA18   anim_buffer.dx
0F:0000CA19   anim_buffer.tile
0F:0000CA1A   anim_buffer.page
0F:0000CA1B   joystick
0F:0000CA1C   _ymappos
0F:0000CA1D   _xmappos
0F:0000CA20   _xspeed
0F:0000CA22   _dxchng
0F:0000CA23   _displaypage
0F:0000CA24   _xoffset


 Output: main.out
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: *  Used: 00000000

    No output

 Output: urd2.rom
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: 00002000  Used: 000009F7

   Address   Length Align   Label
   00004000    2551         search_slot
   000049F7    5641       <empty>

 Page: 01
  Org: 00006000  Size: 00002000  Used: 00000000

   00006000    8192       <empty>

 Page: 02
  Org: 00008000  Size: 00002000  Used: 00000000

   00008000    8192       <empty>

 Page: 03
  Org: 0000A000  Size: 00002000  Used: 00000000

   0000A000    8192       <empty>

 Page: 04
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         _tiles0

 Page: 05
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         

 Page: 06
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         

 Page: 07
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         

 Page: 08
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         

 Page: 09
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         

 Page: 0A
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         

 Page: 0B
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         

 Page: 0C
  Org: 0000A000  Size: 00002000  Used: 00000A00

   Address   Length Align   Label
   0000A000    2560         _level
   0000AA00    5632       <empty>

 Page: 0D
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         fonts

 Page: 0E
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         

 Page: 0F
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         
