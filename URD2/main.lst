Sjasm Z80 Assembler v0.42c - www.xl2s.tk             [2016.02.09 - 23:50:30]

main.asm
Errors: 0

       1   00:0000                      ;----------------------------------------------------------------------------
       2   00:0000                      ;
       3   00:0000                      ;----------------------------------------------------------------------------
       4   00:0000                      
       5   00:0000                              output "urd2.rom"
       6   00:0000                      
       7   00:0000                      		;	konami scc
       8   00:0000                      		
       9   00:0000  (00:5000)           _kBank1:	equ 05000h ;- 57FFh (5000h used)
      10   00:0000  (00:7000)           _kBank2: 	equ 07000h ;- 77FFh (7000h used)
      11   00:0000  (00:9000)           _kBank3: 	equ 09000h ;- 97FFh (9000h used)
      12   00:0000  (00:B000)           _kBank4: 	equ 0B000h ;- B7FFh (B000h used)
      13   00:0000                      
      14   00:0000                      
      15   00:0000                      
      16   00:0000                      		defpage	 0,0x4000, 0x2000		; page 0 main code 
      17   00:0000                      		defpage	 1,0x6000, 0x2000		; page 1 code 
      18   00:0000                      		defpage	 2,0x8000, 0x2000		; page 2 code  
      19   00:0000                      		defpage	 3,0xA000, 0x2000		; swapped data 
      20   00:0000                      		
      21   00:0000                      		defpage	 4..15					; 64KB of swapped data 
      22   00:0000                      
      23   00:0000                      
      24   00:0000                      
      25   00:0000                        		include "header.asm"			; only definitions
       1.  00:0000                      
       2.  00:0000                        // MSX 1 
       3.  00:0000  (00:F3DF)           RG0SAV  equ 0xF3DF  
       4.  00:0000  (00:F3E0)           RG1SAV  equ 0xF3E0  
       5.  00:0000  (00:F3E1)           RG2SAV  equ 0xF3E1
       6.  00:0000  (00:F3E2)           RG3SAV  equ 0xF3E2
       7.  00:0000  (00:F3E3)           RG4SAV  equ 0xF3E3
       8.  00:0000  (00:F3E4)           RG5SAV  equ 0xF3E4
       9.  00:0000  (00:F3E5)           RG6SAV  equ 0xF3E5
      10.  00:0000  (00:F3E6)           RG7SAV  equ 0xF3E6
      11.  00:0000                      // MSX 2
      12.  00:0000  (00:FFE7)           RG8SAV  equ 0xFFE7 
      13.  00:0000  (00:FFE8)           RG9SAV  equ 0xFFE8 
      14.  00:0000  (00:FFE9)           RG10SAV equ 0xFFE9 
      15.  00:0000  (00:FFEA)           RG11SAV equ 0xFFEA 
      16.  00:0000  (00:FFEB)           RG12SAV equ 0xFFEB 
      17.  00:0000  (00:FFEC)           RG13SAV equ 0xFFEC 
      18.  00:0000  (00:FFED)           RG14SAV equ 0xFFED 
      19.  00:0000  (00:FFEE)           RG15SAV equ 0xFFEE 
      20.  00:0000  (00:FFEF)           RG16SAV equ 0xFFEF 
      21.  00:0000  (00:FFF0)           RG17SAV equ 0xFFF0 
      22.  00:0000  (00:FFF1)           RG18SAV equ 0xFFF1 
      23.  00:0000  (00:FFF2)           RG19SAV equ 0xFFF2 
      24.  00:0000  (00:FFF3)           RG20SAV equ 0xFFF3 
      25.  00:0000  (00:FFF4)           RG21SAV equ 0xFFF4 
      26.  00:0000  (00:FFF5)           RG22SAV equ 0xFFF5 
      27.  00:0000  (00:FFF7)           RG23SAV equ 0xFFF7 
      28.  00:0000                      
      29.  00:0000  (00:FC9E)           _jiffy: equ 0xFC9E 
      30.  00:0000                      
      31.  00:0000                      	
      32.  00:0000                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      33.  00:0000                      
      34.  00:0000  (00:000C)           max_enem:					equ 12		; max 12
      35.  00:0000  (00:0003)           max_enem_bullets:			equ 3
      36.  00:0000  (00:0002)           max_bullets:				equ 2		; max number of enemies*2 + ms_bullets + enem_bullets + 3 for ms	<= 32 sprites
      37.  00:0000                      
      38.  00:0000  (00:0004)           maxspeed:					equ 4		; the actual speed is divided by 4
      39.  00:0000  (00:00B4)           assault_wave_timer_preset:	equ	3*60	; a wave each 3 seconds
      40.  00:0000  (00:0002)           enemy_bullet_speed:			equ	2	
      41.  00:0000  (00:0078)           xship_rel:					equ (128-8)
      42.  00:0000                      
      43.  00:0000  (00:0100)           mapWidth	equ	256
      44.  00:0000  (00:000A)           mapHeight	equ	10
      45.  00:0000  (00:00A0)           YSIZE		equ	10*16
      46.  00:0000                      
      47.  00:0000                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      48.  00:0000  (00:0000)           debug equ 0
      49.  00:0000                      
      50.  00:0000                      	macro setpage_a
      51.  00:0000                    < 		ld	(_kBank3),a
      52.  00:0000                    < 		inc	a
      53.  00:0000                    < 		ld	(_kBank4),a
      54.  00:0000                    < 	endmacro
      55.  00:0000                      	
      56.  00:0000                      	macro bdrclr n
      57.  00:0000                    < 		if debug
      58.  00:0000                    < 		ifdif	n,0	
      59.  00:0000                    < 			ld		a,n
      60.  00:0000                    < 		else
      61.  00:0000                    < 			xor	a
      62.  00:0000                    < 		endif
      63.  00:0000                    < 		out		(0x99),a
      64.  00:0000                    < 		ld		a,7+128
      65.  00:0000                    < 		out		(0x99),a	
      66.  00:0000                    < 		endif
      67.  00:0000                    < 	endmacro
      68.  00:0000                      	
      69.  00:0000                      	macro set_tile reg
      70.  00:0000                    < 		ld	a,reg
      71.  00:0000                    < [3]		rlca
      72.  00:0000                    < 		and	00000111B
      73.  00:0000                    < 		add	a,:_tiles0
      74.  00:0000                    < 		ld	(_kBank4),a		; select tile bank
      75.  00:0000                    < 
      76.  00:0000                    < 		ld	a,reg
      77.  00:0000                    < 		and	00011111B
      78.  00:0000                    < 		add	a,high _tiles0
      79.  00:0000                    < 	endmacro
      80.  00:0000                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
      26   00:0000                      		
      27   00:0000                      		
      28   00:0000                      		
      29   00:0000  (00)                		page 0
      30   00:4000                      		
      31   00:4000                              org 4000h
      32   00:4000                              dw  4241h,START,0,0,0,0,0,0
      32   00:4000  41 42 E5 48 00 00 00 00 00 00 00 00 00 00 00 00 
      33   00:4010                      
      34   00:4010                      	;-------------------------------------		
      35   00:4010                      
      36   00:4010                      
      37   00:4010                      		include rominit64.asm				
       1.  00:4010                      
       2.  00:4010                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       3.  00:4010                      ; set pages and subslot
       4.  00:4010                      ;
       5.  00:4010                      
       6.  00:4010                      
       7.  00:4010  (00:0024)           ENASLT:			equ		024h
       8.  00:4010  (00:0138)           RSLREG:			equ		0138h
       9.  00:4010  (00:FCC1)           EXPTBL:			equ		0FCC1h	; Bios Slot / Expansion Slot
      10.  00:4010                      
      11.  00:4010                      
      12.  00:4010                      ; ----------------------------
      13.  00:4010                      ; pre-set main slot for page 3
      14.  00:4010                      ; and set sub-slot for page 3
      15.  00:4010                      ; ----------------------------
      16.  00:4010                      	macro	mainslot_setup n
      17.  00:4010                    < 	and		3
      18.  00:4010                    < [2]	rrca
      19.  00:4010                    < 	and		0xC0
      20.  00:4010                    < 	ld		c,a
      21.  00:4010                    < 	ld		a,d
      22.  00:4010                    < 	and		0x3F
      23.  00:4010                    < 	or		c
      24.  00:4010                    < 	ld		c,a					; Primary slot value with main slot in page 3
      25.  00:4010                    < 
      26.  00:4010                    < 	ld		a,b
      27.  00:4010                    < 	and		0x0C
      28.  00:4010                    < [2]	rrca
      29.  00:4010                    < 	and		3
      30.  00:4010                    < 	ld		b,a					; B = Expanded slot in page 3
      31.  00:4010                    < 	ld		a,c
      32.  00:4010                    < 	out		(0A8h),a			; Slot : Main Slot, xx, xx, Main slot
      33.  00:4010                    < 	ld		a,(0FFFFh)
      34.  00:4010                    < 	cpl
      35.  00:4010                    < 	if (n<=4)
      36.  00:4010                    < [n]	RLCA
      37.  00:4010                    < 	else
      38.  00:4010                    < [8-n] RRCA	
      39.  00:4010                    < 	endif
      40.  00:4010                    < 	and		0xFC
      41.  00:4010                    < 	or		b
      42.  00:4010                    < 	if (n<=4)
      43.  00:4010                    < [n]	RRCA
      44.  00:4010                    < 	else
      45.  00:4010                    < [8-n] RLCA
      46.  00:4010                    < 	endif
      47.  00:4010                    < 	ld		(0FFFFh),a		; Expanded slot selected
      48.  00:4010                    < 	ld		b,a				; save for later	
      49.  00:4010                    < 	endmacro
      50.  00:4010                      		
      51.  00:4010                      
      52.  00:4010                      ; ------------------------------
      53.  00:4010                      ; SEARCH_SLOT
      54.  00:4010                      ; look for the slot of our rom
      55.  00:4010                      ; active in page 1
      56.  00:4010                      ; ------------------------------
      57.  00:4010                      
      58.  00:4010                      search_slot:
      59.  00:4010  CD 38 01            	call	RSLREG
      60.  00:4013  0F 0F               [2]	rrca
      61.  00:4015  E6 03               	and		3
      62.  00:4017  4F                  	ld		c,a
      63.  00:4018  06 00               	ld		b,0
      64.  00:401A  21 C1 FC            	ld		hl,EXPTBL
      65.  00:401D  09                  	add		hl,bc
      66.  00:401E  7E                  	ld		a,(hl)
      67.  00:401F  E6 80               	and		080h
      68.  00:4021  B1                  	or		c
      69.  00:4022  4F                  	ld		c,a
      70.  00:4023  23 23 23 23         [4]	inc		hl
      71.  00:4027  7E                  	ld		a,(hl)
      72.  00:4028  E6 0C               	and		0Ch
      73.  00:402A  B1                  	or		c
      74.  00:402B  32 11 CA            	ld		(slotvar),a
      75.  00:402E  C9                  	ret
      76.  00:402F                      	
      77.  00:402F                      ; ------------------------------
      78.  00:402F                      ; look for the slot of ram
      79.  00:402F                      ; active in page 3
      80.  00:402F                      ; ------------------------------
      81.  00:402F                      
      82.  00:402F                      search_slotram:
      83.  00:402F  F3                  	di
      84.  00:4030  CD 38 01            	call	RSLREG
      85.  00:4033  07 07               [2]	rlca
      86.  00:4035  E6 03               	and		3
      87.  00:4037  4F                  	ld		c,a
      88.  00:4038  06 00               	ld		b,0
      89.  00:403A  21 C1 FC            	ld		hl,EXPTBL
      90.  00:403D  09                  	add		hl,bc
      91.  00:403E  7E                  	ld		a,(hl)
      92.  00:403F  E6 80               	and		080h
      93.  00:4041  28 0D               	jr		z,search_slotram0
      94.  00:4043  B1                  	or		c
      95.  00:4044  4F                  	ld		c,a
      96.  00:4045  23 23 23 23         [4]	inc		hl
      97.  00:4049  7E                  	ld		a,(hl)
      98.  00:404A  07 07 07 07         [4]	rlca
      99.  00:404E  E6 0C               	and		0Ch
     100.  00:4050                      search_slotram0:
     101.  00:4050  B1                  	or		c
     102.  00:4051  32 12 CA            	ld		(slotram),a
     103.  00:4054  C9                  	ret
     104.  00:4055                      	
     105.  00:4055                      ; ------------------------------
     106.  00:4055                      ; SETROMPAGE0
     107.  00:4055                      ; Set the chart in
     108.  00:4055                      ; Page 0
     109.  00:4055                      ; -----------------------------
     110.  00:4055                      
     111.  00:4055                      setrompage0:
     112.  00:4055  3A 11 CA            	ld		a,(slotvar)
     113.  00:4058  C3 7C 40            	jp		setslotpage0
     114.  00:405B                      
     115.  00:405B                      setrampage0:
     116.  00:405B  3A 12 CA            	ld		a,(slotram)
     117.  00:405E  C3 7C 40            	jp		setslotpage0
     118.  00:4061                      
     119.  00:4061                      setrompage2:
     120.  00:4061  3A 11 CA            	ld		a,(slotvar)
     121.  00:4064  C3 F2 40            	jp		setslotpage2
     122.  00:4067                      
     123.  00:4067                      setrampage2:
     124.  00:4067  3A 12 CA            	ld		a,(slotram)
     125.  00:406A  C3 F2 40            	jp		setslotpage2
     126.  00:406D                      	
     127.  00:406D                      setrompage3:
     128.  00:406D  3A 11 CA            	ld		a,(slotvar)
     129.  00:4070  C3 39 41            	jp		setslotpage3
     130.  00:4073                      
     131.  00:4073                      setrampage3:
     132.  00:4073  3A 12 CA            	ld		a,(slotram)
     133.  00:4076  C3 39 41            	jp		setslotpage3
     134.  00:4079                      	
     135.  00:4079                      ; ------------------------------
     136.  00:4079                      ; RECBIOS
     137.  00:4079                      ; set the bios ROM
     138.  00:4079                      ; -------------------------------
     139.  00:4079                      recbios:
     140.  00:4079  3A C1 FC            	ld		a,(EXPTBL)
     141.  00:407C                      
     142.  00:407C                      ; ---------------------------
     143.  00:407C                      ; SETSLOTPAGE0
     144.  00:407C                      ; Set the slot passed in A
     145.  00:407C                      ; at page 0 in the Z80 address space
     146.  00:407C                      ; A: Format FxxxSSPP
     147.  00:407C                      ; ----------------------------
     148.  00:407C                      
     149.  00:407C                      setslotpage0:
     150.  00:407C  F3                  	di
     151.  00:407D  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     152.  00:407E  DB A8               	in		a,(0A8h)
     153.  00:4080  E6 FC               	and		0xFC
     154.  00:4082  57                  	ld		d,a					; D = Primary slot value
     155.  00:4083  78                  	ld		a,b
     156.  00:4084  E6 03               	and		3
     157.  00:4086  B2                  	or		d
     158.  00:4087  57                  	ld		d,a		; D = Final Value for primary slot
     159.  00:4088  78                  	ld		a,b		; Check if expanded
     160.  00:4089  CB 7F               	bit		7,a
     161.  00:408B  28 22               	jr		z,1f	; Not Expanded
     162.  00:408D                      	mainslot_setup	0
     162.  00:408D  E6 03             >  and  3
     162.  00:408F  0F 0F             > [2] rrca
     162.  00:4091  E6 C0             >  and  0xC0
     162.  00:4093  4F                >  ld  c,a
     162.  00:4094  7A                >  ld  a,d
     162.  00:4095  E6 3F             >  and  0x3F
     162.  00:4097  B1                >  or  c
     162.  00:4098  4F                >  ld  c,a
     162.  00:4099                    > 
     162.  00:4099  78                >  ld  a,b
     162.  00:409A  E6 0C             >  and  0x0C
     162.  00:409C  0F 0F             > [2] rrca
     162.  00:409E  E6 03             >  and  3
     162.  00:40A0  47                >  ld  b,a
     162.  00:40A1  79                >  ld  a,c
     162.  00:40A2  D3 A8             >  out  (0A8h),a
     162.  00:40A4  3A FF FF          >  ld  a,(0FFFFh)
     162.  00:40A7  2F                >  cpl
     162.  00:40A8                    >  if (n<=4)
     162.  00:40A8                    > [n] RLCA
     162.  00:40A8                    >  else
     162.  00:40A8                    ~ [8-n] RRCA
     162.  00:40A8                    ~  endif
     162.  00:40A8  E6 FC             >  and  0xFC
     162.  00:40AA  B0                >  or  b
     162.  00:40AB                    >  if (n<=4)
     162.  00:40AB                    > [n] RRCA
     162.  00:40AB                    >  else
     162.  00:40AB                    ~ [8-n] RLCA
     162.  00:40AB                    ~  endif
     162.  00:40AB  32 FF FF          >  ld  (0FFFFh),a
     162.  00:40AE  47                >  ld  b,a
     163.  00:40AF  7A                  1:	ld		a,d				; A = Final value
     164.  00:40B0  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     165.  00:40B2  C9                  	ret
     166.  00:40B3                      
     167.  00:40B3                      ; ---------------------------
     168.  00:40B3                      ; SETSLOTPAGE1
     169.  00:40B3                      ; Set the slot passed in A
     170.  00:40B3                      ; at page 1 in the Z80 address space
     171.  00:40B3                      ; A: Format FxxxSSPP
     172.  00:40B3                      ; ----------------------------
     173.  00:40B3                      
     174.  00:40B3                      setslotpage1:
     175.  00:40B3  F3                  	di
     176.  00:40B4  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     177.  00:40B5  DB A8               	in		a,(0A8h)
     178.  00:40B7  0F 0F               [2]	RRCA
     179.  00:40B9  E6 FC               	and		0xFC
     180.  00:40BB  57                  	ld		d,a					; D = Primary slot value
     181.  00:40BC  78                  	ld		a,b
     182.  00:40BD  E6 03               	and		3
     183.  00:40BF  B2                  	or		d
     184.  00:40C0  07 07               [2]	RLCA
     185.  00:40C2  57                  	ld		d,a		; D = Final Value for primary slot
     186.  00:40C3  78                  	ld		a,b		; Check if expanded
     187.  00:40C4  CB 7F               	bit		7,a
     188.  00:40C6  28 26               	jr		z,1f	; Not Expanded
     189.  00:40C8                      	mainslot_setup	6
     189.  00:40C8  E6 03             >  and  3
     189.  00:40CA  0F 0F             > [2] rrca
     189.  00:40CC  E6 C0             >  and  0xC0
     189.  00:40CE  4F                >  ld  c,a
     189.  00:40CF  7A                >  ld  a,d
     189.  00:40D0  E6 3F             >  and  0x3F
     189.  00:40D2  B1                >  or  c
     189.  00:40D3  4F                >  ld  c,a
     189.  00:40D4                    > 
     189.  00:40D4  78                >  ld  a,b
     189.  00:40D5  E6 0C             >  and  0x0C
     189.  00:40D7  0F 0F             > [2] rrca
     189.  00:40D9  E6 03             >  and  3
     189.  00:40DB  47                >  ld  b,a
     189.  00:40DC  79                >  ld  a,c
     189.  00:40DD  D3 A8             >  out  (0A8h),a
     189.  00:40DF  3A FF FF          >  ld  a,(0FFFFh)
     189.  00:40E2  2F                >  cpl
     189.  00:40E3                    >  if (n<=4)
     189.  00:40E3                    ~ [n] RLCA
     189.  00:40E3                    ~  else
     189.  00:40E3  0F 0F             > [8-n] RRCA
     189.  00:40E5                    >  endif
     189.  00:40E5  E6 FC             >  and  0xFC
     189.  00:40E7  B0                >  or  b
     189.  00:40E8                    >  if (n<=4)
     189.  00:40E8                    ~ [n] RRCA
     189.  00:40E8                    ~  else
     189.  00:40E8  07 07             > [8-n] RLCA
     189.  00:40EA                    >  endif
     189.  00:40EA  32 FF FF          >  ld  (0FFFFh),a
     189.  00:40ED  47                >  ld  b,a
     190.  00:40EE  7A                  1:	ld		a,d				; A = Final value
     191.  00:40EF  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     192.  00:40F1  C9                  	ret
     193.  00:40F2                      	
     194.  00:40F2                      
     195.  00:40F2                      ; ---------------------------
     196.  00:40F2                      ; SETSLOTPAGE2
     197.  00:40F2                      ; Set the slot passed in A
     198.  00:40F2                      ; at page 2 in the Z80 address space
     199.  00:40F2                      ; A: Format FxxxSSPP
     200.  00:40F2                      ; ----------------------------
     201.  00:40F2                      
     202.  00:40F2                      setslotpage2:
     203.  00:40F2  F3                  	di
     204.  00:40F3  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     205.  00:40F4  DB A8               	in		a,(0A8h)
     206.  00:40F6  07 07 07 07         [4]	RLCA
     207.  00:40FA  E6 FC               	and		0xFC
     208.  00:40FC  57                  	ld		d,a					; D = Primary slot value
     209.  00:40FD  78                  	ld		a,b
     210.  00:40FE  E6 03               	and		3
     211.  00:4100  B2                  	or		d
     212.  00:4101  0F 0F 0F 0F         [4]	RRCA
     213.  00:4105  57                  	ld		d,a		; D = Final Value for primary slot
     214.  00:4106  78                  	ld		a,b		; Check if expanded
     215.  00:4107  CB 7F               	bit		7,a
     216.  00:4109  28 2A               	jr		z,1f	; Not Expanded
     217.  00:410B                      	mainslot_setup	4
     217.  00:410B  E6 03             >  and  3
     217.  00:410D  0F 0F             > [2] rrca
     217.  00:410F  E6 C0             >  and  0xC0
     217.  00:4111  4F                >  ld  c,a
     217.  00:4112  7A                >  ld  a,d
     217.  00:4113  E6 3F             >  and  0x3F
     217.  00:4115  B1                >  or  c
     217.  00:4116  4F                >  ld  c,a
     217.  00:4117                    > 
     217.  00:4117  78                >  ld  a,b
     217.  00:4118  E6 0C             >  and  0x0C
     217.  00:411A  0F 0F             > [2] rrca
     217.  00:411C  E6 03             >  and  3
     217.  00:411E  47                >  ld  b,a
     217.  00:411F  79                >  ld  a,c
     217.  00:4120  D3 A8             >  out  (0A8h),a
     217.  00:4122  3A FF FF          >  ld  a,(0FFFFh)
     217.  00:4125  2F                >  cpl
     217.  00:4126                    >  if (n<=4)
     217.  00:4126  07 07 07 07       > [n] RLCA
     217.  00:412A                    >  else
     217.  00:412A                    ~ [8-n] RRCA
     217.  00:412A                    ~  endif
     217.  00:412A  E6 FC             >  and  0xFC
     217.  00:412C  B0                >  or  b
     217.  00:412D                    >  if (n<=4)
     217.  00:412D  0F 0F 0F 0F       > [n] RRCA
     217.  00:4131                    >  else
     217.  00:4131                    ~ [8-n] RLCA
     217.  00:4131                    ~  endif
     217.  00:4131  32 FF FF          >  ld  (0FFFFh),a
     217.  00:4134  47                >  ld  b,a
     218.  00:4135  7A                  1:	ld		a,d				; A = Final value
     219.  00:4136  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     220.  00:4138  C9                  	ret
     221.  00:4139                      	
     222.  00:4139                      ; ---------------------------
     223.  00:4139                      ; SETSLOTPAGE3
     224.  00:4139                      ; Set the slot passed in A
     225.  00:4139                      ; at page 3 in the Z80 address space
     226.  00:4139                      ; A: Format FxxxSSPP
     227.  00:4139                      ; ----------------------------
     228.  00:4139                      	
     229.  00:4139                      setslotpage3:
     230.  00:4139  F3                  	di
     231.  00:413A  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     232.  00:413B  DB A8               	in		a,(0A8h)
     233.  00:413D  07 07               [2]	RLCA
     234.  00:413F  E6 FC               	and		0xFC
     235.  00:4141  57                  	ld		d,a					; D = Primary slot value
     236.  00:4142  78                  	ld		a,b
     237.  00:4143  E6 03               	and		3
     238.  00:4145  B2                  	or		d
     239.  00:4146  0F 0F               [2]	RRCA	
     240.  00:4148  57                  	ld		d,a		; D = Final Value for primary slot
     241.  00:4149  78                  	ld		a,b		; Check if expanded
     242.  00:414A  CB 7F               	bit		7,a
     243.  00:414C  28 26               	jr		z,1f	; Not Expanded
     244.  00:414E                      	mainslot_setup	2
     244.  00:414E  E6 03             >  and  3
     244.  00:4150  0F 0F             > [2] rrca
     244.  00:4152  E6 C0             >  and  0xC0
     244.  00:4154  4F                >  ld  c,a
     244.  00:4155  7A                >  ld  a,d
     244.  00:4156  E6 3F             >  and  0x3F
     244.  00:4158  B1                >  or  c
     244.  00:4159  4F                >  ld  c,a
     244.  00:415A                    > 
     244.  00:415A  78                >  ld  a,b
     244.  00:415B  E6 0C             >  and  0x0C
     244.  00:415D  0F 0F             > [2] rrca
     244.  00:415F  E6 03             >  and  3
     244.  00:4161  47                >  ld  b,a
     244.  00:4162  79                >  ld  a,c
     244.  00:4163  D3 A8             >  out  (0A8h),a
     244.  00:4165  3A FF FF          >  ld  a,(0FFFFh)
     244.  00:4168  2F                >  cpl
     244.  00:4169                    >  if (n<=4)
     244.  00:4169  07 07             > [n] RLCA
     244.  00:416B                    >  else
     244.  00:416B                    ~ [8-n] RRCA
     244.  00:416B                    ~  endif
     244.  00:416B  E6 FC             >  and  0xFC
     244.  00:416D  B0                >  or  b
     244.  00:416E                    >  if (n<=4)
     244.  00:416E  0F 0F             > [n] RRCA
     244.  00:4170                    >  else
     244.  00:4170                    ~ [8-n] RLCA
     244.  00:4170                    ~  endif
     244.  00:4170  32 FF FF          >  ld  (0FFFFh),a
     244.  00:4173  47                >  ld  b,a
     245.  00:4174  7A                  1:	ld		a,d				; A = Final value
     246.  00:4175  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     247.  00:4177  C9                  	ret
     248.  00:4178                      
     249.  00:4178                      	
      38   00:4178                      		include vdpio.asm
       1.  00:4178                      
       2.  00:4178                             
       3.  00:4178                      ;-------------------------------------
       4.  00:4178                      _cls:		
       5.  00:4178  0E 00               		ld		c,0
       6.  00:417A  51                  		ld		d,c
       7.  00:417B  59                  		ld		e,c
       8.  00:417C  F3                  		di
       9.  00:417D  CD C5 41            		call	_vdpsetvramwr
      10.  00:4180  41                  		ld		b,c
      11.  00:4181  1E 01               		ld		e,1
      12.  00:4183  AF                  		xor		a
      13.  00:4184  D3 98               1:		out		(0x98),a
      14.  00:4186  ED A1               		cpi
      15.  00:4188  EA 84 41            		jp   		pe,1b
      16.  00:418B  1D                  		dec	e
      17.  00:418C  C2 84 41            		jp		nz,1b
      18.  00:418F  C9                  		ret
      19.  00:4190                      		
      20.  00:4190                      _cls0:
      21.  00:4190  0E 00               		ld		c,0
      22.  00:4192  51                  		ld		d,c
      23.  00:4193  59                  		ld		e,c
      24.  00:4194  F3                  		di
      25.  00:4195  CD C5 41            		call	_vdpsetvramwr
      26.  00:4198  FB                  		ei
      27.  00:4199  01 00 A0            		ld		bc,mapHeight*16*256
      28.  00:419C  AF                  		xor		a
      29.  00:419D  D3 98               1:		out		(0x98),a
      30.  00:419F  ED A1                       cpi
      31.  00:41A1  EA 9D 41                    jp   	pe,1b
      32.  00:41A4  C9                  		ret
      33.  00:41A5                      		
      34.  00:41A5                      font_cpy:		
      35.  00:41A5  0E 01               		ld		c,1
      36.  00:41A7  11 00 A0            		ld		de,160*256
      37.  00:41AA  CD C5 41            		call	_vdpsetvramwr
      38.  00:41AD  21 00 A0            		ld		hl,fonts
      39.  00:41B0  3E 0D               		ld		a,:fonts
      40.  00:41B2  16 03               		ld		d,3
      41.  00:41B4  32 00 B0            2:		ld		(_kBank4),a
      42.  00:41B7  01 98 00            		ld		bc,0x98
      43.  00:41BA  1E 20               		ld		e,32
      44.  00:41BC  ED B3               1:		otir
      45.  00:41BE  1D                  		dec	e
      46.  00:41BF  20 FB               		jr	nz,1b
      47.  00:41C1  15                  		dec	d
      48.  00:41C2  20 F0               		jr	nz,2b
      49.  00:41C4  C9                  		ret
      50.  00:41C5                      		
      51.  00:41C5                      ;-------------------------------------
      52.  00:41C5                      		
      53.  00:41C5  (00:0099)           vdpport1 equ 0x99
      54.  00:41C5  (00:009A)           vdpport2 equ 0x9A
      55.  00:41C5                      
      56.  00:41C5                      ; levelcolors:
      57.  00:41C5                      	;  incbin "palette.bin"
      58.  00:41C5                      
      59.  00:41C5                      ; _SetPalet:   
      60.  00:41C5                      		; di
      61.  00:41C5                      		; xor a 			;Set pointer to zero.
      62.  00:41C5                      		; out (vdpport1),a        
      63.  00:41C5                      		; ld  a,16 | 010000000B
      64.  00:41C5                      		; out (vdpport1),a
      65.  00:41C5                      
      66.  00:41C5                      		; ld  hl,levelcolors
      67.  00:41C5                      		; ld bc,vdpport2+32*256
      68.  00:41C5                      		; otir
      69.  00:41C5                      		; ei
      70.  00:41C5                      		; ret
      71.  00:41C5                      
      72.  00:41C5                      ;Set VDP for writing at address CDE (17-bit) 
      73.  00:41C5                      
      74.  00:41C5                      _vdpsetvramwr:
      75.  00:41C5  79                  		ld a,c
      76.  00:41C6                      _vdpsetvramwr2:
      77.  00:41C6                      ;Set VDP for writing at address ADE (17-bit) ;
      78.  00:41C6  CB 02               		rlc d
      79.  00:41C8  17                  		rla
      80.  00:41C9  CB 02               		rlc d
      81.  00:41CB  17                  		rla
      82.  00:41CC  CB 3A               		srl d ; primo shift, il secondo dopo la out
      83.  00:41CE                      
      84.  00:41CE  D3 99               		out (0x99),a ;set bits 14-16
      85.  00:41D0  3E 8E               		ld a,14+128
      86.  00:41D2  D3 99               		out (0x99),a
      87.  00:41D4                      
      88.  00:41D4  CB 3A               		srl d ; secondo shift.     
      89.  00:41D6                      _vdpsetvramwr14
      90.  00:41D6  7B                  		ld a,e ;set bits 0-7
      91.  00:41D7  D3 99               		out (0x99),a
      92.  00:41D9  7A                  		ld a,d ;set bits 8-13
      93.  00:41DA  F6 40               		or 0x40 ; + write access
      94.  00:41DC  D3 99               		out (0x99),a
      95.  00:41DE  C9                  		ret
      96.  00:41DF                      	
      97.  00:41DF                      ;Set VDP port #98 to start reading at address CDE (17-bit) ;
      98.  00:41DF                      
      99.  00:41DF                      _vdpsetvramrd:
     100.  00:41DF  79                  		ld a,c
     101.  00:41E0                      ;Set VDP port #98 to start reading at address ADE (17-bit) ;
     102.  00:41E0  CB 02               		rlc d
     103.  00:41E2  17                  		rla
     104.  00:41E3  CB 02               		rlc d
     105.  00:41E5  17                  		rla
     106.  00:41E6  CB 3A               		srl d 			; primo shift, il secondo dopo la out
     107.  00:41E8                      
     108.  00:41E8  D3 99               		out (0x99),a 	; set bits 14-16
     109.  00:41EA  3E 8E               		ld a,14+128
     110.  00:41EC  D3 99               		out (0x99),a
     111.  00:41EE                      
     112.  00:41EE  CB 3A               		srl d 	; secondo shift.            
     113.  00:41F0  7B                  		ld a,e 	; set bits 0-7
     114.  00:41F1  D3 99               		out (0x99),a
     115.  00:41F3  7A                  		ld a,d 	; set bits 8-13
     116.  00:41F4  E6 3F               		and 0x3F
     117.  00:41F6  D3 99               		out (0x99),a
     118.  00:41F8  C9                  		ret
     119.  00:41F9                      
     120.  00:41F9                      ;Display page E in screen 5
     121.  00:41F9                      _setpage:
     122.  00:41F9  7B                  	ld a,e
     123.  00:41FA  87 87 87 87 87      [5]	add a,a ;x32
     124.  00:41FF  F6 1F               	or	 00011111B
     125.  00:4201  F3                  	di
     126.  00:4202  D3 99               	out (0x99),a
     127.  00:4204  3E 82               	ld a,2+128
     128.  00:4206  D3 99               	out (0x99),a
     129.  00:4208  FB                  	ei            
     130.  00:4209  C9                  	ret
     131.  00:420A                      
     132.  00:420A  (00:005F)           chgmod        equ     0x005f      ;change graphic mode
     133.  00:420A  (00:000C)           RDSLT         equ     0x000c      ;read address HL in slot A
     134.  00:420A  (00:0156)           KILBUF        equ     0x0156      ;clear keyboard buffer
     135.  00:420A                      
     136.  00:420A                      set_scr:
     137.  00:420A                      	
     138.  00:420A                      	// sprites 16x16
     139.  00:420A  3A E0 F3            	ld		a,(RG1SAV)
     140.  00:420D  F6 02               	or		00000010B
     141.  00:420F  32 E0 F3            	ld		(RG1SAV),a
     142.  00:4212                      
     143.  00:4212                      	// enable sprites + TP
     144.  00:4212  3A E7 FF            	ld		a,(RG8SAV)
     145.  00:4215                      	; or		00100010B
     146.  00:4215  F6 20               	or		00100000B
     147.  00:4217  32 E7 FF            	ld		(RG8SAV),a
     148.  00:421A                      		
     149.  00:421A                      	// Set @50Hz (only PAL is supported)
     150.  00:421A  3A 13 CA            	ld	a,(SEL_NTSC)
     151.  00:421D  A7                  	and 	a
     152.  00:421E  20 07               	jr		nz,1f
     153.  00:4220                      	
     154.  00:4220  3A E8 FF            	ld		a,(RG9SAV)		
     155.  00:4223  F6 02               	or		00000010B		; PAL
     156.  00:4225  18 05               	jr	2f
     157.  00:4227                      1:		
     158.  00:4227  3A E8 FF            	ld		a,(RG9SAV)		
     159.  00:422A  E6 FD               	and		11111101B		; NTSC 
     160.  00:422C  32 E8 FF            2:	ld		(RG9SAV),a
     161.  00:422F                      
     162.  00:422F  3E 08               	ld  	a,8
     163.  00:4231  CD 5F 00            	call	chgmod
     164.  00:4234                      
     165.  00:4234  3A E8 FF            	ld		a,(RG9SAV)		
     166.  00:4237  E6 7F               	and		01111111B		; 192 lines	
     167.  00:4239  32 E8 FF            	ld		(RG9SAV),a
     168.  00:423C  D3 99               	out		(0x99),a
     169.  00:423E  3E 89               	ld		a,9+128
     170.  00:4240  D3 99               	out		(0x99),a
     171.  00:4242                      	
     172.  00:4242                      	// border color
     173.  00:4242  AF                  	xor		a
     174.  00:4243  32 E6 F3            	ld		(RG7SAV),a
     175.  00:4246  D3 99               	out		(0x99),a
     176.  00:4248  3E 87               	ld		a,7+128
     177.  00:424A  D3 99               	out		(0x99),a
     178.  00:424C  C9                  	ret
     179.  00:424D                      
     180.  00:424D                      
     181.  00:424D                      _waitvdp:
     182.  00:424D  3E 02               	ld a,2
     183.  00:424F  D3 99               	out (0x99),a
     184.  00:4251  3E 8F               	ld a, 128+15
     185.  00:4253  D3 99               	out (0x99),a
     186.  00:4255  DB 99               1:  in	a,(0x99)
     187.  00:4257  0F                  	rrca
     188.  00:4258  DA 55 42            	jp c,1b
     189.  00:425B                      
     190.  00:425B  C9                  	ret
     191.  00:425C                      
     192.  00:425C                      ; .inf:
     193.  00:425C                      	; ld	a,r			; random colour
     194.  00:425C                      	; out		(0x99),a
     195.  00:425C                      	; ld		a,7+128
     196.  00:425C                      	; out		(0x99),a
     197.  00:425C                      	; jp	1b
     198.  00:425C                      	
      39   00:425C                      		include isr.asm
       1.  00:425C                      
       2.  00:425C                      
       3.  00:425C                      isr_set:
       4.  00:425C  F3                  		di
       5.  00:425D  21 38 00            		ld	hl,0x0038
       6.  00:4260  36 C3               		ld	(hl),0xC3
       7.  00:4262  23                  		inc	hl
       8.  00:4263  36 9B               		ld	(hl),low _scroll
       9.  00:4265  23                  		inc	hl
      10.  00:4266  36 42               		ld	(hl),high _scroll
      11.  00:4268                      
      12.  00:4268  3E 9E               		ld    A,YSIZE-2
      13.  00:426A  D3 99               		out (0x99),a
      14.  00:426C  3E 93               		ld    A,19+128
      15.  00:426E  D3 99               		out (0x99),a	; set interrupt line
      16.  00:4270                      	
      17.  00:4270  3A DF F3            		ld    A,(RG0SAV)
      18.  00:4273  F6 10               		or    00010000B
      19.  00:4275  32 DF F3            		ld    (RG0SAV),A
      20.  00:4278  D3 99               		out (0x99),a
      21.  00:427A  3E 80               		ld    A,0+128
      22.  00:427C  D3 99               		out (0x99),a	; enable line interrupt
      23.  00:427E  C9                  		ret
      24.  00:427F                      	
      25.  00:427F                      isr_reset:
      26.  00:427F  F3                  		di
      27.  00:4280  21 38 00            		ld	hl,0x0038
      28.  00:4283  36 C3               		ld	(hl),0xC3
      29.  00:4285  23                  		inc	hl
      30.  00:4286  36 BA               		ld	(hl),low _fake_isr
      31.  00:4288  23                  		inc	hl
      32.  00:4289  36 42               		ld	(hl),high _fake_isr
      33.  00:428B                      
      34.  00:428B  3A DF F3            		ld    A,(RG0SAV)
      35.  00:428E  E6 EF               		and    11101111B
      36.  00:4290  32 DF F3            		ld    (RG0SAV),A
      37.  00:4293  D3 99               		out (0x99),a
      38.  00:4295  3E 80               		ld    A,0+128
      39.  00:4297  D3 99               		out (0x99),a	; disable line interrupt		
      40.  00:4299  FB                  		ei
      41.  00:429A  C9                  		ret
      42.  00:429B                      
      43.  00:429B                      
      44.  00:429B                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      45.  00:429B                      ;  actual ISR handler
      46.  00:429B                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      47.  00:429B                      
      48.  00:429B                      _scroll:
      49.  00:429B  F5                  		push	af
      50.  00:429C                      		
      51.  00:429C  3E 01               		ld a,1 			; read S#1
      52.  00:429E  D3 99               		out (0x99),a
      53.  00:42A0  3E 8F               		ld a,128+15
      54.  00:42A2  D3 99               		out (0x99),a
      55.  00:42A4                      		 
      56.  00:42A4  DB 99               		in	a,(0x99)
      57.  00:42A6  1F                  		rra
      58.  00:42A7  DA 37 43            		jp	c,lint	
      59.  00:42AA                      
      60.  00:42AA  AF                  		xor	a 			; read S#0
      61.  00:42AB  D3 99               		out (0x99),a
      62.  00:42AD  3E 8F               		ld a,128+15
      63.  00:42AF  D3 99               		out (0x99),a
      64.  00:42B1                      		 
      65.  00:42B1  DB 99               		in	a,(0x99)
      66.  00:42B3  07                  		rlca
      67.  00:42B4  DA C7 42            		jp	c,vblank
      68.  00:42B7                      		
      69.  00:42B7  F1                  		pop	af			; none of them (?)
      70.  00:42B8  FB                  		ei
      71.  00:42B9  C9                  		ret
      72.  00:42BA                      
      73.  00:42BA                      _fake_isr:
      74.  00:42BA  F5                  		push	af
      75.  00:42BB                      
      76.  00:42BB  AF                  		xor	a 			; read S#0
      77.  00:42BC  D3 99               		out (0x99),a
      78.  00:42BE  3E 8F               		ld a,128+15
      79.  00:42C0  D3 99               		out (0x99),a
      80.  00:42C2                      		 
      81.  00:42C2  DB 99               		in	a,(0x99)
      82.  00:42C4                      		
      83.  00:42C4  F1                  		pop	af			
      84.  00:42C5  FB                  		ei
      85.  00:42C6  C9                  		ret
      86.  00:42C7                      		
      87.  00:42C7                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      88.  00:42C7                      ;  VBLANK
      89.  00:42C7                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      90.  00:42C7                      	
      91.  00:42C7                      vblank:
      92.  00:42C7  3A E7 FF            		ld	a,(RG8SAV)
      93.  00:42CA  E6 FD               		and	011111101B		
      94.  00:42CC  32 E7 FF            		ld	(RG8SAV),a
      95.  00:42CF  D3 99               		out	(0x99),a
      96.  00:42D1  3E 88               		ld	a,8+128
      97.  00:42D3  D3 99               		out	(0x99),a			; enable sprites
      98.  00:42D5                      
      99.  00:42D5                      		; ld	a,(noscroll)
     100.  00:42D5                      		; or	a
     101.  00:42D5                      		; jr	z,1f
     102.  00:42D5                      		
     103.  00:42D5  E5                  		push   hl         
     104.  00:42D6  D5                  		push   de         
     105.  00:42D7  C5                  		push   bc         
     106.  00:42D8  D9                  		exx               
     107.  00:42D9  08                  		ex     af,af'     
     108.  00:42DA  E5                  		push   hl         
     109.  00:42DB  D5                  		push   de         
     110.  00:42DC  C5                  		push   bc         
     111.  00:42DD  F5                  		push   af         
     112.  00:42DE  FD E5               		push   iy         
     113.  00:42E0  DD E5               		push   ix         
     114.  00:42E2                      
     115.  00:42E2  CD D3 43            		call	pageswap			; test for page swap
     116.  00:42E5  CD 01 44            		call	reset_sliceflag
     117.  00:42E8                      		
     118.  00:42E8  2A 1D CA            		ld	hl,(_xmappos)			; corner top left of the screen window in the map in pixels
     119.  00:42EB                      
     120.  00:42EB                      		repeat 4
     121.  00:42EB                    < 		srl	h
     122.  00:42EB                    < 		rr	l
     123.  00:42EB                    < 		endrepeat					; corner top left of the screen window in the map in tiles
     123.  00:42EB  CB 3C CB 1D CB 3C CB 1D CB 3C CB 1D CB 3C CB 1D 
     124.  00:42FB                      		
     125.  00:42FB  3A 21 CA            		ld		a,(_xspeed+1)
     126.  00:42FE  CB 07               		rlc a
     127.  00:4300  DA 10 43            		jp	c,.scroll_left
     128.  00:4303                      		
     129.  00:4303                      .scroll_right		
     130.  00:4303  11 0F C0            		ld	de,_levelmap+15
     131.  00:4306  19                  		add	hl,de					; HL = corner top right of the screen window in the map in tiles
     132.  00:4307                      
     133.  00:4307  CD C5 43            		call	xscroll				; move the screen ! Not if VDP commands are being executed			
     134.  00:430A  CD 65 45            		call	brdrs_right			; build a column right pointed by HL, clear a column left, move a stripe of screen
     135.  00:430D                      		
     136.  00:430D                      		bdrclr 00000011B
     136.  00:430D                    >   if debug
     136.  00:430D                    ~   ifdif n,0
     136.  00:430D                    ~    ld  a,n
     136.  00:430D                    ~   else
     136.  00:430D                    ~    xor a
     136.  00:430D                    ~   endif
     136.  00:430D                    ~   out  (0x99),a
     136.  00:430D                    ~   ld  a,7+128
     136.  00:430D                    ~   out  (0x99),a
     136.  00:430D                    ~   endif
     137.  00:430D                      		
     138.  00:430D  C3 1A 43            		jp	.return
     139.  00:4310                      		
     140.  00:4310                      .scroll_left
     141.  00:4310  11 00 C0            		ld	de,_levelmap+0
     142.  00:4313  19                  		add	hl,de					; HL = corner top left of the screen window in the map in tiles
     143.  00:4314                      		
     144.  00:4314  CD C5 43            		call	xscroll				; move the screen ! Not if VDP commands are being executed			
     145.  00:4317  CD 57 45            		call	brdrs_left			; build a column left pointed by HL, clear a column right, move a stripe of screen
     146.  00:431A                      		
     147.  00:431A                      		bdrclr 00000011B
     147.  00:431A                    >   if debug
     147.  00:431A                    ~   ifdif n,0
     147.  00:431A                    ~    ld  a,n
     147.  00:431A                    ~   else
     147.  00:431A                    ~    xor a
     147.  00:431A                    ~   endif
     147.  00:431A                    ~   out  (0x99),a
     147.  00:431A                    ~   ld  a,7+128
     147.  00:431A                    ~   out  (0x99),a
     147.  00:431A                    ~   endif
     148.  00:431A                      		
     149.  00:431A                      .return
     150.  00:431A  CD 4C 44            		call 	changexpos
     151.  00:431D  CD 15 44            		call 	changespeed
     152.  00:4320                      		
     153.  00:4320                      		if debug		
     154.  00:4320                    ~ 		ld	hl,256	;XXXX
     155.  00:4320                    ~ 		ld	(_xspeed),hl
     156.  00:4320                    ~ 		endif
     157.  00:4320                      		
     158.  00:4320  2A 9E FC            		ld	hl,(_jiffy)				; timer
     159.  00:4323  23                  		inc	hl
     160.  00:4324  22 9E FC            		ld	(_jiffy),hl
     161.  00:4327                      				
     162.  00:4327                      		; call _waitvdp
     163.  00:4327                      		bdrclr 0
     163.  00:4327                    >   if debug
     163.  00:4327                    ~   ifdif n,0
     163.  00:4327                    ~    ld  a,n
     163.  00:4327                    ~   else
     163.  00:4327                    ~    xor a
     163.  00:4327                    ~   endif
     163.  00:4327                    ~   out  (0x99),a
     163.  00:4327                    ~   ld  a,7+128
     163.  00:4327                    ~   out  (0x99),a
     163.  00:4327                    ~   endif
     164.  00:4327                      		
     165.  00:4327  DD E1               		pop    ix         
     166.  00:4329  FD E1               		pop    iy         
     167.  00:432B  F1                  		pop    af         
     168.  00:432C  C1                  		pop    bc         
     169.  00:432D  D1                  		pop    de         
     170.  00:432E  E1                  		pop    hl         
     171.  00:432F  08                  		ex     af,af'     
     172.  00:4330  D9                  		exx               
     173.  00:4331  C1                  		pop    bc         
     174.  00:4332  D1                  		pop    de         
     175.  00:4333  E1                  		pop    hl         
     176.  00:4334                      
     177.  00:4334                      1:		
     178.  00:4334  F1                  		pop	af
     179.  00:4335  FB                  		ei
     180.  00:4336  C9                  		ret
     181.  00:4337                      		
     182.  00:4337                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     183.  00:4337                      ;  Line Interrupt
     184.  00:4337                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     185.  00:4337                      	; -hperiod number of CPU cycles per HBlank [228]
     186.  00:4337                      	; -vperiod number of CPU cycles per VBlank in NTSC [59736]
     187.  00:4337                      lint:
     188.  00:4337  3A E0 F3            		ld	a,(RG1SAV)
     189.  00:433A  E6 BF               		and	010111111B			; disable screen
     190.  00:433C  32 E0 F3            		ld	(RG1SAV),a
     191.  00:433F  D3 99               		out	(0x99),a
     192.  00:4341  3E 81               		ld	a,1+128
     193.  00:4343  D3 99               		out	(0x99),a
     194.  00:4345                      
     195.  00:4345  E5                  		push   hl         
     196.  00:4346  D5                  		push   de         
     197.  00:4347  C5                  		push   bc         
     198.  00:4348  D9                  		exx               
     199.  00:4349  08                  		ex     af,af'     
     200.  00:434A  E5                  		push   hl         
     201.  00:434B  D5                  		push   de         
     202.  00:434C  C5                  		push   bc         
     203.  00:434D  F5                  		push   af         
     204.  00:434E  FD E5               		push   iy         
     205.  00:4350  DD E5               		push   ix         
     206.  00:4352                      		
     207.  00:4352  3A E7 FF            		ld		a,(RG8SAV)
     208.  00:4355  F6 02               		or		000000010B		
     209.  00:4357  32 E7 FF            		ld		(RG8SAV),a
     210.  00:435A  D3 99               		out		(0x99),a
     211.  00:435C  3E 88               		ld		a,8+128
     212.  00:435E  D3 99               		out		(0x99),a		; disable sprites
     213.  00:4360                      		
     214.  00:4360  3E 3F               		ld a,3FH				; 0XX11111B
     215.  00:4362  D3 99               		out (0x99),a
     216.  00:4364  3E 82               		ld a,2+128				; R#2 
     217.  00:4366  D3 99               		out (0x99),a			; score bar in page 1
     218.  00:4368                      
     219.  00:4368  1E 08               		ld	e,8
     220.  00:436A  CD DA 48            		call	checkkbd
     221.  00:436D  32 1B CA            		ld	(joystick),a
     222.  00:4370                      		
     223.  00:4370  CD E4 43            		call	set_displaypage	; update displaypage and _xoffset
     224.  00:4373  CD AE 43 CD AE 43   [2]		call	waitHBLANK		; now we are at the start of HBLANK
     225.  00:4379  CD 4D 42            		call 	_waitvdp		; do not update r#18 if the vdp is copying
     226.  00:437C  CD AE 43            		call	waitHBLANK		; now we are at the start of HBLANK
     227.  00:437F                      		
     228.  00:437F  AF                  		xor	a
     229.  00:4380  D3 99               		out	(099h),a
     230.  00:4382  3E 92               		ld	a,18+128
     231.  00:4384  D3 99               		out	(099h),a			; score bar fixed 
     232.  00:4386                      		
     233.  00:4386  3A E0 F3            		ld	a,(RG1SAV)
     234.  00:4389  F6 42               		or 	01000010B			; enable screen
     235.  00:438B  32 E0 F3            		ld	(RG1SAV),a
     236.  00:438E  D3 99               		out	(0x99),a
     237.  00:4390  3E 81               		ld	a,1+128
     238.  00:4392  D3 99               		out	(0x99),a
     239.  00:4394                      
     240.  00:4394                      
     241.  00:4394                      		
     242.  00:4394  1E 06               		ld	e,6
     243.  00:4396  CD DA 48            		call	checkkbd
     244.  00:4399  E6 01               		and		1				; SHIFT
     245.  00:439B  CC 39 48            		call 	z,animtest
     246.  00:439E                      
     247.  00:439E  DD E1               		pop    ix         
     248.  00:43A0  FD E1               		pop    iy         
     249.  00:43A2  F1                  		pop    af         
     250.  00:43A3  C1                  		pop    bc         
     251.  00:43A4  D1                  		pop    de         
     252.  00:43A5  E1                  		pop    hl         
     253.  00:43A6  08                  		ex     af,af'     
     254.  00:43A7  D9                  		exx               
     255.  00:43A8  C1                  		pop    bc         
     256.  00:43A9  D1                  		pop    de         
     257.  00:43AA  E1                  		pop    hl         
     258.  00:43AB                      
     259.  00:43AB  F1                  		pop	 af
     260.  00:43AC  FB                  		ei
     261.  00:43AD  C9                  		ret
     262.  00:43AE                      	
     263.  00:43AE                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
     264.  00:43AE                      ; ; manage score bar at YSIZE
     265.  00:43AE                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
     266.  00:43AE                      waitHBLANK:
     267.  00:43AE  3E 02               		ld a,2 				; read S#2
     268.  00:43B0  D3 99               		out (0x99),a
     269.  00:43B2  3E 8F               		ld a,128+15
     270.  00:43B4  D3 99               		out (0x99),a		; poll for HBLANK
     271.  00:43B6                      		 
     272.  00:43B6  DB 99               1:		in	a,(0x99)		; if 1 we are in HBLANK already, so wait until end of HBLANK
     273.  00:43B8  E6 20               		and	0x20
     274.  00:43BA  C2 B6 43            		jp	nz,1b			
     275.  00:43BD                      
     276.  00:43BD  DB 99               1:		in	a,(0x99)		; wait until end of the active area
     277.  00:43BF  E6 20               		and	0x20
     278.  00:43C1  CA BD 43            		jp	z,1b
     279.  00:43C4  C9                  		ret
     280.  00:43C5                      	
     281.  00:43C5                      ; lint:	
     282.  00:43C5                      		; ; call	waitHBLANK
     283.  00:43C5                      		; ; now we are at the start of HBLANK
     284.  00:43C5                      	
     285.  00:43C5                      		; ; ld	a,(RG1SAV)
     286.  00:43C5                      		; ; and	010111111B			; disable screen
     287.  00:43C5                      		; ; ld	(RG1SAV),a
     288.  00:43C5                      		; ; out	(0x99),a
     289.  00:43C5                      		; ; ld	a,1+128
     290.  00:43C5                      		; ; out	(0x99),a
     291.  00:43C5                      
     292.  00:43C5                      
     293.  00:43C5                      		; ld a,00011111B		; 0XX11111B
     294.  00:43C5                      		; out (0x99),a
     295.  00:43C5                      		; ld a,2+128			; R#2 
     296.  00:43C5                      		; out (0x99),a		; score bar in page 0
     297.  00:43C5                      
     298.  00:43C5                      		; ld    A,mapHeight*16-(YSIZE-2)	; SCROLL DOWN
     299.  00:43C5                      		; out (0x99),a
     300.  00:43C5                      		; ld    A,23+128
     301.  00:43C5                      		; out (0x99),a
     302.  00:43C5                      
     303.  00:43C5                      		; xor		a
     304.  00:43C5                      		; out	(099h),a
     305.  00:43C5                      		; ld	a,18+128
     306.  00:43C5                      		; out	(099h),a		; set adjust 0,0
     307.  00:43C5                      
     308.  00:43C5                      
     309.  00:43C5                      		; ld	a,(RG8SAV)
     310.  00:43C5                      		; or	000000010B		; disable sprites
     311.  00:43C5                      		; ld	(RG8SAV),a
     312.  00:43C5                      		; out	(0x99),a
     313.  00:43C5                      		; ld	a,8+128
     314.  00:43C5                      		; out	(0x99),a
     315.  00:43C5                      
     316.  00:43C5                      		; ; call	waitHBLANK
     317.  00:43C5                      		
     318.  00:43C5                      		; ; ld	a,(RG1SAV)
     319.  00:43C5                      		; ; or 	01000010B		; enable screen
     320.  00:43C5                      		; ; ld	(RG1SAV),a
     321.  00:43C5                      		; ; out	(0x99),a
     322.  00:43C5                      		; ; ld	a,1+128
     323.  00:43C5                      		; ; out	(0x99),a
     324.  00:43C5                      	
     325.  00:43C5                      		; push   hl         
     326.  00:43C5                      		; push   de         
     327.  00:43C5                      		; push   bc         
     328.  00:43C5                      		; exx               
     329.  00:43C5                      		; ex     af,af'     
     330.  00:43C5                      		; push   hl         
     331.  00:43C5                      		; push   de         
     332.  00:43C5                      		; push   bc         
     333.  00:43C5                      		; push   af         
     334.  00:43C5                      		; push   iy         
     335.  00:43C5                      		; push   ix         
     336.  00:43C5                      
     337.  00:43C5                      		
     338.  00:43C5                      		; ld	hl,.exit
     339.  00:43C5                      		; push	hl
     340.  00:43C5                      		; ld		a,(dxmap)
     341.  00:43C5                      		; rlc a
     342.  00:43C5                      
     343.  00:43C5                      		; jp	nc,_blank_line_lft		; >0 == dx
     344.  00:43C5                      		; jp	 c,_blank_line_rgt		; <0 == sx
     345.  00:43C5                      ; 1:		pop	hl
     346.  00:43C5                      ; .exit:
     347.  00:43C5                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     348.  00:43C5                      		; ; ld		a,00001000B
     349.  00:43C5                      		; ; out		(0x99),a
     350.  00:43C5                      		; ; ld		a,7+128
     351.  00:43C5                      		; ; out		(0x99),a
     352.  00:43C5                      		
     353.  00:43C5                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     354.  00:43C5                      		; call	test_star
     355.  00:43C5                      
     356.  00:43C5                      		; xor		a
     357.  00:43C5                      		; out		(0x99),a
     358.  00:43C5                      		; ld		a,7+128
     359.  00:43C5                      		; out		(0x99),a
     360.  00:43C5                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     361.  00:43C5                      		
     362.  00:43C5                      		; pop    ix         
     363.  00:43C5                      		; pop    iy         
     364.  00:43C5                      		; pop    af         
     365.  00:43C5                      		; pop    bc         
     366.  00:43C5                      		; pop    de         
     367.  00:43C5                      		; pop    hl         
     368.  00:43C5                      		; ex     af,af'     
     369.  00:43C5                      		; exx               
     370.  00:43C5                      		; pop    bc         
     371.  00:43C5                      		; pop    de         
     372.  00:43C5                      		; pop    hl         
     373.  00:43C5                      
     374.  00:43C5                      		; pop		af
     375.  00:43C5                      		; ei
     376.  00:43C5                      		; ret
     377.  00:43C5                      
     378.  00:43C5                      ; ;-------------------------------------		
     379.  00:43C5                      
     380.  00:43C5                      ; border_color	equ 	0;	00100101B
     381.  00:43C5                      		
     382.  00:43C5                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
     383.  00:43C5                      ; ;   manage normal vblank routine
     384.  00:43C5                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
     385.  00:43C5                      
     386.  00:43C5                      ; vblank:
     387.  00:43C5                      		; call	activate_window	
     388.  00:43C5                      
     389.  00:43C5                      		; push   hl         
     390.  00:43C5                      		; push   de         
     391.  00:43C5                      		; push   bc         
     392.  00:43C5                      		; exx               
     393.  00:43C5                      		; ex     af,af'     
     394.  00:43C5                      		; push   hl         
     395.  00:43C5                      		; push   de         
     396.  00:43C5                      		; push   bc         
     397.  00:43C5                      		; push   af         
     398.  00:43C5                      		; push   iy         
     399.  00:43C5                      		; push   ix         
     400.  00:43C5                      
     401.  00:43C5                      		; ; ld	a,00011100B		; red
     402.  00:43C5                      		; ; out		(0x99),a
     403.  00:43C5                      		; ; ld		a,7+128
     404.  00:43C5                      		; ; out		(0x99),a
     405.  00:43C5                      
     406.  00:43C5                      		; call	changedir
     407.  00:43C5                      				
     408.  00:43C5                      		; ld	hl,(_jiffy)
     409.  00:43C5                      		; inc	hl
     410.  00:43C5                      		; ld	(_jiffy),hl
     411.  00:43C5                      				
     412.  00:43C5                      		; ; ld	a,00011100B		; red
     413.  00:43C5                      		; ; out	(0x99),a
     414.  00:43C5                      		; ; ld	a,7+128
     415.  00:43C5                      		; ; out	(0x99),a
     416.  00:43C5                      		
     417.  00:43C5                      
     418.  00:43C5                      		; ; xor		a		; black
     419.  00:43C5                      		; ; out	(0x99),a
     420.  00:43C5                      		; ; ld	a,7+128
     421.  00:43C5                      		; ; out	(0x99),a
     422.  00:43C5                      	
     423.  00:43C5                      		; pop    ix         
     424.  00:43C5                      		; pop    iy         
     425.  00:43C5                      		; pop    af         
     426.  00:43C5                      		; pop    bc         
     427.  00:43C5                      		; pop    de         
     428.  00:43C5                      		; pop    hl         
     429.  00:43C5                      		; ex     af,af'     
     430.  00:43C5                      		; exx               
     431.  00:43C5                      		; pop    bc         
     432.  00:43C5                      		; pop    de         
     433.  00:43C5                      		; pop    hl         
     434.  00:43C5                      
     435.  00:43C5                      		; pop		af
     436.  00:43C5                      		; ei
     437.  00:43C5                      		; ret
     438.  00:43C5                      ; ;-------------------------------------
     439.  00:43C5                      ; ;-------------------------------------
     440.  00:43C5                      
     441.  00:43C5                      ; _blank_line_lft:
     442.  00:43C5                      		; ; ld	a,00000111B		; blue
     443.  00:43C5                      		; ; out	(0x99),a
     444.  00:43C5                      		; ; ld	a,7+128
     445.  00:43C5                      		; ; out	(0x99),a
     446.  00:43C5                      
     447.  00:43C5                      		; ld	e,0
     448.  00:43C5                      		; call	blank_line
     449.  00:43C5                      
     450.  00:43C5                      		
     451.  00:43C5                      		
     452.  00:43C5                      		; ; xor	a
     453.  00:43C5                      		; ; out	(0x99),a
     454.  00:43C5                      		; ; ld	a,7+128
     455.  00:43C5                      		; ; out	(0x99),a
     456.  00:43C5                      		; ret
     457.  00:43C5                      
     458.  00:43C5                      ; ;-------------------------------------	
     459.  00:43C5                      
     460.  00:43C5                      ; _blank_line_rgt
     461.  00:43C5                      		; ; ld	a,00000111B		; blue
     462.  00:43C5                      		; ; out	(0x99),a
     463.  00:43C5                      		; ; ld	a,7+128
     464.  00:43C5                      		; ; out	(0x99),a
     465.  00:43C5                      
     466.  00:43C5                      		; ld	e,240
     467.  00:43C5                      		; call	blank_line
     468.  00:43C5                      
     469.  00:43C5                      		; ; xor	a
     470.  00:43C5                      		; ; out	(0x99),a
     471.  00:43C5                      		; ; ld	a,7+128
     472.  00:43C5                      		; ; out	(0x99),a
     473.  00:43C5                      		; ret
     474.  00:43C5                      		
     475.  00:43C5                      ; ;-------------------------------------	
     476.  00:43C5                      		
     477.  00:43C5                      ; inc_xoffset
     478.  00:43C5                      		; call	plot_line_rgt1
     479.  00:43C5                      		; call	.movex
     480.  00:43C5                      		; call	plot_line_rgt2
     481.  00:43C5                      				
     482.  00:43C5                      		; ; ld	a,00000010B		; blue
     483.  00:43C5                      		; ; out	(0x99),a
     484.  00:43C5                      		; ; ld	a,7+128
     485.  00:43C5                      		; ; out	(0x99),a
     486.  00:43C5                      		
     487.  00:43C5                      		; jp		newxmap
     488.  00:43C5                      		
     489.  00:43C5                      ; .movex
     490.  00:43C5                      		; ld		a,(_xoffset)
     491.  00:43C5                      		; and		a
     492.  00:43C5                      		; jr		nz,.case1_15
     493.  00:43C5                      ; .case0
     494.  00:43C5                      		; ld 		a,(_displaypage)
     495.  00:43C5                      		; xor		1
     496.  00:43C5                      		; ld 		d,a
     497.  00:43C5                      		; ld		e,240
     498.  00:43C5                      		; jp		clrboder
     499.  00:43C5                      		
     500.  00:43C5                      ; .case1_15
     501.  00:43C5                      ; [4]		add		a,a
     502.  00:43C5                      		; ld		e,a
     503.  00:43C5                      		; sub		a,16
     504.  00:43C5                      		; ld		d,a
     505.  00:43C5                      		; jp		move_block
     506.  00:43C5                      
     507.  00:43C5                      
     508.  00:43C5                      ; ;-------------------------------------	
     509.  00:43C5                      	
     510.  00:43C5                      ; dec_xoffset
     511.  00:43C5                      		; call	plot_line_lft1
     512.  00:43C5                      		; call	.movex
     513.  00:43C5                      		; call	plot_line_lft2
     514.  00:43C5                      				
     515.  00:43C5                      		; ; ld	a,00000011B		; blue
     516.  00:43C5                      		; ; out	(0x99),a
     517.  00:43C5                      		; ; ld	a,7+128
     518.  00:43C5                      		; ; out	(0x99),a
     519.  00:43C5                      
     520.  00:43C5                      		; jp		newxmap
     521.  00:43C5                      		
     522.  00:43C5                      ; .movex
     523.  00:43C5                      		; ld		a,(_xoffset)
     524.  00:43C5                      		; cp	15
     525.  00:43C5                      		; jr		nz,.case0_14
     526.  00:43C5                      ; .case15
     527.  00:43C5                      		; ld 		a,(_displaypage)
     528.  00:43C5                      		; xor		1
     529.  00:43C5                      		; ld 		d,a
     530.  00:43C5                      		; ld		e,0
     531.  00:43C5                      		; jp		clrboder
     532.  00:43C5                      		
     533.  00:43C5                      ; .case0_14
     534.  00:43C5                      ; [4]		add		a,a
     535.  00:43C5                      		; ld		e,a
     536.  00:43C5                      		; add		a,16
     537.  00:43C5                      		; ld		d,a
     538.  00:43C5                      		; jp		move_block
     539.  00:43C5                      
     540.  00:43C5                      
     541.  00:43C5                      ; ;-------------------------------------
     542.  00:43C5                      ; newxmap
     543.  00:43C5                      		; call 	plot_enemy		
     544.  00:43C5                      		; call	color_enemy
     545.  00:43C5                      
     546.  00:43C5                      		; ld		hl,(_xmapx4)
     547.  00:43C5                      		; ld		a,(dxmap)
     548.  00:43C5                      		; ld		e,a
     549.  00:43C5                      		; add 	a,a
     550.  00:43C5                      		; sbc 	a,a
     551.  00:43C5                      		; ld		d,a
     552.  00:43C5                      		; add 	hl,de
     553.  00:43C5                      		; ld		(_xmapx4),hl
     554.  00:43C5                      		; repeat 2
     555.  00:43C5                      		; sra		h
     556.  00:43C5                      		; rr  	l
     557.  00:43C5                      		; endrepeat
     558.  00:43C5                      		; ld		(xmap),hl
     559.  00:43C5                      		; ld 		a,l
     560.  00:43C5                      		; and		15
     561.  00:43C5                      		; ld		(_xoffset),a
     562.  00:43C5                      		; repeat 4
     563.  00:43C5                      		; sra		h
     564.  00:43C5                      		; rr  	l
     565.  00:43C5                      		; endrepeat
     566.  00:43C5                      		; ld 		a,l
     567.  00:43C5                      		; and		1
     568.  00:43C5                      		; ld		(_displaypage),a
     569.  00:43C5                      		; ld		de,_levelmap
     570.  00:43C5                      		; add		hl,de
     571.  00:43C5                      		; ld		(_levelmap_pos),hl
     572.  00:43C5                      		; ret
     573.  00:43C5                      		
     574.  00:43C5                      ; ;-------------------------------------
     575.  00:43C5                      
     576.  00:43C5                      ; activate_window	
     577.  00:43C5                      		; ld	a,(_displaypage)
     578.  00:43C5                      ; [5]		add a,a 			; x32
     579.  00:43C5                      		; or	00011111B
     580.  00:43C5                      		; out (0x99),a
     581.  00:43C5                      		; ld a,2+128
     582.  00:43C5                      		; out (0x99),a
     583.  00:43C5                      		
     584.  00:43C5                      		; ld    A,(_yoffset)		; SCROLL DOWN
     585.  00:43C5                      		; out (0x99),a
     586.  00:43C5                      		; add    A,YSIZE-1
     587.  00:43C5                      		; ld		l,a
     588.  00:43C5                      		; ld    A,23+128
     589.  00:43C5                      		; out (0x99),a
     590.  00:43C5                      
     591.  00:43C5                      		; ld    a,l
     592.  00:43C5                      		; out (0x99),a			; set interrupt line
     593.  00:43C5                      		; ld    A,19+128
     594.  00:43C5                      		; out (0x99),a
     595.  00:43C5                      		
     596.  00:43C5                      		; ld	a,(_xoffset)		; set R#18 only if not scrolling
     597.  00:43C5                      		; add	a,-8
     598.  00:43C5                      		; and	0Fh
     599.  00:43C5                      		; out	(099h),a
     600.  00:43C5                      		; ld	a,18+128
     601.  00:43C5                      		; out	(099h),a
     602.  00:43C5                      
     603.  00:43C5                      		; ld	a,(RG8SAV)		; enable sprites
     604.  00:43C5                      		; and	11111101B
     605.  00:43C5                      		; ld	(RG8SAV),a
     606.  00:43C5                      		; out	(0x99),a
     607.  00:43C5                      		; ld	a,8+128
     608.  00:43C5                      		; out	(0x99),a
     609.  00:43C5                      
     610.  00:43C5                      		; ret
     611.  00:43C5                      			
     612.  00:43C5                      ; ;-------------------------------------
     613.  00:43C5                      	
     614.  00:43C5                      ; changedir:
     615.  00:43C5                      		; ld		a,(_dxmap)
     616.  00:43C5                      		; and		128
     617.  00:43C5                      		; ld		b,a
     618.  00:43C5                      		; inc		hl
     619.  00:43C5                      		; ld		a,(dxmap)		; dxmap
     620.  00:43C5                      		; ld		c,a
     621.  00:43C5                      		; and		128
     622.  00:43C5                      		; xor		b				; compare signs
     623.  00:43C5                      		; jp		z,nodirchange
     624.  00:43C5                      		; ld		(_dxchng),a		; a<>0
     625.  00:43C5                      		; bit		7,c
     626.  00:43C5                      		; jr		z,.right
     627.  00:43C5                      ; .left
     628.  00:43C5                      		; call	plot_line_lft1
     629.  00:43C5                      		; ld 		a,(_displaypage)
     630.  00:43C5                      		; xor		1
     631.  00:43C5                      		; ld 		d,a
     632.  00:43C5                      		; ld		e,0
     633.  00:43C5                      		; call	clrboder
     634.  00:43C5                      		; call	plot_line_lft2
     635.  00:43C5                      		; jp		newxmap
     636.  00:43C5                      
     637.  00:43C5                      ; .right
     638.  00:43C5                      		; call	plot_line_rgt1
     639.  00:43C5                      		; ld 		a,(_displaypage)
     640.  00:43C5                      		; xor		1
     641.  00:43C5                      		; ld 		d,a
     642.  00:43C5                      		; ld		e,240
     643.  00:43C5                      		; call	clrboder
     644.  00:43C5                      		; call	plot_line_rgt2
     645.  00:43C5                      		; jp		newxmap
     646.  00:43C5                      
     647.  00:43C5                      ; nodirchange:
     648.  00:43C5                      		; ld		a,(_dxchng)
     649.  00:43C5                      		; and		a
     650.  00:43C5                      		; jr		nz,1f
     651.  00:43C5                      		; bit		7,c
     652.  00:43C5                      		; jp		z,inc_xoffset
     653.  00:43C5                      		; jp		dec_xoffset
     654.  00:43C5                      	
     655.  00:43C5                      ; 1:		xor	a
     656.  00:43C5                      		; ld		(_dxchng),a
     657.  00:43C5                      		; bit		7,c
     658.  00:43C5                      		; jp		z,.right
     659.  00:43C5                      ; .left
     660.  00:43C5                      		; call	plot_line_lft1
     661.  00:43C5                      		; ld		e,240-16
     662.  00:43C5                      		; ld		d,240
     663.  00:43C5                      		; call	move_block
     664.  00:43C5                      		; call	plot_line_lft2
     665.  00:43C5                      		; jp		newxmap
     666.  00:43C5                      
     667.  00:43C5                      ; .right
     668.  00:43C5                      		; call	plot_line_rgt1
     669.  00:43C5                      		; ld		e,16
     670.  00:43C5                      		; ld		d,0
     671.  00:43C5                      		; call	move_block
     672.  00:43C5                      		; call	plot_line_rgt2
     673.  00:43C5                      		; jp		newxmap
     674.  00:43C5                      
     675.  00:43C5                      ; ;-------------------------------------
      40   00:43C5                      		include fsmscroll.asm
       1.  00:43C5                      
       2.  00:43C5                      
       3.  00:43C5                      xscroll:
       4.  00:43C5  3A 25 CA            		ld		a,(_xoffset)		; set R#18 
       5.  00:43C8                      
       6.  00:43C8  C6 F8               		add		a,-8
       7.  00:43CA  E6 0F               		and		0Fh
       8.  00:43CC  D3 99               		out		(099h),a
       9.  00:43CE  3E 92               		ld		a,18+128
      10.  00:43D0  D3 99               		out		(099h),a
      11.  00:43D2                      		
      12.  00:43D2  C9                  		ret
      13.  00:43D3                      
      14.  00:43D3                      pageswap:
      15.  00:43D3                      
      16.  00:43D3  3A 24 CA            		ld		a,(_displaypage)
      17.  00:43D6  A7                  		and		a
      18.  00:43D7  3E 1F               		ld		a,00011111B			; page 0
      19.  00:43D9  28 02               		jr		z,1f
      20.  00:43DB  3E 3F               		ld		a,00111111B			; page 1
      21.  00:43DD  D3 99               1:		out 	(0x99),a
      22.  00:43DF  3E 82               		ld 		a,2+128
      23.  00:43E1  D3 99               		out 	(0x99),a
      24.  00:43E3  C9                  		ret
      25.  00:43E4                      		
      26.  00:43E4                      		
      27.  00:43E4                      set_displaypage:
      28.  00:43E4  2A 1D CA            		ld		hl,(_xmappos)		; corner top left of the screen window in the map in pixels
      29.  00:43E7  3E 0F               		ld		a,15
      30.  00:43E9  A5                  		and		l
      31.  00:43EA  32 25 CA            		ld		(_xoffset),a		; screen offset
      32.  00:43ED                      
      33.  00:43ED  3A 24 CA            		ld		a,(_displaypage)
      34.  00:43F0  67                  		ld		h,a
      35.  00:43F1                      
      36.  00:43F1  3E 10               		ld		a,16
      37.  00:43F3  A5                  		and		l
      38.  00:43F4                      		
      39.  00:43F4  28 02               		jr		z,1f
      40.  00:43F6                      		
      41.  00:43F6  3E 01               		ld		a,1
      42.  00:43F8                      		
      43.  00:43F8  32 24 CA            1:		ld		(_displaypage),a
      44.  00:43FB  AC                  		xor		h
      45.  00:43FC  C8                  		ret		z	
      46.  00:43FD  32 10 CA            		ld		(_sliceflag_reset),a 	; page has changed !
      47.  00:4400  C9                  		ret
      48.  00:4401                      
      49.  00:4401                      reset_sliceflag:
      50.  00:4401  3A 10 CA            		ld		a,(_sliceflag_reset)
      51.  00:4404  A7                  		and		a
      52.  00:4405  C8                  		ret		z	; _sliceflag_reset testing
      53.  00:4406                      
      54.  00:4406  D9                  		exx			; clear _sliceflag and _sliceflag_reset
      55.  00:4407  01 10 00            		ld	bc,16			
      56.  00:440A  21 00 CA            		ld	hl,_sliceflag
      57.  00:440D  11 01 CA            		ld	de,_sliceflag+1
      58.  00:4410  70                  		ld	(hl),b
      59.  00:4411  ED B0               		ldir
      60.  00:4413  D9                  		exx
      61.  00:4414  C9                  		ret
      62.  00:4415                      		
      63.  00:4415                      		
      64.  00:4415                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      65.  00:4415                      ; test code to move a marker
      66.  00:4415                      ;
      67.  00:4415                      ; returns
      68.  00:4415                      ; _xspeed change pressing right and left
      69.  00:4415                      
      70.  00:4415                      changespeed:		
      71.  00:4415  3A 1B CA            		ld	a,(joystick)
      72.  00:4418  6F                  		ld	l,a
      73.  00:4419                      		
      74.  00:4419  CB 7D               		bit 7,l
      75.  00:441B  20 16               		jr	nz,.notright
      76.  00:441D                      
      77.  00:441D  2A 20 CA            		ld	hl,(_xspeed)
      78.  00:4420  7C                  		ld	a,h
      79.  00:4421  25                  		dec	h
      80.  00:4422  F0                  		ret	p		; if hl>1.0 exit
      81.  00:4423  23                  		inc	hl
      82.  00:4424  24                  		inc	h
      83.  00:4425  22 20 CA            		ld	(_xspeed),hl
      84.  00:4428  AC                  		xor	h
      85.  00:4429  E6 80               		and	128							;dir change neg to pos
      86.  00:442B  32 22 CA            		ld		(_dxchng),a 			; direction has changed !
      87.  00:442E  C8                  		ret	z		
      88.  00:442F  32 10 CA            		ld		(_sliceflag_reset),a 	; reset slice flags
      89.  00:4432  C9                  		ret
      90.  00:4433                      		
      91.  00:4433                      .notright:
      92.  00:4433  CB 65               		bit 4,l
      93.  00:4435  C0                  		ret	nz
      94.  00:4436                      		
      95.  00:4436  2A 20 CA            		ld	hl,(_xspeed)
      96.  00:4439  7C                  		ld	a,h
      97.  00:443A  2B                  		dec	hl
      98.  00:443B  24                  		inc	h
      99.  00:443C  F8                  		ret	m		; if hl<-1.0 exit
     100.  00:443D  25                  		dec	h
     101.  00:443E  22 20 CA            		ld	(_xspeed),hl
     102.  00:4441  AC                  		xor	h
     103.  00:4442  E6 80               		and	128							;dir change neg to pos
     104.  00:4444  32 22 CA            		ld		(_dxchng),a 			; direction has changed !
     105.  00:4447  C8                  		ret	z
     106.  00:4448  32 10 CA            		ld		(_sliceflag_reset),a 	; reset slice flags
     107.  00:444B  C9                  		ret
     108.  00:444C                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     109.  00:444C                      				
     110.  00:444C                      changexpos:
     111.  00:444C  ED 5B 20 CA         		ld	de,(_xspeed)
     112.  00:4450  3A 1F CA            		ld	a,(_xmappos+2)
     113.  00:4453  83                  		add	a,e
     114.  00:4454  32 1F CA            		ld	(_xmappos+2),a
     115.  00:4457  5A                  		ld	e,d
     116.  00:4458  CB 7A               		bit	7,d
     117.  00:445A  16 00               		ld	d,0
     118.  00:445C  28 02               		jr	z,1f
     119.  00:445E  16 FF               		ld	d,-1
     120.  00:4460  2A 1D CA            1:		ld	hl,(_xmappos)
     121.  00:4463  ED 5A               		adc	hl,de
     122.  00:4465  7C                  		ld	a,h
     123.  00:4466  E6 0F               		and	15
     124.  00:4468  67                  		ld	h,a
     125.  00:4469  22 1D CA            		ld	(_xmappos),hl			; scroll one pixel right
     126.  00:446C  C9                  		ret
     127.  00:446D                      		
      41   00:446D                      		include vdpcmds.asm
       1.  00:446D                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       2.  00:446D                      ; hl	-> 256 tile data (columnwise)
       3.  00:446D                      ; destination:
       4.  00:446D                      ; 	d,e = dy,dx
       5.  00:446D                      ;	b = page
       6.  00:446D                      ;
       7.  00:446D                      LMMC_tile:
       8.  00:446D  3E 24               		ld 		a, 36
       9.  00:446F  D3 99               		out 	(0x99),a
      10.  00:4471  3E 91               		ld 		a, 17+128
      11.  00:4473  D3 99               		out 	(0x99),a
      12.  00:4475                      
      13.  00:4475  0E 9B               		ld		c,0x9B
      14.  00:4477  ED 59               		out 	(c), e 			; dx
      15.  00:4479  AF                  		xor		a
      16.  00:447A  D3 9B               		out 	(0x9B), a		; dx (high)
      17.  00:447C                      
      18.  00:447C  ED 51               		out 	(c), d			; dy
      19.  00:447E                      								; destination page
      20.  00:447E  ED 41               		out 	(c), b			; dy (high-> page 0 or 1)
      21.  00:4480                      		
      22.  00:4480  06 10               		ld 		b,16
      23.  00:4482  ED 41               		out 	(c), b			; x block size
      24.  00:4484  D3 9B               		out 	(0x9B), a
      25.  00:4486                      
      26.  00:4486  ED 41               		out 	(c), b			; y block size
      27.  00:4488  D3 9B               		out 	(0x9B), a
      28.  00:448A                      
      29.  00:448A  ED A3               		outi					; 1st byte color
      30.  00:448C  D3 9B               		out 	(0x9B), a		; normal tracing
      31.  00:448E                      
      32.  00:448E  3E F0               		ld		a,0xF0			; HMMC
      33.  00:4490  D3 9B               		out 	(0x9B), a
      34.  00:4492                      
      35.  00:4492  3E AC               		ld 		a, 44 + 128
      36.  00:4494  D3 99               		out 	(0x99),a
      37.  00:4496  3E 91               		ld 		a, 17+128
      38.  00:4498  D3 99               		out 	(0x99),a
      39.  00:449A                      		
      40.  00:449A                      		
      41.  00:449A  11 0F 00            		ld		de,15
      42.  00:449D  43                  		ld		b,e					; 15 other bytes
      43.  00:449E  3E 10               		ld		a,16
      44.  00:44A0                      		
      45.  00:44A0  19                  1:		add		hl,de
      46.  00:44A1  ED A3               		outi						; other byte color
      47.  00:44A3  C2 A0 44            		jp		nz,1b
      48.  00:44A6  25                  		dec	h
      49.  00:44A7  23                  		inc	hl
      50.  00:44A8  06 10               		ld		b,16
      51.  00:44AA  3D                  		dec		a
      52.  00:44AB  C2 A0 44            		jp		nz,1b
      53.  00:44AE                      	
      54.  00:44AE  C9                  		ret
      55.  00:44AF                      
      56.  00:44AF                      
      57.  00:44AF                      	
      58.  00:44AF                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      59.  00:44AF                      ; input
      60.  00:44AF                      ; a = tile number	from page 0
      61.  00:44AF                      ; 
      62.  00:44AF                      ; d = dx	
      63.  00:44AF                      ; e = dy	
      64.  00:44AF                      ; b = destination page 
      65.  00:44AF                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      66.  00:44AF                      
      67.  00:44AF                      ; destructible tiles have to be in range 0..n-1 in the tile set
      68.  00:44AF                      
      69.  00:44AF                      move_tile:
      70.  00:44AF  67                  		ld		h,a
      71.  00:44B0  E6 0F               		and		00001111B	
      72.  00:44B2  87 87 87 87         [4]		add		a,a					
      73.  00:44B6  6F                  		ld		l,a			; sx
      74.  00:44B7  7C                  		ld		a,h
      75.  00:44B8  E6 F0               		and		11110000B	; tiles are under the lower border						
      76.  00:44BA  C6 B0               		add		a,160+16
      77.  00:44BC  67                  		ld		h,a			; sy
      78.  00:44BD                      
      79.  00:44BD  3E 20               		ld 		a, 32
      80.  00:44BF  D3 99               		out 	(0x99),a
      81.  00:44C1  3E 91               		ld 		a, 17+128
      82.  00:44C3  D3 99               		out 	(0x99),a
      83.  00:44C5                      
      84.  00:44C5  0E 9B               		ld 		c, 0x9B
      85.  00:44C7                      		
      86.  00:44C7  CD 4D 42            		call _waitvdp				; do not change R#18 if the VDP is copying !! NEEDED FOR NTSC
      87.  00:44CA                      				
      88.  00:44CA  ED 69               		out		(c), l 				; sx
      89.  00:44CC  AF                  		xor 	a
      90.  00:44CD  D3 9B               		out		(0x9B), a 			; sx (high)
      91.  00:44CF                      		
      92.  00:44CF  ED 61               		out		(c), h 	     		; sy
      93.  00:44D1  3E 01               		ld		a,1					; source page
      94.  00:44D3  D3 9B               		out 	(0x9B), a 			; sy 	(high-> page 0 or 1)
      95.  00:44D5                      
      96.  00:44D5  ED 51               		out 	(c), d 				; dx
      97.  00:44D7  AF                  		xor 	a
      98.  00:44D8  D3 9B               		out 	(0x9B), a			; dx (high)
      99.  00:44DA                      		
     100.  00:44DA  ED 59               		out 	(c), e	 			; dy
     101.  00:44DC  ED 41               		out 	(c), b				; dy 	(high-> page 0 or 1)
     102.  00:44DE                      
     103.  00:44DE  2E 10               		ld 		l,16 				
     104.  00:44E0  ED 69               		out 	(c), l			; x block size
     105.  00:44E2  AF                  		xor 	a
     106.  00:44E3  D3 9B               		out 	(0x9B), a					
     107.  00:44E5  ED 69               		out 	(c), l			; y block size
     108.  00:44E7  D3 9B               		out 	(0x9B), a
     109.  00:44E9  D3 9B               		out 	(0x9B), a
     110.  00:44EB  D3 9B               		out 	(0x9B), a
     111.  00:44ED                      
     112.  00:44ED  3E D0               		ld		a,11010000B
     113.  00:44EF  D3 9B               		out 	(0x9B), a			; command HMMM
     114.  00:44F1  C9                  		ret
     115.  00:44F2                      
     116.  00:44F2                      
     117.  00:44F2                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     118.  00:44F2                      ; input
     119.  00:44F2                      ; b = sx	from  _displaypage
     120.  00:44F2                      ; d = dx	to not _displaypage
     121.  00:44F2                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     122.  00:44F2                      
     123.  00:44F2                      move_slice:
     124.  00:44F2  3E 20               		ld 		a, 32
     125.  00:44F4  D3 99               		out 	(0x99),a
     126.  00:44F6  3E 91               		ld 		a, 17+128
     127.  00:44F8  D3 99               		out 	(0x99),a
     128.  00:44FA                      
     129.  00:44FA  0E 9B               		ld 		c, 0x9B
     130.  00:44FC                      		
     131.  00:44FC                      		; call _waitvdp				; no need ATM
     132.  00:44FC                      		
     133.  00:44FC  ED 41               		out		(c), b 				; sx
     134.  00:44FE  AF                  		xor a
     135.  00:44FF  D3 9B               		out		(0x9B), a 			; sx (high)
     136.  00:4501                      		
     137.  00:4501  D3 9B               		out		(0x9B), a 			; sy
     138.  00:4503  3A 24 CA            		ld 		a,(_displaypage)	; source page
     139.  00:4506  D3 9B               		out 	(0x9B), a 			; sy 	(high-> page 0 or 1)
     140.  00:4508                      
     141.  00:4508  ED 51               		out 	(c), d 				; dx
     142.  00:450A  AF                  		xor a
     143.  00:450B  D3 9B               		out 	(0x9B), a			; dx (high)
     144.  00:450D                      		
     145.  00:450D  D3 9B               		out 	(0x9B), a 			; dy
     146.  00:450F  3A 24 CA            		ld 		a,(_displaypage)	; destination page
     147.  00:4512  EE 01               		xor	1				
     148.  00:4514  D3 9B               		out 	(0x9B), a			; dy 	(high-> page 0 or 1)
     149.  00:4516                      
     150.  00:4516  3E 10               		ld 		a,16 				; block size
     151.  00:4518  D3 9B               		out 	(0x9B), a
     152.  00:451A  AF                  		xor a
     153.  00:451B  D3 9B               		out 	(0x9B), a	
     154.  00:451D  3E A0               		ld		a,10*16				; mapHeight*16
     155.  00:451F  D3 9B               		out 	(0x9B), a			; y block size
     156.  00:4521  AF                  		xor		a
     157.  00:4522  D3 9B               		out 	(0x9B), a
     158.  00:4524  D3 9B               		out 	(0x9B), a
     159.  00:4526  D3 9B               		out 	(0x9B), a
     160.  00:4528                      
     161.  00:4528  3E D0               		ld		a,11010000B
     162.  00:452A  D3 9B               		out 	(0x9B), a			; command HMMM
     163.  00:452C  C9                  		ret
     164.  00:452D                      		
     165.  00:452D                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     166.  00:452D                      ; input
     167.  00:452D                      ; d = page
     168.  00:452D                      ; e = dx
     169.  00:452D                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     170.  00:452D                      		
     171.  00:452D                      clear_slice:
     172.  00:452D  3E 24               		ld 		a, 36
     173.  00:452F  D3 99               		out 	(0x99),a
     174.  00:4531  3E 91               		ld 		a, 17+128
     175.  00:4533  D3 99               		out 	(0x99),a
     176.  00:4535                      		
     177.  00:4535  0E 9B               		ld 		c, 0x9B
     178.  00:4537                      		
     179.  00:4537                      		; call _waitvdp
     180.  00:4537                      		
     181.  00:4537  ED 59               		out 	(c), e 			; dx
     182.  00:4539  AF                  		xor		a
     183.  00:453A  D3 9B               		out 	(0x9B), a		; dx (high)
     184.  00:453C                      		
     185.  00:453C  D3 9B               		out 	(0x9B), a		; dy
     186.  00:453E                      								; destination page
     187.  00:453E  ED 51               		out 	(c), d			; dy (high-> page 0 or 1)
     188.  00:4540                      		
     189.  00:4540  3E 10               		ld 		a,16
     190.  00:4542  D3 9B               		out 	(0x9B), a			; x block size
     191.  00:4544  AF                  		xor		a
     192.  00:4545  D3 9B               		out 	(0x9B), a
     193.  00:4547                      
     194.  00:4547  3E A0               		ld		a,10*16				; mapHeight*16
     195.  00:4549  D3 9B               		out 	(0x9B), a			; y block size
     196.  00:454B  AF                  		xor a
     197.  00:454C  D3 9B               		out 	(0x9B), a
     198.  00:454E                      
     199.  00:454E  D3 9B               		out 	(0x9B), a			; border_color
     200.  00:4550  D3 9B               		out 	(0x9B), a
     201.  00:4552                      
     202.  00:4552  3E C0               		ld		a,11000000B
     203.  00:4554  D3 9B               		out 	(0x9B), a			; command HMMV
     204.  00:4556  C9                  		ret
      42   00:4557                      		include brdrs_opt.asm
       1.  00:4557                      brdrs_left:
       2.  00:4557                      		bdrclr 11100000B
       2.  00:4557                    >   if debug
       2.  00:4557                    ~   ifdif n,0
       2.  00:4557                    ~    ld  a,n
       2.  00:4557                    ~   else
       2.  00:4557                    ~    xor a
       2.  00:4557                    ~   endif
       2.  00:4557                    ~   out  (0x99),a
       2.  00:4557                    ~   ld  a,7+128
       2.  00:4557                    ~   out  (0x99),a
       2.  00:4557                    ~   endif
       3.  00:4557  CD 74 45            		call	vdp_task_left
       4.  00:455A                      		bdrclr 0
       4.  00:455A                    >   if debug
       4.  00:455A                    ~   ifdif n,0
       4.  00:455A                    ~    ld  a,n
       4.  00:455A                    ~   else
       4.  00:455A                    ~    xor a
       4.  00:455A                    ~   endif
       4.  00:455A                    ~   out  (0x99),a
       4.  00:455A                    ~   ld  a,7+128
       4.  00:455A                    ~   out  (0x99),a
       4.  00:455A                    ~   endif
       5.  00:455A  CD FD 45            		call	_brdrs_left
       6.  00:455D  3A 25 CA            		ld		a,(_xoffset)
       7.  00:4560  A7                  		and		a
       8.  00:4561  CC B4 46            		call	z,colmn_patch_left
       9.  00:4564                      		bdrclr 11100000B
       9.  00:4564                    >   if debug
       9.  00:4564                    ~   ifdif n,0
       9.  00:4564                    ~    ld  a,n
       9.  00:4564                    ~   else
       9.  00:4564                    ~    xor a
       9.  00:4564                    ~   endif
       9.  00:4564                    ~   out  (0x99),a
       9.  00:4564                    ~   ld  a,7+128
       9.  00:4564                    ~   out  (0x99),a
       9.  00:4564                    ~   endif
      10.  00:4564  C9                  		ret
      11.  00:4565                      
      12.  00:4565                      brdrs_right:
      13.  00:4565                      		bdrclr 11100000B
      13.  00:4565                    >   if debug
      13.  00:4565                    ~   ifdif n,0
      13.  00:4565                    ~    ld  a,n
      13.  00:4565                    ~   else
      13.  00:4565                    ~    xor a
      13.  00:4565                    ~   endif
      13.  00:4565                    ~   out  (0x99),a
      13.  00:4565                    ~   ld  a,7+128
      13.  00:4565                    ~   out  (0x99),a
      13.  00:4565                    ~   endif
      14.  00:4565  CD B9 45            		call	vdp_task_right
      15.  00:4568                      		bdrclr 0
      15.  00:4568                    >   if debug
      15.  00:4568                    ~   ifdif n,0
      15.  00:4568                    ~    ld  a,n
      15.  00:4568                    ~   else
      15.  00:4568                    ~    xor a
      15.  00:4568                    ~   endif
      15.  00:4568                    ~   out  (0x99),a
      15.  00:4568                    ~   ld  a,7+128
      15.  00:4568                    ~   out  (0x99),a
      15.  00:4568                    ~   endif
      16.  00:4568  CD 3C 46            		call	_brdrs_right
      17.  00:456B  3A 25 CA            		ld		a,(_xoffset)
      18.  00:456E  FE 0F               		cp		15
      19.  00:4570  CC 7B 46            		call	z,colmn_patch_right
      20.  00:4573                      		bdrclr 11100000B
      20.  00:4573                    >   if debug
      20.  00:4573                    ~   ifdif n,0
      20.  00:4573                    ~    ld  a,n
      20.  00:4573                    ~   else
      20.  00:4573                    ~    xor a
      20.  00:4573                    ~   endif
      20.  00:4573                    ~   out  (0x99),a
      20.  00:4573                    ~   ld  a,7+128
      20.  00:4573                    ~   out  (0x99),a
      20.  00:4573                    ~   endif
      21.  00:4573  C9                  		ret
      22.  00:4574                      		
      23.  00:4574                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;		
      24.  00:4574                      vdp_task_left:
      25.  00:4574  3A 22 CA            		ld		a,(_dxchng)
      26.  00:4577  A7                  		and		a
      27.  00:4578  20 2C               		jr		nz,.left_dxchng
      28.  00:457A  3A 23 CA            		ld		a,(_dxchng2)
      29.  00:457D  A7                  		and		a
      30.  00:457E  20 2F               		jr		nz,.left_dxchng2
      31.  00:4580                      
      32.  00:4580                      		;  _sliceflag management 
      33.  00:4580                      		; NOTE _sliceflag has to be byte aligned!!
      34.  00:4580                      		
      35.  00:4580  3A 25 CA            		ld		a,(_xoffset)
      36.  00:4583  5F                  		ld		e,a
      37.  00:4584  16 CA               		ld		d,high _sliceflag
      38.  00:4586  1A                  		ld		a,(de)
      39.  00:4587  A7                  		and		a
      40.  00:4588  C0                  		ret		nz		; avoid twice the same VDP command
      41.  00:4589  3D                  		dec		a
      42.  00:458A  12                  		ld		(de),a
      43.  00:458B                      
      44.  00:458B                      		
      45.  00:458B  7B                  		ld		a,e
      46.  00:458C  FE 0F               		cp		15
      47.  00:458E  20 0B               		jr		nz,.x0_14
      48.  00:4590                      .x15:		
      49.  00:4590  3A 24 CA            		ld		a,(_displaypage)
      50.  00:4593  EE 01               		xor		1
      51.  00:4595  57                  		ld		d,a
      52.  00:4596  1E 00               		ld		e,0
      53.  00:4598  C3 2D 45            		jp 		clear_slice
      54.  00:459B                      
      55.  00:459B                      .x0_14:
      56.  00:459B  87 87 87 87         [4]		add		a,a
      57.  00:459F  47                  		ld		b,a			; source slice
      58.  00:45A0  C6 10               		add		a,16
      59.  00:45A2  57                  		ld		d,a			; destination slice
      60.  00:45A3  C3 F2 44            		jp		move_slice
      61.  00:45A6                      
      62.  00:45A6                      .left_dxchng:
      63.  00:45A6  CD 90 45            		call	vdp_task_left.x15
      64.  00:45A9  3E 01               		ld	a,1
      65.  00:45AB  32 23 CA            		ld	(_dxchng2),a
      66.  00:45AE  C9                  		ret
      67.  00:45AF                      .left_dxchng2:
      68.  00:45AF  3E 0E               		ld		a,14
      69.  00:45B1  CD 9B 45            		call	vdp_task_left.x0_14
      70.  00:45B4  AF                  		xor		a
      71.  00:45B5  32 23 CA            		ld	(_dxchng2),a
      72.  00:45B8  C9                  		ret
      73.  00:45B9                      		
      74.  00:45B9                      vdp_task_right:
      75.  00:45B9  3A 22 CA            		ld		a,(_dxchng)
      76.  00:45BC  A7                  		and		a
      77.  00:45BD  20 2B               		jr		nz,.right_dxchng
      78.  00:45BF  3A 23 CA            		ld		a,(_dxchng2)
      79.  00:45C2  A7                  		and		a
      80.  00:45C3  20 2E               		jr		nz,.right_dxchng2
      81.  00:45C5                      		
      82.  00:45C5                      		;  _sliceflag management 
      83.  00:45C5                      		; NOTE _sliceflag has to be byte aligned!!
      84.  00:45C5                      		
      85.  00:45C5  3A 25 CA            		ld		a,(_xoffset)
      86.  00:45C8  5F                  		ld		e,a
      87.  00:45C9  16 CA               		ld		d,high _sliceflag
      88.  00:45CB  1A                  		ld		a,(de)
      89.  00:45CC  A7                  		and		a
      90.  00:45CD  C0                  		ret		nz		; avoid twice the same VDP command
      91.  00:45CE  3D                  		dec		a
      92.  00:45CF  12                  		ld		(de),a
      93.  00:45D0                      
      94.  00:45D0  7B                  		ld		a,e
      95.  00:45D1  A7                  		and		a
      96.  00:45D2  20 0B               		jr		nz,.x1_15
      97.  00:45D4                      .x0:		
      98.  00:45D4  3A 24 CA            		ld		a,(_displaypage)
      99.  00:45D7  EE 01               		xor		1
     100.  00:45D9  57                  		ld		d,a
     101.  00:45DA  1E F0               		ld		e,240
     102.  00:45DC  C3 2D 45            		jp 		clear_slice
     103.  00:45DF                      
     104.  00:45DF                      .x1_15:
     105.  00:45DF  87 87 87 87         [4]		add		a,a
     106.  00:45E3  47                  		ld		b,a			; source slice
     107.  00:45E4  D6 10               		sub		a,16
     108.  00:45E6  57                  		ld		d,a			; destination slice
     109.  00:45E7  C3 F2 44            		jp		move_slice
     110.  00:45EA                      
     111.  00:45EA                      .right_dxchng:
     112.  00:45EA  CD D4 45            		call	vdp_task_right.x0
     113.  00:45ED  3E 01               		ld	a,1
     114.  00:45EF  32 23 CA            		ld	(_dxchng2),a
     115.  00:45F2  C9                  		ret
     116.  00:45F3                      .right_dxchng2:
     117.  00:45F3  3E 01               		ld		a,1
     118.  00:45F5  CD DF 45            		call	vdp_task_right.x1_15
     119.  00:45F8  AF                  		xor		a
     120.  00:45F9  32 23 CA            		ld	(_dxchng2),a
     121.  00:45FC  C9                  		ret
     122.  00:45FD                      
     123.  00:45FD                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;		
     124.  00:45FD                      	; hl -> tile column in the map
     125.  00:45FD                      _brdrs_left:
     126.  00:45FD  3A 25 CA            		ld		a,(_xoffset)
     127.  00:4600  5F                  		ld		e,a
     128.  00:4601  C6 F0               		add		a,240
     129.  00:4603  DD 6F               		ld		ixl,a
     130.  00:4605                      
     131.  00:4605  0E 98               		ld	c,0x98
     132.  00:4607                      				
     133.  00:4607  3A 24 CA            		ld	a,(_displaypage)
     134.  00:460A  87 87               [2] 	add a,a
     135.  00:460C  D3 99               		out (0x99),a 	; set bits 14-16
     136.  00:460E  3E 8E               		ld a,14+128
     137.  00:4610  D3 99               		out (0x99),a
     138.  00:4612                      
     139.  00:4612  16 40               		ld	d,0x40		; write access
     140.  00:4614  CD E2 46            		call plot_col64
     141.  00:4617                      
     142.  00:4617  3A 24 CA            		ld	a,(_displaypage)
     143.  00:461A  87 87               [2] 	add a,a
     144.  00:461C  F6 01               		or	1
     145.  00:461E  D3 99               		out (0x99),a 	; set bits 14-16
     146.  00:4620  3E 8E               		ld a,14+128
     147.  00:4622  D3 99               		out (0x99),a
     148.  00:4624                      
     149.  00:4624  16 40               		ld	d,0x40		; write access	
     150.  00:4626  CD E2 46            		call	plot_col64
     151.  00:4629                      		
     152.  00:4629  3A 24 CA            		ld	a,(_displaypage)
     153.  00:462C  87 87               [2] 	add a,a
     154.  00:462E  F6 02               		or	2
     155.  00:4630  D3 99               		out (0x99),a 	; set bits 14-16
     156.  00:4632  3E 8E               		ld a,14+128
     157.  00:4634  D3 99               		out (0x99),a
     158.  00:4636                      
     159.  00:4636  16 40               		ld	d,0x40		; write access	
     160.  00:4638  CD E5 46            		call	plot_col32
     161.  00:463B                      				
     162.  00:463B  C9                  		ret
     163.  00:463C                      
     164.  00:463C                      
     165.  00:463C                      	; hl -> tile column in the map
     166.  00:463C                      		
     167.  00:463C                      _brdrs_right:
     168.  00:463C  3A 25 CA            		ld		a,(_xoffset)
     169.  00:463F  DD 6F               		ld		ixl,a
     170.  00:4641  C6 F0               		add		a,240
     171.  00:4643  5F                  		ld		e,a
     172.  00:4644                      
     173.  00:4644  0E 98               		ld	c,0x98
     174.  00:4646                      				
     175.  00:4646  3A 24 CA            		ld	a,(_displaypage)
     176.  00:4649  87 87               [2] 	add a,a
     177.  00:464B  D3 99               		out (0x99),a 	; set bits 14-16
     178.  00:464D  3E 8E               		ld a,14+128
     179.  00:464F  D3 99               		out (0x99),a
     180.  00:4651                      
     181.  00:4651  16 40               		ld	d,0x40		; write access
     182.  00:4653  CD E2 46            		call plot_col64
     183.  00:4656                      
     184.  00:4656  3A 24 CA            		ld	a,(_displaypage)
     185.  00:4659  87 87               [2] 	add a,a
     186.  00:465B  F6 01               		or	1
     187.  00:465D  D3 99               		out (0x99),a 	; set bits 14-16
     188.  00:465F  3E 8E               		ld a,14+128
     189.  00:4661  D3 99               		out (0x99),a
     190.  00:4663                      
     191.  00:4663  16 40               		ld	d,0x40		; write access	
     192.  00:4665  CD E2 46            		call	plot_col64
     193.  00:4668                      		
     194.  00:4668  3A 24 CA            		ld	a,(_displaypage)
     195.  00:466B  87 87               [2] 	add a,a
     196.  00:466D  F6 02               		or	2
     197.  00:466F  D3 99               		out (0x99),a 	; set bits 14-16
     198.  00:4671  3E 8E               		ld a,14+128
     199.  00:4673  D3 99               		out (0x99),a
     200.  00:4675                      
     201.  00:4675  16 40               		ld	d,0x40		; write access	
     202.  00:4677  CD E5 46            		call	plot_col32
     203.  00:467A                      				
     204.  00:467A  C9                  		ret
     205.  00:467B                      
     206.  00:467B                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;		
     207.  00:467B                      	; small patch on last column
     208.  00:467B                      	
     209.  00:467B                      	; hl -> tile column in the map + mapHeight
     210.  00:467B                      	
     211.  00:467B                      colmn_patch_right:
     212.  00:467B  3E F6               		ld		a,-mapHeight		; return to the start of the column
     213.  00:467D  84                  		add		a,h
     214.  00:467E  67                  		ld 		h,a
     215.  00:467F                      		
     216.  00:467F                      		set_tile (hl)		; first tile in the column
     216.  00:467F  7E                >   ld a,reg
     216.  00:4680  07 07 07          > [3]  rlca
     216.  00:4683  E6 07             >   and 00000111B
     216.  00:4685  C6 04             >   add a,:_tiles0
     216.  00:4687  32 00 B0          >   ld (_kBank4),a
     216.  00:468A                    > 
     216.  00:468A  7E                >   ld a,reg
     216.  00:468B  E6 1F             >   and 00011111B
     216.  00:468D  C6 A0             >   add a,high _tiles0
     217.  00:468F                      
     218.  00:468F  67                  		ld		h,a
     219.  00:4690  2E F0               		ld		l,0xF0
     220.  00:4692                      		
     221.  00:4692  3A 24 CA            		ld		a,(_displaypage)
     222.  00:4695  EE 01               		xor		1				; hidden page
     223.  00:4697  87 87               [2] 	add 	a,a
     224.  00:4699  D3 99               		out 	(0x99),a 		; set bits 14-16
     225.  00:469B  3E 8E               		ld 		a,14+128
     226.  00:469D  D3 99               		out 	(0x99),a
     227.  00:469F                      
     228.  00:469F  11 EF 40            		ld		de,0x40EF		; write access, columns 239 on hidden page
     229.  00:46A2                      				
     230.  00:46A2                      		; hl -> tile column in the tile set
     231.  00:46A2                      set2pixs:	
     232.  00:46A2  7B                  		ld 		a,e 			;set bits 0-7
     233.  00:46A3  D3 99               		out 	(0x99),a
     234.  00:46A5  7A                  		ld 		a,d 			;set bits 8-13
     235.  00:46A6  D3 99               		out 	(0x99),a
     236.  00:46A8  ED A3               		outi	
     237.  00:46AA  14                  		inc 	d
     238.  00:46AB  7B                  		ld 		a,e 			;set bits 0-7
     239.  00:46AC  D3 99               		out 	(0x99),a
     240.  00:46AE  7A                  		ld 		a,d 			;set bits 8-13
     241.  00:46AF  D3 99               		out 	(0x99),a
     242.  00:46B1  ED A3               		outi	
     243.  00:46B3  C9                  		ret
     244.  00:46B4                      
     245.  00:46B4                      	; small patch on first column
     246.  00:46B4                      	
     247.  00:46B4                      	; hl -> tile column in the map + mapHeight
     248.  00:46B4                      
     249.  00:46B4                      colmn_patch_left:
     250.  00:46B4  3E F6               		ld		a,-mapHeight		; return to the start of the column
     251.  00:46B6  84                  		add		a,h
     252.  00:46B7  67                  		ld 		h,a
     253.  00:46B8                      		
     254.  00:46B8                      		set_tile (hl)		; first tile in the column
     254.  00:46B8  7E                >   ld a,reg
     254.  00:46B9  07 07 07          > [3]  rlca
     254.  00:46BC  E6 07             >   and 00000111B
     254.  00:46BE  C6 04             >   add a,:_tiles0
     254.  00:46C0  32 00 B0          >   ld (_kBank4),a
     254.  00:46C3                    > 
     254.  00:46C3  7E                >   ld a,reg
     254.  00:46C4  E6 1F             >   and 00011111B
     254.  00:46C6  C6 A0             >   add a,high _tiles0
     255.  00:46C8                      
     256.  00:46C8  67                  		ld		h,a
     257.  00:46C9  2E 00               		ld		l,0x00
     258.  00:46CB                      		
     259.  00:46CB  3A 24 CA            		ld		a,(_displaypage)
     260.  00:46CE  EE 01               		xor		1				; hidden page
     261.  00:46D0  87 87               [2] 	add 	a,a
     262.  00:46D2  D3 99               		out 	(0x99),a 		; set bits 14-16
     263.  00:46D4  3E 8E               		ld 		a,14+128
     264.  00:46D6  D3 99               		out 	(0x99),a
     265.  00:46D8                      
     266.  00:46D8  11 10 40            		ld		de,0x4010		; write access, columns 16 on hidden page
     267.  00:46DB                      
     268.  00:46DB                      		; hl -> tile column in the tile set
     269.  00:46DB  CD A2 46            		call	set2pixs
     270.  00:46DE  14                  		inc		d
     271.  00:46DF  C3 A2 46            		jp		set2pixs
     272.  00:46E2                      		
     273.  00:46E2                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     274.  00:46E2                      		
     275.  00:46E2                      plot_col64:
     276.  00:46E2                      	; hl -> tile in the map
     277.  00:46E2  CD E5 46            		call	plot_col32
     278.  00:46E5                      plot_col32:		
     279.  00:46E5  CD E8 46            		call	plot_col16
     280.  00:46E8                      plot_col16:
     281.  00:46E8  E5                  		push	hl
     282.  00:46E9  CD EF 46            		call	_plot_col16
     283.  00:46EC  E1                  		pop		hl
     284.  00:46ED  24                  		inc h			; next line in the map 	; inc l for maps stored column-wise
     285.  00:46EE  C9                  		ret
     286.  00:46EF                      
     287.  00:46EF                      
     288.  00:46EF                      _plot_col16:
     289.  00:46EF                      		set_tile (hl)
     289.  00:46EF  7E                >   ld a,reg
     289.  00:46F0  07 07 07          > [3]  rlca
     289.  00:46F3  E6 07             >   and 00000111B
     289.  00:46F5  C6 04             >   add a,:_tiles0
     289.  00:46F7  32 00 B0          >   ld (_kBank4),a
     289.  00:46FA                    > 
     289.  00:46FA  7E                >   ld a,reg
     289.  00:46FB  E6 1F             >   and 00011111B
     289.  00:46FD  C6 A0             >   add a,high _tiles0
     290.  00:46FF                      
     291.  00:46FF  67                  		ld	h,a
     292.  00:4700  3A 25 CA            		ld	a,(_xoffset)
     293.  00:4703  87 87 87 87         [4]		add	a,a
     294.  00:4707  6F                  		ld	l,a
     295.  00:4708                      
     296.  00:4708                      	; hl -> tile column in the tile set
     297.  00:4708                      	
     298.  00:4708                      		repeat 16
     299.  00:4708                    < 		ld a,e 			;set bits 0-7
     300.  00:4708                    < 		out (0x99),a
     301.  00:4708                    < 		ld a,d 			;set bits 8-13
     302.  00:4708                    < 		out (0x99),a
     303.  00:4708                    < 		outi			; 18
     304.  00:4708                    < 		ld	a,ixl 		;set bits 0-7
     305.  00:4708                    < 		out (0x99),a
     306.  00:4708                    < 		ld a,d 			;set bits 8-13
     307.  00:4708                    < 		out (0x99),a
     308.  00:4708                    < 		xor	a
     309.  00:4708                    < 		out	(0x98),a
     310.  00:4708                    < 		inc	d
     311.  00:4708                    < 		endrepeat
     311.  00:4708  7B D3 99 7A D3 99 ED A3 DD 7D D3 99 7A D3 99 AF 
     311.  00:4718  D3 98 14 7B D3 99 7A D3 99 ED A3 DD 7D D3 99 7A 
     311.  00:4728  D3 99 AF D3 98 14 7B D3 99 7A D3 99 ED A3 DD 7D 
     311.  00:4738  D3 99 7A D3 99 AF D3 98 14 7B D3 99 7A D3 99 ED 
     311.  00:4748  A3 DD 7D D3 99 7A D3 99 AF D3 98 14 7B D3 99 7A 
     311.  00:4758  D3 99 ED A3 DD 7D D3 99 7A D3 99 AF D3 98 14 7B 
     311.  00:4768  D3 99 7A D3 99 ED A3 DD 7D D3 99 7A D3 99 AF D3 
     311.  00:4778  98 14 7B D3 99 7A D3 99 ED A3 DD 7D D3 99 7A D3 
     311.  00:4788  99 AF D3 98 14 7B D3 99 7A D3 99 ED A3 DD 7D D3 
     311.  00:4798  99 7A D3 99 AF D3 98 14 7B D3 99 7A D3 99 ED A3 
     311.  00:47A8  DD 7D D3 99 7A D3 99 AF D3 98 14 7B D3 99 7A D3 
     311.  00:47B8  99 ED A3 DD 7D D3 99 7A D3 99 AF D3 98 14 7B D3 
     311.  00:47C8  99 7A D3 99 ED A3 DD 7D D3 99 7A D3 99 AF D3 98 
     311.  00:47D8  14 7B D3 99 7A D3 99 ED A3 DD 7D D3 99 7A D3 99 
     311.  00:47E8  AF D3 98 14 7B D3 99 7A D3 99 ED A3 DD 7D D3 99 
     311.  00:47F8  7A D3 99 AF D3 98 14 7B D3 99 7A D3 99 ED A3 DD 
     311.  00:4808  7D D3 99 7A D3 99 AF D3 98 14 7B D3 99 7A D3 99 
     311.  00:4818  ED A3 DD 7D D3 99 7A D3 99 AF D3 98 14 7B D3 99 
     311.  00:4828  7A D3 99 ED A3 DD 7D D3 99 7A D3 99 AF D3 98 14 
     312.  00:4838  C9                  		ret
     313.  00:4839                      		
      43   00:4839                      		include anim_opt.asm
       1.  00:4839                      	
       2.  00:4839                      		; ld		a,(_xoffset)		
       3.  00:4839                      ; [4]		add		a,a					
       4.  00:4839                      		; cp		d
       5.  00:4839                      		
       6.  00:4839                      		; if _xoffset*16 =>dx 	
       7.  00:4839                      			; b = _displaypage
       8.  00:4839                      		; else	
       9.  00:4839                      			; b = _displaypage xor 1
      10.  00:4839                      
      11.  00:4839                      		; jr		nc,1f
      12.  00:4839                      		
      13.  00:4839                      		; ld 		a,(_displaypage)	; destination page	
      14.  00:4839                      		; xor		1
      15.  00:4839                      		; ld		b,a	
      16.  00:4839                      		; ld		a,16
      17.  00:4839                      		; add		a,d
      18.  00:4839                      		; ld		d,a
      19.  00:4839                      		; ld		a,14	
      20.  00:4839                      		; jp move_tile
      21.  00:4839                      		
      22.  00:4839                      ; 1:		ld 		a,(_displaypage)	; destination page	
      23.  00:4839                      		; ld		b,a		
      24.  00:4839                      		; ld		a,15	
      25.  00:4839                      		; jp move_tile
      26.  00:4839                      
      27.  00:4839                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      28.  00:4839                      
      29.  00:4839                      
      30.  00:4839                      animtest:
      31.  00:4839                      		; ld		a,(_xoffset)		
      32.  00:4839                      ; [4]		add		a,a					
      33.  00:4839                      		; ld		h,a
      34.  00:4839                      
      35.  00:4839  3A 16 CA            		ld	a,(anim_buffer.flag)
      36.  00:483C  A7                  		and	a
      37.  00:483D  20 38               		jr	nz,.manage_buffer
      38.  00:483F                      		
      39.  00:483F  3A 21 CA            		ld		a,(_xspeed+1)
      40.  00:4842  CB 07               		rlc a
      41.  00:4844  DA 56 48            		jp	c,.scroll_left
      42.  00:4847                      		
      43.  00:4847                      .scroll_right:			
      44.  00:4847  CD 8C 48            		call 	movemarker
      45.  00:484A  7B                  		ld	a,e
      46.  00:484B  32 17 CA            		ld	(anim_buffer.dy),a
      47.  00:484E                      
      48.  00:484E  7A                  2:		ld	a,d
      49.  00:484F  D6 10               		sub	a,16
      50.  00:4851  32 18 CA            		ld	(anim_buffer.dx),a
      51.  00:4854  18 0D               		jr		1f
      52.  00:4856                      		
      53.  00:4856                      .scroll_left:
      54.  00:4856  CD 8C 48            		call 	movemarker
      55.  00:4859  7B                  		ld	a,e
      56.  00:485A  32 17 CA            		ld	(anim_buffer.dy),a
      57.  00:485D                      
      58.  00:485D  7A                  2:		ld	a,d
      59.  00:485E  C6 10               		add	a,16
      60.  00:4860  32 18 CA            		ld	(anim_buffer.dx),a
      61.  00:4863                      1:		
      62.  00:4863  3A 24 CA            		ld 		a,(_displaypage)	; destination page	
      63.  00:4866  47                  		ld		b,a		
      64.  00:4867  EE 01               		xor		1
      65.  00:4869  32 1A CA            		ld		(anim_buffer.page),a
      66.  00:486C                      		
      67.  00:486C  3E 0F               		ld		a,15	
      68.  00:486E  32 19 CA            		ld		(anim_buffer.tile),a
      69.  00:4871  32 16 CA            		ld		(anim_buffer.flag),a
      70.  00:4874                      		
      71.  00:4874  C3 AF 44            		jp move_tile
      72.  00:4877                      
      73.  00:4877                      	
      74.  00:4877                      .manage_buffer:
      75.  00:4877  AF                  		xor	a
      76.  00:4878  32 16 CA            		ld	(anim_buffer.flag),a
      77.  00:487B                      		
      78.  00:487B  3A 17 CA            		ld	a,(anim_buffer.dy)
      79.  00:487E  5F                  		ld	e,a
      80.  00:487F                      		
      81.  00:487F  3A 18 CA            		ld	a,(anim_buffer.dx)
      82.  00:4882  57                  		ld	d,a
      83.  00:4883                      		
      84.  00:4883  3A 1A CA            		ld	a,(anim_buffer.page)
      85.  00:4886  47                  		ld	b,a
      86.  00:4887                      		
      87.  00:4887  3E 0F               		ld	a,15	; c
      88.  00:4889  C3 AF 44            		jp move_tile
      89.  00:488C                      		
      90.  00:488C                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      91.  00:488C                      ; test code to move a marker
      92.  00:488C                      ;
      93.  00:488C                      ; returns
      94.  00:488C                      ; d = dx	
      95.  00:488C                      ; e = dy	
      96.  00:488C                      
      97.  00:488C                      movemarker:		
      98.  00:488C  3A 1B CA            		ld	a,(joystick)
      99.  00:488F  6F                  		ld	l,a
     100.  00:4890                      
     101.  00:4890  CB 7D               		bit 7,l
     102.  00:4892  20 0E               		jr	nz,notright
     103.  00:4894  3A 14 CA            		ld	a,(_xtest)
     104.  00:4897  C6 10               		add	a,16
     105.  00:4899  FE F0               		cp	240
     106.  00:489B  28 13               		jr	z,1f
     107.  00:489D                      		; cp	h
     108.  00:489D                      		; jr	z,1f
     109.  00:489D  32 14 CA            		ld	(_xtest),a
     110.  00:48A0  18 0E               		jr	1f
     111.  00:48A2                      notright:
     112.  00:48A2  CB 65               		bit 4,l
     113.  00:48A4  20 0A               		jr	nz,1f
     114.  00:48A6  3A 14 CA            		ld	a,(_xtest)
     115.  00:48A9  D6 10               		sub	a,16
     116.  00:48AB  28 03               		jr	z,1f
     117.  00:48AD                      		; cp	h
     118.  00:48AD                      		; jr	z,1f
     119.  00:48AD  32 14 CA            		ld	(_xtest),a
     120.  00:48B0                      1:		
     121.  00:48B0  3A 14 CA            		ld		a,(_xtest)
     122.  00:48B3  57                  		ld		d,a
     123.  00:48B4                      
     124.  00:48B4  CB 6D               		bit 5,l
     125.  00:48B6  20 0D               		jr	nz,notup
     126.  00:48B8  3A 15 CA            		ld	a,(_ytest)
     127.  00:48BB  D6 10               		sub	a,16
     128.  00:48BD  DA D5 48            		jp	c,1f
     129.  00:48C0  32 15 CA            		ld	(_ytest),a
     130.  00:48C3  18 10               		jr	1f
     131.  00:48C5                      notup:
     132.  00:48C5  CB 75               		bit 6,l
     133.  00:48C7  20 0C               		jr	nz,1f
     134.  00:48C9  3A 15 CA            		ld	a,(_ytest)
     135.  00:48CC  C6 10               		add	a,16
     136.  00:48CE  FE A0               		cp	10*16
     137.  00:48D0  28 03               		jr	z,1f
     138.  00:48D2  32 15 CA            		ld	(_ytest),a
     139.  00:48D5                      1:
     140.  00:48D5  3A 15 CA            		ld	a,(_ytest)
     141.  00:48D8  5F                  		ld		e,a
     142.  00:48D9  C9                  		ret
     143.  00:48DA                      		
     144.  00:48DA                      		
     145.  00:48DA                      		
      44   00:48DA                      		
      45   00:48DA                      		include checkkbd.asm
       1.  00:48DA                      
       2.  00:48DA                      ; // Line Bit_7 Bit_6 Bit_5 Bit_4 Bit_3 Bit_2 Bit_1 Bit_0
       3.  00:48DA                      ; // 0 	   "7"  "6"   "5"   "4"   "3"   "2"   "1"   "0"
       4.  00:48DA                      ; // 1 	   ";"  "]"   "["   "\"   "="   "-"   "9"   "8"
       5.  00:48DA                      ; // 2 	   "B"  "A"   ???   "/"   "."   ","   "'"   "`"
       6.  00:48DA                      ; // 3 	   "J"  "I"   "H"   "G"   "F"   "E"   "D"   "C"
       7.  00:48DA                      ; // 4 	   "R"  "Q"   "P"   "O"   "N"   "M"   "L"   "K"
       8.  00:48DA                      ; // 5 	   "Z"  "Y"   "X"   "W"   "V"   "U"   "T"   "S"
       9.  00:48DA                      ; // 6 	   F3 	 F2    F1  CODE   CAP  GRAPH  CTRL SHIFT
      10.  00:48DA                      ; // 7 	   RET  SEL    BS  STOP   TAB   ESC    F5    F4
      11.  00:48DA                      ; // 8 	   RIGHT DOWN  UP  LEFT   DEL   INS   HOME SPACE
      12.  00:48DA                      
      13.  00:48DA                      checkkbd:
      14.  00:48DA                      		; di
      15.  00:48DA  DB AA               		in	a,(0aah)
      16.  00:48DC  E6 F0               		and 011110000B			; upper 4 bits contain info to preserve
      17.  00:48DE  B3                  		or	e
      18.  00:48DF  D3 AA               		out (0aah),a
      19.  00:48E1  DB A9               		in	a,(0a9h)
      20.  00:48E3  6F                  		ld	l,a
      21.  00:48E4                      		; ei
      22.  00:48E4  C9                  		ret
      46   00:48E5                      		
      47   00:48E5                      ;-------------------------------------
      48   00:48E5                      ; Entry point
      49   00:48E5                      ;-------------------------------------
      50   00:48E5                      START:
      51   00:48E5  AF                  		xor	a
      52   00:48E6  3C                  		inc	a
      53   00:48E7  32 13 CA            		ld	(SEL_NTSC),a		; NTSC MODE
      54   00:48EA  CD 0A 42            		call	set_scr			; set video mode to screen 8
      55   00:48ED  F3                  		di
      56   00:48EE                      		
      57   00:48EE                      ;-------------------------------------
      58   00:48EE                      ;   Power-up routine for 32K ROM
      59   00:48EE                      ;   set pages and sub slot
      60   00:48EE                      ;-------------------------------------
      61   00:48EE  CD 10 40                    call    search_slot
      62   00:48F1  CD 2F 40                    call    search_slotram	
      63   00:48F4  CD 61 40            		call	setrompage2		; ROM in page 1 & 2
      64   00:48F7  CD 5B 40            		call	setrampage0		; RAM in page 0 & 3
      65   00:48FA                      
      66   00:48FA                      
      67   00:48FA                      		; activate  the fist 24K of rom
      68   00:48FA  AF                  		xor	a			   
      69   00:48FB  32 00 50            		ld	(_kBank1),a
      70   00:48FE  3C                  		inc	a
      71   00:48FF  32 00 70            		ld	(_kBank2),a
      72   00:4902  3C                  		inc	a
      73   00:4903  32 00 90            		ld	(_kBank3),a
      74   00:4906                      		
      75   00:4906  CD 78 41            		call	_cls
      76   00:4909                      		
      77   00:4909                      		;--- initialise ISR in RAM
      78   00:4909                      		
      79   00:4909  F3                  		di
      80   00:490A                      	
      81   00:490A  CD 5C 42            		call	isr_set
      82   00:490D                      		
      83   00:490D                      		; copy the level map from ROM to RAM
      84   00:490D                      		
      85   00:490D  CD D3 49            		call	vdptest
      86   00:4910  CD A5 41            		call	font_cpy
      87   00:4913  CD 5F 49            		call	mapinit
      88   00:4916                      		
      89   00:4916                      		
      90   00:4916  21 00 00            		ld	hl,0
      91   00:4919  22 9E FC            		ld	(_jiffy),hl		
      92   00:491C  AF                  		xor	a
      93   00:491D  32 24 CA            		ld	(_displaypage),a		
      94   00:4920  32 14 CA            		ld	(_xtest),a
      95   00:4923  32 15 CA            		ld	(_ytest),a
      96   00:4926  32 16 CA            		ld	(anim_buffer.flag),a
      97   00:4929  32 22 CA            		ld	(_dxchng),a
      98   00:492C  32 23 CA            		ld	(_dxchng2),a
      99   00:492F  3D                  		dec	a
     100   00:4930  32 10 CA            		ld	(_sliceflag_reset),a
     101   00:4933  CD 01 44            		call	reset_sliceflag
     102   00:4936                      		
     103   00:4936  FB                  		ei
     104   00:4937  76                  1:		halt
     105   00:4938  76                  		halt
     106   00:4939                      		
     107   00:4939  3A 9E FC            		ld	a,(_jiffy)		
     108   00:493C  E6 1F               		and	31
     109   00:493E  C2 37 49            		jp	nz,1b
     110   00:4941                      		
     111   00:4941  1E 08               		ld	e,8
     112   00:4943  CD DA 48            		call	checkkbd
     113   00:4946  E6 01               		and	1				; space
     114   00:4948  CC 4E 49            		call	z,PAL_ntsc
     115   00:494B  C3 37 49            		jp	1b
     116   00:494E                      		
     117   00:494E                      PAL_ntsc:
     118   00:494E  F3                  		di
     119   00:494F  3A E8 FF            		ld		a,(RG9SAV)		
     120   00:4952  EE 02               		xor		00000010B		; PAL or NTSC 
     121   00:4954  32 E8 FF            		ld		(RG9SAV),a
     122   00:4957  D3 99               		out		(0x99),a
     123   00:4959  3E 89               		ld		a,9+128
     124   00:495B  D3 99               		out		(0x99),a
     125   00:495D  FB                  		ei
     126   00:495E  C9                  		ret
     127   00:495F                      
     128   00:495F                      mapinit:		
     129   00:495F  3E 0C               		ld		a, :_level
     130   00:4961  32 00 B0            		ld		(_kBank4),a
     131   00:4964  21 00 A0            		ld		hl,_level
     132   00:4967  11 00 C0            		ld		de,_levelmap
     133   00:496A  01 00 0A            		ld		bc,mapWidth*mapHeight
     134   00:496D  ED B0               		ldir
     135   00:496F                      		
     136   00:496F  AF                  		xor		a
     137   00:4970  32 1C CA            		ld		(_ymappos),a
     138   00:4973  32 1F CA            		ld		(_xmappos+2),a	; 24 bit	
     139   00:4976  21 10 00            		ld		hl,16
     140   00:4979  22 20 CA            		ld		(_xspeed),hl
     141   00:497C  21 00 03            		ld		hl,768
     142   00:497F  22 1D CA            		ld		(_xmappos),hl
     143   00:4982                      		; ret
     144   00:4982                      
     145   00:4982                      buildmap:
     146   00:4982  2A 1D CA            		ld	hl,(_xmappos)
     147   00:4985                      
     148   00:4985                      		repeat 4
     149   00:4985                    < 		srl	h
     150   00:4985                    < 		rr	l
     151   00:4985                    < 		endrepeat					; corner top left of the screen window in the map in tiles
     151   00:4985  CB 3C CB 1D CB 3C CB 1D CB 3C CB 1D CB 3C CB 1D 
     152   00:4995                      		
     153   00:4995  11 00 C0            		ld	de,_levelmap
     154   00:4998  19                  		add	hl,de					; HL = corner top right of the screen window in the map in tiles
     155   00:4999                      		
     156   00:4999  11 00 00            		ld	de,0			; dest y,x
     157   00:499C  06 96               		ld	b,15*10
     158   00:499E                      1:		
     159   00:499E                      		set_tile (hl)
     159   00:499E  7E                >   ld a,reg
     159   00:499F  07 07 07          > [3]  rlca
     159   00:49A2  E6 07             >   and 00000111B
     159   00:49A4  C6 04             >   add a,:_tiles0
     159   00:49A6  32 00 B0          >   ld (_kBank4),a
     159   00:49A9                    > 
     159   00:49A9  7E                >   ld a,reg
     159   00:49AA  E6 1F             >   and 00011111B
     159   00:49AC  C6 A0             >   add a,high _tiles0
     160   00:49AE  E5                  		push	hl
     161   00:49AF                      
     162   00:49AF  67                  		ld	h,a				; select offset in the bank
     163   00:49B0  2E 00               		ld	l,0
     164   00:49B2                      		
     165   00:49B2  D5                  		push	de
     166   00:49B3  C5                  		push	bc
     167   00:49B4  06 00               		ld		b,0				; page
     168   00:49B6  CD 6D 44            		call	LMMC_tile
     169   00:49B9  C1                  		pop		bc
     170   00:49BA  D1                  		pop		de
     171   00:49BB                      		
     172   00:49BB  E1                  		pop		hl
     173   00:49BC                      
     174   00:49BC  23                  		inc	hl
     175   00:49BD                      
     176   00:49BD  3E 10               		ld		a,16		; x=x+16
     177   00:49BF  83                  		add		a,e
     178   00:49C0  5F                  		ld		e,a
     179   00:49C1                      		
     180   00:49C1  FE F0               		cp		15*16
     181   00:49C3  38 0B               		jr		c,2f
     182   00:49C5                      
     183   00:49C5  1E 00               		ld		e,0			; x = 0
     184   00:49C7                      		
     185   00:49C7  3E 10               		ld		a,16		; y=y+16
     186   00:49C9  82                  		add		a,d
     187   00:49CA  57                  		ld		d,a
     188   00:49CB                      
     189   00:49CB  3E F1               		ld		a,-15
     190   00:49CD  85                  		add		a,l
     191   00:49CE  6F                  		ld		l,a
     192   00:49CF  24                  		inc		h
     193   00:49D0                      		
     194   00:49D0  10 CC               2:		djnz	1b
     195   00:49D2  C9                  		ret
     196   00:49D3                      		
     197   00:49D3                      vdptest:
     198   00:49D3  16 A0               		ld	d,160			; dest y
     199   00:49D5  1E 00               		ld	e,0				; dest x
     200   00:49D7  0E A0               		ld	c,160			; initial tile
     201   00:49D9  06 20               		ld	b,32			; number of tiles
     202   00:49DB                      1:		
     203   00:49DB                      		set_tile c
     203   00:49DB  79                >   ld a,reg
     203   00:49DC  07 07 07          > [3]  rlca
     203   00:49DF  E6 07             >   and 00000111B
     203   00:49E1  C6 04             >   add a,:_tiles0
     203   00:49E3  32 00 B0          >   ld (_kBank4),a
     203   00:49E6                    > 
     203   00:49E6  79                >   ld a,reg
     203   00:49E7  E6 1F             >   and 00011111B
     203   00:49E9  C6 A0             >   add a,high _tiles0
     204   00:49EB                      
     205   00:49EB  67                  		ld	h,a				; select offset in the bank
     206   00:49EC  2E 00               		ld	l,0
     207   00:49EE                      
     208   00:49EE  D5                  		push	de
     209   00:49EF  C5                  		push	bc
     210   00:49F0  06 01               		ld		b,1				; page
     211   00:49F2  CD 6D 44            		call	LMMC_tile
     212   00:49F5  C1                  		pop		bc
     213   00:49F6  D1                  		pop		de
     214   00:49F7                      		
     215   00:49F7  0C                  		inc		c
     216   00:49F8                      		
     217   00:49F8  3E 10               		ld		a,16		; x=x+16
     218   00:49FA  83                  		add		a,e
     219   00:49FB  5F                  		ld		e,a
     220   00:49FC  30 04               		jr		nc,2f
     221   00:49FE                      
     222   00:49FE  3E 10               		ld		a,16		; y=y+16
     223   00:4A00  82                  		add		a,d
     224   00:4A01  57                  		ld		d,a
     225   00:4A02                      		
     226   00:4A02  10 D7               2:		djnz	1b
     227   00:4A04  C9                  		ret
     228   00:4A05                      		
     229   00:4A05                      		
     230   00:4A05  (04)                		page 4
     231   04:A000                      _tiles0:
     232   04:A000  (2000)              		incbin "tiles.bin",0x0000,0x2000
     233   04:C000  (05)                		page 5
     234   05:A000  (2000)              		incbin "tiles.bin",0x2000,0x2000
     235   05:C000  (06)                		page 6
     236   06:A000  (2000)              		incbin "tiles.bin",0x4000,0x2000
     237   06:C000  (07)                		page 7
     238   07:A000  (2000)              		incbin "tiles.bin",0x6000,0x2000
     239   07:C000  (08)                		page 8
     240   08:A000  (2000)              		incbin "tiles.bin",0x8000,0x2000
     241   08:C000  (09)                		page 9
     242   09:A000  (2000)              		incbin "tiles.bin",0xA000,0x2000
     243   09:C000  (0A)                		page 10
     244   0A:A000  (2000)              		incbin "tiles.bin",0xC000,0x2000
     245   0A:C000  (0B)                		page 11
     246   0B:A000  (2000)              		incbin "tiles.bin",0xE000,0x2000
     247   0B:C000                      
     248   0B:C000  (0C)                		page 12		
     249   0C:A000                      _level:
     250   0C:A000  (0A00)              		incbin	datamap.bin	
     251   0C:AA00                      		
     252   0C:AA00  (0D)                		page 13		
     253   0D:A000                      fonts:
     254   0D:A000  (2000)              		incbin	fonts.bin,0x0000,0x2000
     255   0D:C000  (0E)                		page 14
     256   0E:A000  (2000)              		incbin 	fonts.bin,0x2000,0x2000
     257   0E:C000  (0F)                		page 15
     258   0F:A000  (2000)              		incbin 	fonts.bin,0x4000,0x2000
     259   0F:C000                      		
     260   0F:C000                      		; call	opening
     261   0F:C000                      		
     262   0F:C000                      
     263   0F:C000                      		; call 	_hw_sprite_init
     264   0F:C000                      
     265   0F:C000                      		; ld		c,0
     266   0F:C000                      		; ld		de,256*(mapHeight*16+3)
     267   0F:C000                      		; call	_vdpsetvramwr
     268   0F:C000                      
     269   0F:C000                      		; ld		de, 256*:_scorebar+1
     270   0F:C000                      		; call	outvram
     271   0F:C000                      		
     272   0F:C000                      		; ld		c,1
     273   0F:C000                      		; ld		de,256*mapHeight*16
     274   0F:C000                      		; call	_vdpsetvramwr
     275   0F:C000                      
     276   0F:C000                      		; ld		de, 256*:_animated+2
     277   0F:C000                      		; call	outvram
     278   0F:C000                      
     279   0F:C000                      	
     280   0F:C000                      		; ; ld	a,:demo_song
     281   0F:C000                      		; ; setpage_a
     282   0F:C000                      		
     283   0F:C000                      		; ; ld	bc,	end_demo_song-musbuff
     284   0F:C000                      		; ; ld	hl,	demo_song
     285   0F:C000                      		; ; ld	de,	musbuff
     286   0F:C000                      		; ; ldir
     287   0F:C000                      			
     288   0F:C000                      		; ; call	replay_init
     289   0F:C000                      		; ; ld		hl,musbuff
     290   0F:C000                      		; ; call	replay_loadsong
     291   0F:C000                      
     292   0F:C000                      
     293   0F:C000                      		; ld		e,0
     294   0F:C000                      		; call	_setpage
     295   0F:C000                      				
     296   0F:C000                      		; ld	a, :_level
     297   0F:C000                      		; ld	(_kBank4),a
     298   0F:C000                      		
     299   0F:C000                      		; ld		hl,_level
     300   0F:C000                      		; ld		de,_levelmap
     301   0F:C000                      		; ld		bc,mapWidth*mapHeight
     302   0F:C000                      		; ldir
     303   0F:C000                      
     304   0F:C000                      
     305   0F:C000                      		; ; call	init_page0
     306   0F:C000                      
     307   0F:C000                      		; ld		a,0
     308   0F:C000                      		; ld		(cur_level),a
     309   0F:C000                      
     310   0F:C000                      		; ei
     311   0F:C000                      
     312   0F:C000                      ; restart:
     313   0F:C000                      		; call	_intreset
     314   0F:C000                      
     315   0F:C000                      		
     316   0F:C000                      
     317   0F:C000                      		; ld		a,1
     318   0F:C000                      		; ld		(_displaypage),a		
     319   0F:C000                      		; call 	_cls0
     320   0F:C000                      		; ld		hl,_levelmap
     321   0F:C000                      		; ld		(_levelmap_pos),hl
     322   0F:C000                      		
     323   0F:C000                      		; xor		a
     324   0F:C000                      		; ld		h,a
     325   0F:C000                      		; ld		l,a
     326   0F:C000                      		; ld		(flip_flop),a
     327   0F:C000                      		; ld		(god_mode),a
     328   0F:C000                      		; ld		(_ymappos),a
     329   0F:C000                      		; ld		(_xmappos),hl
     330   0F:C000                      		
     331   0F:C000                      		; ld		(_nframes),hl
     332   0F:C000                      		; ld		(_mcdx),hl
     333   0F:C000                      		; ld		(_mcframe),a
     334   0F:C000                      		
     335   0F:C000                      		; ld		(_yoffset),a		;  0 tutto su
     336   0F:C000                      		; ld		(_xoffset),a		;  0 tutto su
     337   0F:C000                      								
     338   0F:C000                      		; ld		(aniframe),a
     339   0F:C000                      		; ld		(anispeed),a
     340   0F:C000                      		; ld		(ms_state),a
     341   0F:C000                      		; inc 	a
     342   0F:C000                      		; ld		(old_aniframe),a		; old_aniframe!=aniframe
     343   0F:C000                      	
     344   0F:C000                      		; ld		(dxmap),a		; moving right
     345   0F:C000                      		; ld		(_dxmap),a		; moving right
     346   0F:C000                      
     347   0F:C000                      		; ld		(xmap),hl
     348   0F:C000                      		; ld		(_xmapx4),hl
     349   0F:C000                      		; ld		bc,xship_rel
     350   0F:C000                      		; add 	hl,bc
     351   0F:C000                      		; ld		(xship),hl
     352   0F:C000                      		; ld		a,80
     353   0F:C000                      		; ld		(yship),a
     354   0F:C000                      
     355   0F:C000                      		; call 	npc_init								
     356   0F:C000                      		; call 	load_colors
     357   0F:C000                      
     358   0F:C000                      		; xor	a
     359   0F:C000                      		; ld		(_kBank1),a
     360   0F:C000                      		; inc	a
     361   0F:C000                      		; ld		(_kBank2),a
     362   0F:C000                      		; inc	a
     363   0F:C000                      		; ld		(_kBank3),a
     364   0F:C000                      		
     365   0F:C000                      
     366   0F:C000                      		; call	_isrinit
     367   0F:C000                      
     368   0F:C000                      ; main_loop: 
     369   0F:C000                      				
     370   0F:C000                      		; ld	hl,0
     371   0F:C000                      		; ld	(_jiffy),hl
     372   0F:C000                      
     373   0F:C000                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     374   0F:C000                      ; ; run ms FSM and place its sprites in the SAT in RAM
     375   0F:C000                      		; call	ms_ctrl
     376   0F:C000                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     377   0F:C000                      ; ; test for game restart
     378   0F:C000                      		; ld	a,(ms_state)
     379   0F:C000                      		; cp	ms_reset
     380   0F:C000                      		; jp	z,restart
     381   0F:C000                      
     382   0F:C000                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     383   0F:C000                      ; ; place MS in the SAT and test for collision
     384   0F:C000                      		; call	put_ms_sprt
     385   0F:C000                      		; ld		a,(god_mode)
     386   0F:C000                      		; and 	a
     387   0F:C000                      		; ; call	z,test_obstacles
     388   0F:C000                      
     389   0F:C000                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     390   0F:C000                      ; ; run NCPS FSM
     391   0F:C000                      		; call	wave_timer
     392   0F:C000                      		; call	npc_loop
     393   0F:C000                      		; call	enemy_bullet_loop
     394   0F:C000                      
     395   0F:C000                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     396   0F:C000                      ; ; run MS bullets FSM
     397   0F:C000                      		; call	bullet_loop
     398   0F:C000                      
     399   0F:C000                      		; ; ld	a,00100101B			; random colour
     400   0F:C000                      		; ; out		(0x99),a
     401   0F:C000                      		; ; ld		a,7+128
     402   0F:C000                      		; ; out		(0x99),a
     403   0F:C000                      		
     404   0F:C000                      		; ; call	_waitvdp
     405   0F:C000                      
     406   0F:C000                      		; ; ld	a,10100101B			; random colour
     407   0F:C000                      		; ; out		(0x99),a
     408   0F:C000                      		; ; ld		a,7+128
     409   0F:C000                      		; ; out		(0x99),a
     410   0F:C000                      				
     411   0F:C000                      		; ld	a,(joystick)
     412   0F:C000                      		; and	32
     413   0F:C000                      		; ; call	z,_plot_distrucable
     414   0F:C000                      
     415   0F:C000                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     416   0F:C000                      		; ; ld		a,3
     417   0F:C000                      		; ; out		(0x99),a
     418   0F:C000                      		; ; ld		a,7+128
     419   0F:C000                      		; ; out		(0x99),a
     420   0F:C000                      		
     421   0F:C000                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     422   0F:C000                      		; ; call	test_star
     423   0F:C000                      
     424   0F:C000                      		; ; xor		a
     425   0F:C000                      		; ; out		(0x99),a
     426   0F:C000                      		; ; ld		a,7+128
     427   0F:C000                      		; ; out		(0x99),a
     428   0F:C000                      ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     429   0F:C000                      
     430   0F:C000                      		
     431   0F:C000                      ; 1:		ld	a,(_jiffy)		; wait for vblank (and not for linit)
     432   0F:C000                      		; or	a
     433   0F:C000                      		; jr	z,1b
     434   0F:C000                      	
     435   0F:C000                      		; ld	hl,(xmap)
     436   0F:C000                      		; ld	bc,xship_rel
     437   0F:C000                      		; add hl,bc
     438   0F:C000                      		; ld	(xship),hl
     439   0F:C000                      
     440   0F:C000                      		; ld		a,(dxmap)
     441   0F:C000                      		; ld		(_dxmap),a
     442   0F:C000                      
     443   0F:C000                      		; jp      main_loop
     444   0F:C000                      
     445   0F:C000                      ; ;-------------------------------------
     446   0F:C000                      ; AFXPLAY:
     447   0F:C000                      		; ret
     448   0F:C000                      ; ;	include vuitpakker.asm
     449   0F:C000                      	; include print.asm
     450   0F:C000                      	; include plot_line.asm
     451   0F:C000                      	; include plot_line2.asm
     452   0F:C000                      	; include color_update.asm
     453   0F:C000                      ; ms_bllts_col_win:
     454   0F:C000                      	; include ms_bllts_frm_coll_wind.asm
     455   0F:C000                      	; include	ms_bllts.asm
     456   0F:C000                      		
     457   0F:C000                      ; ;-------------------------------------
     458   0F:C000                      
     459   0F:C000                      	
     460   0F:C000                      		; page 1
     461   0F:C000                      
     462   0F:C000                      		; include	ms_crtl.asm
     463   0F:C000                      		; include	put_ms_sprt.asm
     464   0F:C000                      		; include probe_level.asm				
     465   0F:C000                      		; include opening.asm		
     466   0F:C000                      ; outvram:
     467   0F:C000                      ; 2:		ld	a,d
     468   0F:C000                      		; ld	(_kBank4),a
     469   0F:C000                      		; ld	hl,0xA000
     470   0F:C000                      		; ld	bc,0x98
     471   0F:C000                      		; ld	a,32
     472   0F:C000                      ; 1:		otir
     473   0F:C000                      		; dec	a
     474   0F:C000                      		; jp	nz,1b
     475   0F:C000                      		; inc	d
     476   0F:C000                      		; dec	e
     477   0F:C000                      		; jr	nz,2b
     478   0F:C000                      		; ret
     479   0F:C000                      		
     480   0F:C000                      		; page 2
     481   0F:C000                      	; ; include mainhero_LMMM.asm
     482   0F:C000                      
     483   0F:C000                      	
     484   0F:C000                      		; page 3
     485   0F:C000                      ; manta_color:
     486   0F:C000                      		; incbin mship03_clr.bin
     487   0F:C000                      ; ms_spt:
     488   0F:C000                      		; incbin mship03_frm.bin
     489   0F:C000                      		
     490   0F:C000                      		; page 4
     491   0F:C000                      ; _tiles0:
     492   0F:C000                      		; incbin "tiles.bin",0x0000,0x2000
     493   0F:C000                      		; page 5
     494   0F:C000                      		; incbin "tiles.bin",0x2000,0x2000
     495   0F:C000                      		; page 6
     496   0F:C000                      		; incbin "tiles.bin",0x4000,0x2000
     497   0F:C000                      		; page 7
     498   0F:C000                      		; incbin "tiles.bin",0x6000,0x2000
     499   0F:C000                      		; page 8
     500   0F:C000                      		; incbin "tiles.bin",0x8000,0x2000
     501   0F:C000                      		; page 9
     502   0F:C000                      		; incbin "tiles.bin",0xA000,0x2000
     503   0F:C000                      		; page 10
     504   0F:C000                      		; incbin "tiles.bin",0xC000,0x2000
     505   0F:C000                      		; page 11
     506   0F:C000                      		; incbin "tiles.bin",0xE000;,0x2000
     507   0F:C000                      
     508   0F:C000                      		; page 12
     509   0F:C000                      
     510   0F:C000                      		; page 15
     511   0F:C000                      ; _level:
     512   0F:C000                      		; incbin "datamap.bin"
     513   0F:C000                      	
     514   0F:C000                      		; page 16
     515   0F:C000                      ; _opening:
     516   0F:C000                      		; incbin "opening.bin",0x0000,0x2000
     517   0F:C000                      		; page 17
     518   0F:C000                      		; incbin "opening.bin",0x2000,0x2000
     519   0F:C000                      		; page 18
     520   0F:C000                      		; incbin "opening.bin",0x4000,0x2000
     521   0F:C000                      		; page 19
     522   0F:C000                      		; incbin "opening.bin",0x6000,0x2000
     523   0F:C000                      		; page 20
     524   0F:C000                      		; incbin "opening.bin",0x8000,0x2000
     525   0F:C000                      		; page 21
     526   0F:C000                      		; incbin "opening.bin",0xA000,0x2000
     527   0F:C000                      		; page 22
     528   0F:C000                      		; incbin "opening.bin",0xC000;,0x2000
     529   0F:C000                      		; page 23
     530   0F:C000                      		; ; incbin "opening.bin",0xE000;,,0x2000
     531   0F:C000                      	
     532   0F:C000                      		; page 24
     533   0F:C000                      ; _scorebar:	
     534   0F:C000                      		; incbin scorebar.bin
     535   0F:C000                      	
     536   0F:C000                      		; page 25
     537   0F:C000                      ; _animated:	
     538   0F:C000                      		; incbin animated.bin,0x0000,0x2000
     539   0F:C000                      		; page 26
     540   0F:C000                      		; incbin animated.bin,0x2000,0x2000
     541   0F:C000                      
     542   0F:C000                      		; page 27
     543   0F:C000                      ; sprtdata:
     544   0F:C000                      		; incbin 	uridium_revA.bin,,16*32
     545   0F:C000                      		; incbin 	enemies_frm.bin
     546   0F:C000                      
     547   0F:C000                      		; page 28
     548   0F:C000                      ; color_base:
     549   0F:C000                      		; repeat 4
     550   0F:C000                      		; ds	16,8
     551   0F:C000                      		; ds	16,10+64
     552   0F:C000                      		; endrepeat
     553   0F:C000                      		; repeat 4
     554   0F:C000                      		; ds	16,8
     555   0F:C000                      		; ds	16,10+64
     556   0F:C000                      		; endrepeat
     557   0F:C000                      
     558   0F:C000                      		
     559   0F:C000                      		; incbin 	enemies_clr.bin
     560   0F:C000                      		
     561   0F:C000                      ; FINISH:
     562   0F:C000                      
     563   0F:C000                      
     564   0F:C000                      ; ;---------------------------------------------------------
     565   0F:C000                      ; ; Variables
     566   0F:C000                      ; ;---------------------------------------------------------
     567   0F:C000                      	
     568   0F:C000                      	
     569   0F:C000  (C000)              	MAP 0xC000
     570   0F:C000                      
     571   0F:C000  (0F:C000)           _levelmap:			#mapWidth*mapHeight
     572   0F:C000                      ; do not change position in ram
     573   0F:C000  (0F:CA00)           _sliceflag:			#16		; while scrolling right, 
     574   0F:C000                      							; if flag(n)>0, slice n+1 on displaypage has 
     575   0F:C000                      							; been copied to slice n in !displaypage
     576   0F:C000                      							; flag(0) is set when the hidden border on 
     577   0F:C000                      							; !displaypage has been built on slice 15
     578   0F:C000                      							;
     579   0F:C000                      							; while scrolling left,  
     580   0F:C000                      							; if flag(n)>0, slice n on displaypage has 
     581   0F:C000                      							; been copied to slice n+1 in !displaypage
     582   0F:C000                      							; flag(15) is set when the hidden border on 
     583   0F:C000                      							; !displaypage has been built on slice 0
     584   0F:C000                      							;
     585   0F:C000                      							; _sliceflag is reset at page swap
     586   0F:C000                      ; do not change position in ram
     587   0F:C000  (0F:CA10)           _sliceflag_reset:	#1		; is set, _sliceflag is reset				
     588   0F:C000                      
     589   0F:C000  (0F:CA11)           slotvar				#1
     590   0F:C000  (0F:CA12)           slotram				#1
     591   0F:C000  (0F:CA13)           SEL_NTSC			#1
     592   0F:C000                      
     593   0F:C000  (0F:CA14)           _xtest:				#1
     594   0F:C000  (0F:CA15)           _ytest:				#1
     595   0F:C000                      
     596   0F:C000  (0F:CA16)           anim_buffer.flag:		#1
     597   0F:C000  (0F:CA17)           anim_buffer.dy:			#1
     598   0F:C000  (0F:CA18)           anim_buffer.dx:			#1
     599   0F:C000  (0F:CA19)           anim_buffer.tile:		#1
     600   0F:C000  (0F:CA1A)           anim_buffer.page:		#1
     601   0F:C000                      
     602   0F:C000  (0F:CA1B)           joystick			#1
     603   0F:C000                      
     604   0F:C000                      ; _mcdivider			#1
     605   0F:C000                      
     606   0F:C000                      ; _mcx				#2	; relative with in the frame on the screen
     607   0F:C000                      ; _mcy				#2
     608   0F:C000                      
     609   0F:C000                      ; _mclx				#2	; absolute with the level in ram
     610   0F:C000                      ; _mcly				#2
     611   0F:C000                      
     612   0F:C000                      ; _mcframe			#1
     613   0F:C000                      ; _mcstate			#1
     614   0F:C000                      
     615   0F:C000                      ; _mcdx				#2
     616   0F:C000                      ; _mcdy				#2
     617   0F:C000                      
     618   0F:C000                      ; _mcprobe:			#1
     619   0F:C000                      ; _mcprobeb:			#1
     620   0F:C000                      
     621   0F:C000                      ; _ticxframe			#1
     622   0F:C000                      
     623   0F:C000                      ; _buffer:			#16
     624   0F:C000                      ; _fps:				#2
     625   0F:C000                      ; _nframes:			#2
     626   0F:C000                      ; _vbit16:			#2
     627   0F:C000                      
     628   0F:C000  (0F:CA1C)           _ymappos:			#1
     629   0F:C000  (0F:CA1D)           _xmappos:			#3		; 24 bit = 12.8 bit
     630   0F:C000  (0F:CA20)           _xspeed:			#2		; 16 bit = 8.8 bit
     631   0F:C000  (0F:CA22)           _dxchng:			#1		; <>0 if direction changes
     632   0F:C000  (0F:CA23)           _dxchng2:			#1		; <>0 at second frame after direction has changed
     633   0F:C000                      
     634   0F:C000                      ; _shadowbuff:		#2
     635   0F:C000                      
     636   0F:C000  (0F:CA24)           _displaypage:		#1
     637   0F:C000                      
     638   0F:C000                      ; _mccolorchange:		#1
     639   0F:C000  (0F:CA25)           _xoffset:			#1
     640   0F:C000                      ; _yoffset:			#1
     641   0F:C000                      
     642   0F:C000                      ; __xoffset:			#1
     643   0F:C000                      ; __r18:				#1
     644   0F:C000                      
     645   0F:C000                      ; randSeed:			#2
     646   0F:C000                      ; cur_level:			#1
     647   0F:C000                      ; wave_count:			#1
     648   0F:C000                      ; landing_permission:	#1
     649   0F:C000                      ; assault_wave_timer:	#2
     650   0F:C000                      ; bullet_rate:		#1
     651   0F:C000                      
     652   0F:C000                      ; _dxmap:				#1		; previous dxmap
     653   0F:C000                      ; dxmap:				#1
     654   0F:C000                      ; xmap:				#2
     655   0F:C000                      ; _xmapx4:			#2		; xmap x 4
     656   0F:C000                      ; yship:				#1
     657   0F:C000                      ; xship:				#2
     658   0F:C000                      ; aniframe:			#1
     659   0F:C000                      ; ms_state:			#1
     660   0F:C000                      ; old_aniframe:		#1
     661   0F:C000                      ; anispeed:			#1
     662   0F:C000                      ; already_dead:		#1
     663   0F:C000                      ; lives_bin:			#1
     664   0F:C000                      
     665   0F:C000                      ; god_mode:			#1
     666   0F:C000                      ; visible_sprts:		#1
     667   0F:C000                      ; flip_flop:			#1
     668   0F:C000                      
     669   0F:C000                      ; ram_sat:			#3*4
     670   0F:C000                      
     671   0F:C000                      	; struct enemy_data
     672   0F:C000                      ; y				db	0
     673   0F:C000                      ; x				dw	0
     674   0F:C000                      ; xoff			db	0
     675   0F:C000                      ; yoff			db	0
     676   0F:C000                      ; xsize			db	0
     677   0F:C000                      ; ysize			db	0
     678   0F:C000                      ; status			db	0	; B7 = DWN/UP | B6 = RIGHT/LEFT | B5 = ok/wrong clr | B0 = Inactive/Active
     679   0F:C000                      ; cntr			db	0
     680   0F:C000                      ; kind			db	0
     681   0F:C000                      ; frame			db	0
     682   0F:C000                      ; color			db	0
     683   0F:C000                      ; color2			db	0
     684   0F:C000                      ; speed			dw	0
     685   0F:C000                      	; ends
     686   0F:C000                      	
     687   0F:C000                      ; any_object:			#0
     688   0F:C000                      ; ms_bullets:			#enemy_data*max_bullets
     689   0F:C000                      ; enem_bullets:		#enemy_data*max_enem_bullets
     690   0F:C000                      ; enemies:			#enemy_data*max_enem
     691   0F:C000                      ; endram:				#1
     692   0F:C000  (0000)              	ENDMAP

    LABELS
-------------------------------------------------
00:00005000   _kBank1
00:00007000   _kBank2
00:00009000   _kBank3
00:0000B000   _kBank4
00:0000F3DF   RG0SAV
00:0000F3E0   RG1SAV
00:0000F3E1 X RG2SAV
00:0000F3E2 X RG3SAV
00:0000F3E3 X RG4SAV
00:0000F3E4 X RG5SAV
00:0000F3E5 X RG6SAV
00:0000F3E6   RG7SAV
00:0000FFE7   RG8SAV
00:0000FFE8   RG9SAV
00:0000FFE9 X RG10SAV
00:0000FFEA X RG11SAV
00:0000FFEB X RG12SAV
00:0000FFEC X RG13SAV
00:0000FFED X RG14SAV
00:0000FFEE X RG15SAV
00:0000FFEF X RG16SAV
00:0000FFF0 X RG17SAV
00:0000FFF1 X RG18SAV
00:0000FFF2 X RG19SAV
00:0000FFF3 X RG20SAV
00:0000FFF4 X RG21SAV
00:0000FFF5 X RG22SAV
00:0000FFF7 X RG23SAV
00:0000FC9E   _jiffy
00:0000000C X max_enem
00:00000003 X max_enem_bullets
00:00000002 X max_bullets
00:00000004 X maxspeed
00:000000B4 X assault_wave_timer_preset
00:00000002 X enemy_bullet_speed
00:00000078 X xship_rel
00:00000100   mapWidth
00:0000000A   mapHeight
00:000000A0   YSIZE
00:00000000 X debug
00:00000024 X ENASLT
00:00000138   RSLREG
00:0000FCC1   EXPTBL
00:00004010   search_slot
00:0000402F   search_slotram
00:00004050   search_slotram0
00:00004055 X setrompage0
00:0000405B   setrampage0
00:00004061   setrompage2
00:00004067 X setrampage2
00:0000406D X setrompage3
00:00004073 X setrampage3
00:00004079 X recbios
00:0000407C   setslotpage0
00:000040B3 X setslotpage1
00:000040F2   setslotpage2
00:00004139   setslotpage3
00:00004178   _cls
00:00004190 X _cls0
00:000041A5   font_cpy
00:00000099 X vdpport1
00:0000009A X vdpport2
00:000041C5   _vdpsetvramwr
00:000041C6 X _vdpsetvramwr2
00:000041D6 X _vdpsetvramwr14
00:000041DF X _vdpsetvramrd
00:000041F9 X _setpage
00:0000005F   chgmod
00:0000000C X RDSLT
00:00000156 X KILBUF
00:0000420A   set_scr
00:0000424D   _waitvdp
00:0000425C   isr_set
00:0000427F X isr_reset
00:0000429B   _scroll
00:000042BA   _fake_isr
00:000042C7   vblank
00:00004303 X vblank.scroll_right
00:00004310   vblank.scroll_left
00:0000431A   vblank.return
00:00004337   lint
00:000043AE   waitHBLANK
00:000043C5   xscroll
00:000043D3   pageswap
00:000043E4   set_displaypage
00:00004401   reset_sliceflag
00:00004415   changespeed
00:00004433   changespeed.notright
00:0000444C   changexpos
00:0000446D   LMMC_tile
00:000044AF   move_tile
00:000044F2   move_slice
00:0000452D   clear_slice
00:00004557   brdrs_left
00:00004565   brdrs_right
00:00004574   vdp_task_left
00:00004590   vdp_task_left.x15
00:0000459B   vdp_task_left.x0_14
00:000045A6   vdp_task_left.left_dxchng
00:000045AF   vdp_task_left.left_dxchng2
00:000045B9   vdp_task_right
00:000045D4   vdp_task_right.x0
00:000045DF   vdp_task_right.x1_15
00:000045EA   vdp_task_right.right_dxchng
00:000045F3   vdp_task_right.right_dxchng2
00:000045FD   _brdrs_left
00:0000463C   _brdrs_right
00:0000467B   colmn_patch_right
00:000046A2   set2pixs
00:000046B4   colmn_patch_left
00:000046E2   plot_col64
00:000046E5   plot_col32
00:000046E8   plot_col16
00:000046EF   _plot_col16
00:00004839   animtest
00:00004847 X animtest.scroll_right
00:00004856   animtest.scroll_left
00:00004877   animtest.manage_buffer
00:0000488C   movemarker
00:000048A2   notright
00:000048C5   notup
00:000048DA   checkkbd
00:000048E5   START
00:0000494E   PAL_ntsc
00:0000495F   mapinit
00:00004982 X buildmap
00:000049D3   vdptest
04:0000A000   _tiles0
0C:0000A000   _level
0D:0000A000   fonts
0F:0000C000   _levelmap
0F:0000CA00   _sliceflag
0F:0000CA10   _sliceflag_reset
0F:0000CA11   slotvar
0F:0000CA12   slotram
0F:0000CA13   SEL_NTSC
0F:0000CA14   _xtest
0F:0000CA15   _ytest
0F:0000CA16   anim_buffer.flag
0F:0000CA17   anim_buffer.dy
0F:0000CA18   anim_buffer.dx
0F:0000CA19   anim_buffer.tile
0F:0000CA1A   anim_buffer.page
0F:0000CA1B   joystick
0F:0000CA1C   _ymappos
0F:0000CA1D   _xmappos
0F:0000CA20   _xspeed
0F:0000CA22   _dxchng
0F:0000CA23   _dxchng2
0F:0000CA24   _displaypage
0F:0000CA25   _xoffset


 Output: main.out
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: *  Used: 00000000

    No output

 Output: urd2.rom
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: 00002000  Used: 00000A05

   Address   Length Align   Label
   00004000    2565         search_slot
   00004A05    5627       <empty>

 Page: 01
  Org: 00006000  Size: 00002000  Used: 00000000

   00006000    8192       <empty>

 Page: 02
  Org: 00008000  Size: 00002000  Used: 00000000

   00008000    8192       <empty>

 Page: 03
  Org: 0000A000  Size: 00002000  Used: 00000000

   0000A000    8192       <empty>

 Page: 04
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         _tiles0

 Page: 05
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         

 Page: 06
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         

 Page: 07
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         

 Page: 08
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         

 Page: 09
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         

 Page: 0A
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         

 Page: 0B
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         

 Page: 0C
  Org: 0000A000  Size: 00002000  Used: 00000A00

   Address   Length Align   Label
   0000A000    2560         _level
   0000AA00    5632       <empty>

 Page: 0D
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         fonts

 Page: 0E
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         

 Page: 0F
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         
