Sjasm Z80 Assembler v0.42c - www.xl2s.tk             [2016.01.06 - 01:19:25]

main.asm
Errors: 0

       1   00:0000                      ;----------------------------------------------------------------------------
       2   00:0000                      ;			(\__/)
       3   00:0000                      ;			(='.'=)
       4   00:0000                      ;			(")_(")
       5   00:0000                      ;----------------------------------------------------------------------------
       6   00:0000                      
       7   00:0000                              output "urd_scr8.rom"
       8   00:0000                      
       9   00:0000                      		incdir ene_code
      10   00:0000                      		incdir music
      11   00:0000                      		incdir manta
      12   00:0000                      		incdir sources
      13   00:0000                      		incdir databin
      14   00:0000                      
      15   00:0000                      		defpage	 0,0x4000, 0x2000		; page 0 main code + far call routines
      16   00:0000                      		defpage	 1,0x6000, 0x2000		; page 1 main code + far call routines
      17   00:0000                      		defpage	 2,0x8000, 0x2000		; swapped data 
      18   00:0000                      		defpage	 3,0xA000, 0x2000		; swapped data 
      19   00:0000                      		
      20   00:0000                      		defpage	 4..12					; 64KB of swapped data 
      21   00:0000                      
      22   00:0000                      		; defpage	12,0x4000, 0x2000		; swapped code
      23   00:0000                      		defpage	13,0x6000, 0x2000		; swapped code 
      24   00:0000                      		defpage	14,0x8000, 0x2000		; swapped data 
      25   00:0000                      		defpage	15,0xA000, 0x2000		; swapped data 
      26   00:0000                      
      27   00:0000                      		defpage	16..31					; 128KB of swapped data 
      28   00:0000                      
      29   00:0000                      		;	konami scc
      30   00:0000                      		
      31   00:0000  (00:5000)           _kBank1:	equ 05000h ;- 57FFh (5000h used)
      32   00:0000  (00:7000)           _kBank2: 	equ 07000h ;- 77FFh (7000h used)
      33   00:0000  (00:9000)           _kBank3: 	equ 09000h ;- 97FFh (9000h used)
      34   00:0000  (00:B000)           _kBank4: 	equ 0B000h ;- B7FFh (B000h used)
      35   00:0000                      	
      36   00:0000                      
      37   00:0000                      
      38   00:0000                      	macro setpage_a
      39   00:0000                    < 		ld	(_kBank3),a
      40   00:0000                    < 		inc	a
      41   00:0000                    < 		ld	(_kBank4),a
      42   00:0000                    < 	endmacro
      43   00:0000                        
      44   00:0000                        		include "header.asm"
       1.  00:0000                      
       2.  00:0000                      	
       3.  00:0000                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       4.  00:0000                      
       5.  00:0000  (00:000C)           max_enem:					equ 12		; max 12
       6.  00:0000  (00:0003)           max_enem_bullets:			equ 3
       7.  00:0000  (00:0002)           max_bullets:				equ 2		; max number of enemies*2 + ms_bullets + enem_bullets + 3 for ms	<= 32 sprites
       8.  00:0000                      
       9.  00:0000  (00:0004)           maxspeed:					equ 4		; the actual speed is divided by 4
      10.  00:0000  (00:00B4)           assault_wave_timer_preset:	equ	3*60	; a wave each 3 seconds
      11.  00:0000  (00:0002)           enemy_bullet_speed:			equ	2	
      12.  00:0000  (00:0078)           xship_rel:					equ (128-8)
      13.  00:0000                      
      14.  00:0000  (00:0100)           mapWidth	equ	256
      15.  00:0000  (00:000B)           mapHeight	equ	11
      16.  00:0000  (00:00A8)           YSIZE		equ	10*16+8
      17.  00:0000                      
      18.  00:0000                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      19.  00:0000                      
      20.  00:0000                      
      45   00:0000                      		
      46   00:0000                      		
      47   00:0000                      		
      48   00:0000  (00)                		page 0
      49   00:4000                      		
      50   00:4000                              org 4000h
      51   00:4000                              dw  4241h,START,0,0,0,0,0,0
      51   00:4000  41 42 7F 54 00 00 00 00 00 00 00 00 00 00 00 00 
      52   00:4010                      
      53   00:4010                      	;-------------------------------------		
      54   00:4010                      
      55   00:4010                      
      56   00:4010                      		include rominit64.asm
       1.  00:4010                      
       2.  00:4010                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       3.  00:4010                      ; set pages and subslot
       4.  00:4010                      ;
       5.  00:4010                      
       6.  00:4010                      
       7.  00:4010  (00:0024)           ENASLT:			equ		024h
       8.  00:4010  (00:0138)           RSLREG:			equ		0138h
       9.  00:4010  (00:FCC1)           EXPTBL:			equ		0FCC1h	; Bios Slot / Expansion Slot
      10.  00:4010                      
      11.  00:4010                      
      12.  00:4010                      ; ----------------------------
      13.  00:4010                      ; pre-set main slot for page 3
      14.  00:4010                      ; and set sub-slot for page 3
      15.  00:4010                      ; ----------------------------
      16.  00:4010                      	macro	mainslot_setup n
      17.  00:4010                    < 	and		3
      18.  00:4010                    < [2]	rrca
      19.  00:4010                    < 	and		0xC0
      20.  00:4010                    < 	ld		c,a
      21.  00:4010                    < 	ld		a,d
      22.  00:4010                    < 	and		0x3F
      23.  00:4010                    < 	or		c
      24.  00:4010                    < 	ld		c,a					; Primary slot value with main slot in page 3
      25.  00:4010                    < 
      26.  00:4010                    < 	ld		a,b
      27.  00:4010                    < 	and		0x0C
      28.  00:4010                    < [2]	rrca
      29.  00:4010                    < 	and		3
      30.  00:4010                    < 	ld		b,a					; B = Expanded slot in page 3
      31.  00:4010                    < 	ld		a,c
      32.  00:4010                    < 	out		(0A8h),a			; Slot : Main Slot, xx, xx, Main slot
      33.  00:4010                    < 	ld		a,(0FFFFh)
      34.  00:4010                    < 	cpl
      35.  00:4010                    < 	if (n<=4)
      36.  00:4010                    < [n]	RLCA
      37.  00:4010                    < 	else
      38.  00:4010                    < [8-n] RRCA	
      39.  00:4010                    < 	endif
      40.  00:4010                    < 	and		0xFC
      41.  00:4010                    < 	or		b
      42.  00:4010                    < 	if (n<=4)
      43.  00:4010                    < [n]	RRCA
      44.  00:4010                    < 	else
      45.  00:4010                    < [8-n] RLCA
      46.  00:4010                    < 	endif
      47.  00:4010                    < 	ld		(0FFFFh),a		; Expanded slot selected
      48.  00:4010                    < 	ld		b,a				; save for later	
      49.  00:4010                    < 	endmacro
      50.  00:4010                      		
      51.  00:4010                      
      52.  00:4010                      ; ------------------------------
      53.  00:4010                      ; SEARCH_SLOT
      54.  00:4010                      ; look for the slot of our rom
      55.  00:4010                      ; active in page 1
      56.  00:4010                      ; ------------------------------
      57.  00:4010                      
      58.  00:4010                      search_slot:
      59.  00:4010  CD 38 01            	call	RSLREG
      60.  00:4013  0F 0F               [2]	rrca
      61.  00:4015  E6 03               	and		3
      62.  00:4017  4F                  	ld		c,a
      63.  00:4018  06 00               	ld		b,0
      64.  00:401A  21 C1 FC            	ld		hl,EXPTBL
      65.  00:401D  09                  	add		hl,bc
      66.  00:401E  7E                  	ld		a,(hl)
      67.  00:401F  E6 80               	and		080h
      68.  00:4021  B1                  	or		c
      69.  00:4022  4F                  	ld		c,a
      70.  00:4023  23 23 23 23         [4]	inc		hl
      71.  00:4027  7E                  	ld		a,(hl)
      72.  00:4028  E6 0C               	and		0Ch
      73.  00:402A  B1                  	or		c
      74.  00:402B  32 00 CB            	ld		(slotvar),a
      75.  00:402E  C9                  	ret
      76.  00:402F                      	
      77.  00:402F                      ; ------------------------------
      78.  00:402F                      ; look for the slot of ram
      79.  00:402F                      ; active in page 3
      80.  00:402F                      ; ------------------------------
      81.  00:402F                      
      82.  00:402F                      search_slotram:
      83.  00:402F  F3                  	di
      84.  00:4030  CD 38 01            	call	RSLREG
      85.  00:4033  07 07               [2]	rlca
      86.  00:4035  E6 03               	and		3
      87.  00:4037  4F                  	ld		c,a
      88.  00:4038  06 00               	ld		b,0
      89.  00:403A  21 C1 FC            	ld		hl,EXPTBL
      90.  00:403D  09                  	add		hl,bc
      91.  00:403E  7E                  	ld		a,(hl)
      92.  00:403F  E6 80               	and		080h
      93.  00:4041  28 0D               	jr		z,search_slotram0
      94.  00:4043  B1                  	or		c
      95.  00:4044  4F                  	ld		c,a
      96.  00:4045  23 23 23 23         [4]	inc		hl
      97.  00:4049  7E                  	ld		a,(hl)
      98.  00:404A  07 07 07 07         [4]	rlca
      99.  00:404E  E6 0C               	and		0Ch
     100.  00:4050                      search_slotram0:
     101.  00:4050  B1                  	or		c
     102.  00:4051  32 01 CB            	ld		(slotram),a
     103.  00:4054  C9                  	ret
     104.  00:4055                      	
     105.  00:4055                      ; ------------------------------
     106.  00:4055                      ; SETROMPAGE0
     107.  00:4055                      ; Set the chart in
     108.  00:4055                      ; Page 0
     109.  00:4055                      ; -----------------------------
     110.  00:4055                      
     111.  00:4055                      setrompage0:
     112.  00:4055  3A 00 CB            	ld		a,(slotvar)
     113.  00:4058  C3 7C 40            	jp		setslotpage0
     114.  00:405B                      
     115.  00:405B                      setrampage0:
     116.  00:405B  3A 01 CB            	ld		a,(slotram)
     117.  00:405E  C3 7C 40            	jp		setslotpage0
     118.  00:4061                      
     119.  00:4061                      setrompage2:
     120.  00:4061  3A 00 CB            	ld		a,(slotvar)
     121.  00:4064  C3 F2 40            	jp		setslotpage2
     122.  00:4067                      
     123.  00:4067                      setrampage2:
     124.  00:4067  3A 01 CB            	ld		a,(slotram)
     125.  00:406A  C3 F2 40            	jp		setslotpage2
     126.  00:406D                      	
     127.  00:406D                      setrompage3:
     128.  00:406D  3A 00 CB            	ld		a,(slotvar)
     129.  00:4070  C3 39 41            	jp		setslotpage3
     130.  00:4073                      
     131.  00:4073                      setrampage3:
     132.  00:4073  3A 01 CB            	ld		a,(slotram)
     133.  00:4076  C3 39 41            	jp		setslotpage3
     134.  00:4079                      	
     135.  00:4079                      ; ------------------------------
     136.  00:4079                      ; RECBIOS
     137.  00:4079                      ; set the bios ROM
     138.  00:4079                      ; -------------------------------
     139.  00:4079                      recbios:
     140.  00:4079  3A C1 FC            	ld		a,(EXPTBL)
     141.  00:407C                      
     142.  00:407C                      ; ---------------------------
     143.  00:407C                      ; SETSLOTPAGE0
     144.  00:407C                      ; Set the slot passed in A
     145.  00:407C                      ; at page 0 in the Z80 address space
     146.  00:407C                      ; A: Format FxxxSSPP
     147.  00:407C                      ; ----------------------------
     148.  00:407C                      
     149.  00:407C                      setslotpage0:
     150.  00:407C  F3                  	di
     151.  00:407D  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     152.  00:407E  DB A8               	in		a,(0A8h)
     153.  00:4080  E6 FC               	and		0xFC
     154.  00:4082  57                  	ld		d,a					; D = Primary slot value
     155.  00:4083  78                  	ld		a,b
     156.  00:4084  E6 03               	and		3
     157.  00:4086  B2                  	or		d
     158.  00:4087  57                  	ld		d,a		; D = Final Value for primary slot
     159.  00:4088  78                  	ld		a,b		; Check if expanded
     160.  00:4089  CB 7F               	bit		7,a
     161.  00:408B  28 22               	jr		z,1f	; Not Expanded
     162.  00:408D                      	mainslot_setup	0
     162.  00:408D  E6 03             >  and  3
     162.  00:408F  0F 0F             > [2] rrca
     162.  00:4091  E6 C0             >  and  0xC0
     162.  00:4093  4F                >  ld  c,a
     162.  00:4094  7A                >  ld  a,d
     162.  00:4095  E6 3F             >  and  0x3F
     162.  00:4097  B1                >  or  c
     162.  00:4098  4F                >  ld  c,a
     162.  00:4099                    > 
     162.  00:4099  78                >  ld  a,b
     162.  00:409A  E6 0C             >  and  0x0C
     162.  00:409C  0F 0F             > [2] rrca
     162.  00:409E  E6 03             >  and  3
     162.  00:40A0  47                >  ld  b,a
     162.  00:40A1  79                >  ld  a,c
     162.  00:40A2  D3 A8             >  out  (0A8h),a
     162.  00:40A4  3A FF FF          >  ld  a,(0FFFFh)
     162.  00:40A7  2F                >  cpl
     162.  00:40A8                    >  if (n<=4)
     162.  00:40A8                    > [n] RLCA
     162.  00:40A8                    >  else
     162.  00:40A8                    ~ [8-n] RRCA
     162.  00:40A8                    ~  endif
     162.  00:40A8  E6 FC             >  and  0xFC
     162.  00:40AA  B0                >  or  b
     162.  00:40AB                    >  if (n<=4)
     162.  00:40AB                    > [n] RRCA
     162.  00:40AB                    >  else
     162.  00:40AB                    ~ [8-n] RLCA
     162.  00:40AB                    ~  endif
     162.  00:40AB  32 FF FF          >  ld  (0FFFFh),a
     162.  00:40AE  47                >  ld  b,a
     163.  00:40AF  7A                  1:	ld		a,d				; A = Final value
     164.  00:40B0  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     165.  00:40B2  C9                  	ret
     166.  00:40B3                      
     167.  00:40B3                      ; ---------------------------
     168.  00:40B3                      ; SETSLOTPAGE1
     169.  00:40B3                      ; Set the slot passed in A
     170.  00:40B3                      ; at page 1 in the Z80 address space
     171.  00:40B3                      ; A: Format FxxxSSPP
     172.  00:40B3                      ; ----------------------------
     173.  00:40B3                      
     174.  00:40B3                      setslotpage1:
     175.  00:40B3  F3                  	di
     176.  00:40B4  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     177.  00:40B5  DB A8               	in		a,(0A8h)
     178.  00:40B7  0F 0F               [2]	RRCA
     179.  00:40B9  E6 FC               	and		0xFC
     180.  00:40BB  57                  	ld		d,a					; D = Primary slot value
     181.  00:40BC  78                  	ld		a,b
     182.  00:40BD  E6 03               	and		3
     183.  00:40BF  B2                  	or		d
     184.  00:40C0  07 07               [2]	RLCA
     185.  00:40C2  57                  	ld		d,a		; D = Final Value for primary slot
     186.  00:40C3  78                  	ld		a,b		; Check if expanded
     187.  00:40C4  CB 7F               	bit		7,a
     188.  00:40C6  28 26               	jr		z,1f	; Not Expanded
     189.  00:40C8                      	mainslot_setup	6
     189.  00:40C8  E6 03             >  and  3
     189.  00:40CA  0F 0F             > [2] rrca
     189.  00:40CC  E6 C0             >  and  0xC0
     189.  00:40CE  4F                >  ld  c,a
     189.  00:40CF  7A                >  ld  a,d
     189.  00:40D0  E6 3F             >  and  0x3F
     189.  00:40D2  B1                >  or  c
     189.  00:40D3  4F                >  ld  c,a
     189.  00:40D4                    > 
     189.  00:40D4  78                >  ld  a,b
     189.  00:40D5  E6 0C             >  and  0x0C
     189.  00:40D7  0F 0F             > [2] rrca
     189.  00:40D9  E6 03             >  and  3
     189.  00:40DB  47                >  ld  b,a
     189.  00:40DC  79                >  ld  a,c
     189.  00:40DD  D3 A8             >  out  (0A8h),a
     189.  00:40DF  3A FF FF          >  ld  a,(0FFFFh)
     189.  00:40E2  2F                >  cpl
     189.  00:40E3                    >  if (n<=4)
     189.  00:40E3                    ~ [n] RLCA
     189.  00:40E3                    ~  else
     189.  00:40E3  0F 0F             > [8-n] RRCA
     189.  00:40E5                    >  endif
     189.  00:40E5  E6 FC             >  and  0xFC
     189.  00:40E7  B0                >  or  b
     189.  00:40E8                    >  if (n<=4)
     189.  00:40E8                    ~ [n] RRCA
     189.  00:40E8                    ~  else
     189.  00:40E8  07 07             > [8-n] RLCA
     189.  00:40EA                    >  endif
     189.  00:40EA  32 FF FF          >  ld  (0FFFFh),a
     189.  00:40ED  47                >  ld  b,a
     190.  00:40EE  7A                  1:	ld		a,d				; A = Final value
     191.  00:40EF  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     192.  00:40F1  C9                  	ret
     193.  00:40F2                      	
     194.  00:40F2                      
     195.  00:40F2                      ; ---------------------------
     196.  00:40F2                      ; SETSLOTPAGE2
     197.  00:40F2                      ; Set the slot passed in A
     198.  00:40F2                      ; at page 2 in the Z80 address space
     199.  00:40F2                      ; A: Format FxxxSSPP
     200.  00:40F2                      ; ----------------------------
     201.  00:40F2                      
     202.  00:40F2                      setslotpage2:
     203.  00:40F2  F3                  	di
     204.  00:40F3  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     205.  00:40F4  DB A8               	in		a,(0A8h)
     206.  00:40F6  07 07 07 07         [4]	RLCA
     207.  00:40FA  E6 FC               	and		0xFC
     208.  00:40FC  57                  	ld		d,a					; D = Primary slot value
     209.  00:40FD  78                  	ld		a,b
     210.  00:40FE  E6 03               	and		3
     211.  00:4100  B2                  	or		d
     212.  00:4101  0F 0F 0F 0F         [4]	RRCA
     213.  00:4105  57                  	ld		d,a		; D = Final Value for primary slot
     214.  00:4106  78                  	ld		a,b		; Check if expanded
     215.  00:4107  CB 7F               	bit		7,a
     216.  00:4109  28 2A               	jr		z,1f	; Not Expanded
     217.  00:410B                      	mainslot_setup	4
     217.  00:410B  E6 03             >  and  3
     217.  00:410D  0F 0F             > [2] rrca
     217.  00:410F  E6 C0             >  and  0xC0
     217.  00:4111  4F                >  ld  c,a
     217.  00:4112  7A                >  ld  a,d
     217.  00:4113  E6 3F             >  and  0x3F
     217.  00:4115  B1                >  or  c
     217.  00:4116  4F                >  ld  c,a
     217.  00:4117                    > 
     217.  00:4117  78                >  ld  a,b
     217.  00:4118  E6 0C             >  and  0x0C
     217.  00:411A  0F 0F             > [2] rrca
     217.  00:411C  E6 03             >  and  3
     217.  00:411E  47                >  ld  b,a
     217.  00:411F  79                >  ld  a,c
     217.  00:4120  D3 A8             >  out  (0A8h),a
     217.  00:4122  3A FF FF          >  ld  a,(0FFFFh)
     217.  00:4125  2F                >  cpl
     217.  00:4126                    >  if (n<=4)
     217.  00:4126  07 07 07 07       > [n] RLCA
     217.  00:412A                    >  else
     217.  00:412A                    ~ [8-n] RRCA
     217.  00:412A                    ~  endif
     217.  00:412A  E6 FC             >  and  0xFC
     217.  00:412C  B0                >  or  b
     217.  00:412D                    >  if (n<=4)
     217.  00:412D  0F 0F 0F 0F       > [n] RRCA
     217.  00:4131                    >  else
     217.  00:4131                    ~ [8-n] RLCA
     217.  00:4131                    ~  endif
     217.  00:4131  32 FF FF          >  ld  (0FFFFh),a
     217.  00:4134  47                >  ld  b,a
     218.  00:4135  7A                  1:	ld		a,d				; A = Final value
     219.  00:4136  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     220.  00:4138  C9                  	ret
     221.  00:4139                      	
     222.  00:4139                      ; ---------------------------
     223.  00:4139                      ; SETSLOTPAGE3
     224.  00:4139                      ; Set the slot passed in A
     225.  00:4139                      ; at page 3 in the Z80 address space
     226.  00:4139                      ; A: Format FxxxSSPP
     227.  00:4139                      ; ----------------------------
     228.  00:4139                      	
     229.  00:4139                      setslotpage3:
     230.  00:4139  F3                  	di
     231.  00:413A  47                  	ld		b,a					; B = Slot param in FxxxSSPP format
     232.  00:413B  DB A8               	in		a,(0A8h)
     233.  00:413D  07 07               [2]	RLCA
     234.  00:413F  E6 FC               	and		0xFC
     235.  00:4141  57                  	ld		d,a					; D = Primary slot value
     236.  00:4142  78                  	ld		a,b
     237.  00:4143  E6 03               	and		3
     238.  00:4145  B2                  	or		d
     239.  00:4146  0F 0F               [2]	RRCA	
     240.  00:4148  57                  	ld		d,a		; D = Final Value for primary slot
     241.  00:4149  78                  	ld		a,b		; Check if expanded
     242.  00:414A  CB 7F               	bit		7,a
     243.  00:414C  28 26               	jr		z,1f	; Not Expanded
     244.  00:414E                      	mainslot_setup	2
     244.  00:414E  E6 03             >  and  3
     244.  00:4150  0F 0F             > [2] rrca
     244.  00:4152  E6 C0             >  and  0xC0
     244.  00:4154  4F                >  ld  c,a
     244.  00:4155  7A                >  ld  a,d
     244.  00:4156  E6 3F             >  and  0x3F
     244.  00:4158  B1                >  or  c
     244.  00:4159  4F                >  ld  c,a
     244.  00:415A                    > 
     244.  00:415A  78                >  ld  a,b
     244.  00:415B  E6 0C             >  and  0x0C
     244.  00:415D  0F 0F             > [2] rrca
     244.  00:415F  E6 03             >  and  3
     244.  00:4161  47                >  ld  b,a
     244.  00:4162  79                >  ld  a,c
     244.  00:4163  D3 A8             >  out  (0A8h),a
     244.  00:4165  3A FF FF          >  ld  a,(0FFFFh)
     244.  00:4168  2F                >  cpl
     244.  00:4169                    >  if (n<=4)
     244.  00:4169  07 07             > [n] RLCA
     244.  00:416B                    >  else
     244.  00:416B                    ~ [8-n] RRCA
     244.  00:416B                    ~  endif
     244.  00:416B  E6 FC             >  and  0xFC
     244.  00:416D  B0                >  or  b
     244.  00:416E                    >  if (n<=4)
     244.  00:416E  0F 0F             > [n] RRCA
     244.  00:4170                    >  else
     244.  00:4170                    ~ [8-n] RLCA
     244.  00:4170                    ~  endif
     244.  00:4170  32 FF FF          >  ld  (0FFFFh),a
     244.  00:4173  47                >  ld  b,a
     245.  00:4174  7A                  1:	ld		a,d				; A = Final value
     246.  00:4175  D3 A8               	out		(0A8h),a		; Slot Final. Ram, rom c, rom c, Main
     247.  00:4177  C9                  	ret
     248.  00:4178                      
     249.  00:4178                      	
      57   00:4178                      		include vdpio.asm
       1.  00:4178                      
       2.  00:4178                             
       3.  00:4178                      ;-------------------------------------
       4.  00:4178                      _cls:		
       5.  00:4178  0E 00               		ld		c,0
       6.  00:417A  51                  		ld		d,c
       7.  00:417B  59                  		ld		e,c
       8.  00:417C  F3                  		di
       9.  00:417D  CD A5 41            		call	_vdpsetvramwr
      10.  00:4180  41                  		ld		b,c
      11.  00:4181  1E 01               		ld		e,1
      12.  00:4183  AF                  1:		xor		a
      13.  00:4184  D3 98               		out		(0x98),a
      14.  00:4186  ED A1                       cpi
      15.  00:4188  EA 83 41                    jp   	pe,1b
      16.  00:418B  1D                  		dec	e
      17.  00:418C  C2 83 41            		jp		nz,1b
      18.  00:418F  C9                  		ret
      19.  00:4190                      _cls0:
      20.  00:4190  0E 00               		ld		c,0
      21.  00:4192  51                  		ld		d,c
      22.  00:4193  59                  		ld		e,c
      23.  00:4194  F3                  		di
      24.  00:4195  CD A5 41            		call	_vdpsetvramwr
      25.  00:4198  FB                  		ei
      26.  00:4199  01 00 B0            		ld		bc,mapHeight*16*256
      27.  00:419C  AF                  		xor		a
      28.  00:419D  D3 98               1:		out		(0x98),a
      29.  00:419F  ED A1                       cpi
      30.  00:41A1  EA 9D 41                    jp   	pe,1b
      31.  00:41A4  C9                  		ret
      32.  00:41A5                      		
      33.  00:41A5                      ;-------------------------------------
      34.  00:41A5                      		
      35.  00:41A5  (00:0099)           vdpport1 equ 0x99
      36.  00:41A5  (00:009A)           vdpport2 equ 0x9A
      37.  00:41A5                      
      38.  00:41A5                      ; levelcolors:
      39.  00:41A5                      	;  incbin "palette.bin"
      40.  00:41A5                      
      41.  00:41A5                      ; _SetPalet:   
      42.  00:41A5                      		; di
      43.  00:41A5                      		; xor a 			;Set pointer to zero.
      44.  00:41A5                      		; out (vdpport1),a        
      45.  00:41A5                      		; ld  a,16 | 010000000B
      46.  00:41A5                      		; out (vdpport1),a
      47.  00:41A5                      
      48.  00:41A5                      		; ld  hl,levelcolors
      49.  00:41A5                      		; ld bc,vdpport2+32*256
      50.  00:41A5                      		; otir
      51.  00:41A5                      		; ei
      52.  00:41A5                      		; ret
      53.  00:41A5                      
      54.  00:41A5                      ;Set VDP for writing at address CDE (17-bit) 
      55.  00:41A5                      
      56.  00:41A5                      _vdpsetvramwr:
      57.  00:41A5  79                  		ld a,c
      58.  00:41A6                      _vdpsetvramwr2:
      59.  00:41A6                      ;Set VDP for writing at address ADE (17-bit) ;
      60.  00:41A6  CB 02               		rlc d
      61.  00:41A8  17                  		rla
      62.  00:41A9  CB 02               		rlc d
      63.  00:41AB  17                  		rla
      64.  00:41AC  CB 3A               		srl d ; primo shift, il secondo dopo la out
      65.  00:41AE                      
      66.  00:41AE  D3 99               		out (0x99),a ;set bits 14-16
      67.  00:41B0  3E 8E               		ld a,14+128
      68.  00:41B2  D3 99               		out (0x99),a
      69.  00:41B4                      
      70.  00:41B4  CB 3A               		srl d ; secondo shift.     
      71.  00:41B6                      _vdpsetvramwr14
      72.  00:41B6  7B                  		ld a,e ;set bits 0-7
      73.  00:41B7  D3 99               		out (0x99),a
      74.  00:41B9  7A                  		ld a,d ;set bits 8-13
      75.  00:41BA  F6 40               		or 0x40 ; + write access
      76.  00:41BC  D3 99               		out (0x99),a
      77.  00:41BE  C9                  		ret
      78.  00:41BF                      	
      79.  00:41BF                      ;Set VDP port #98 to start reading at address CDE (17-bit) ;
      80.  00:41BF                      
      81.  00:41BF                      _vdpsetvramrd:
      82.  00:41BF  79                  		ld a,c
      83.  00:41C0                      ;Set VDP port #98 to start reading at address ADE (17-bit) ;
      84.  00:41C0  CB 02               		rlc d
      85.  00:41C2  17                  		rla
      86.  00:41C3  CB 02               		rlc d
      87.  00:41C5  17                  		rla
      88.  00:41C6  CB 3A               		srl d 			; primo shift, il secondo dopo la out
      89.  00:41C8                      
      90.  00:41C8  D3 99               		out (0x99),a 	; set bits 14-16
      91.  00:41CA  3E 8E               		ld a,14+128
      92.  00:41CC  D3 99               		out (0x99),a
      93.  00:41CE                      
      94.  00:41CE  CB 3A               		srl d 	; secondo shift.            
      95.  00:41D0  7B                  		ld a,e 	; set bits 0-7
      96.  00:41D1  D3 99               		out (0x99),a
      97.  00:41D3  7A                  		ld a,d 	; set bits 8-13
      98.  00:41D4  E6 3F               		and 0x3F
      99.  00:41D6  D3 99               		out (0x99),a
     100.  00:41D8  C9                  		ret
     101.  00:41D9                      
     102.  00:41D9                      ;Display page E in screen 5
     103.  00:41D9                      _setpage:
     104.  00:41D9  7B                  	ld a,e
     105.  00:41DA  87 87 87 87 87      [5]	add a,a ;x32
     106.  00:41DF  F6 1F               	or	 00011111B
     107.  00:41E1  F3                  	di
     108.  00:41E2  D3 99               	out (0x99),a
     109.  00:41E4  3E 82               	ld a,2+128
     110.  00:41E6  D3 99               	out (0x99),a
     111.  00:41E8  FB                  	ei            
     112.  00:41E9  C9                  	ret
     113.  00:41EA                      
     114.  00:41EA  (00:005F)           chgmod        equ     0x005f      ;change graphic mode
     115.  00:41EA  (00:000C)           RDSLT         equ     0x000c      ;read address HL in slot A
     116.  00:41EA  (00:0156)           KILBUF        equ     0x0156      ;clear keyboard buffer
     117.  00:41EA                      
     118.  00:41EA                      set_scr:
     119.  00:41EA                      	
     120.  00:41EA                      	// sprites 16x16
     121.  00:41EA  3A E0 F3            	ld		a,(RG1SAV)
     122.  00:41ED  F6 02               	or		00000010B
     123.  00:41EF  32 E0 F3            	ld		(RG1SAV),a
     124.  00:41F2                      
     125.  00:41F2                      	// enable sprites + TP
     126.  00:41F2  3A E7 FF            	ld		a,(RG8SAV)
     127.  00:41F5  F6 22               	or		00100010B
     128.  00:41F7  32 E7 FF            	ld		(RG8SAV),a
     129.  00:41FA                      		
     130.  00:41FA                      	// Set @50Hz (only PAL is supported)
     131.  00:41FA  3A 02 CB            	ld	a,(SEL_NTSC)
     132.  00:41FD  A7                  	and 	a
     133.  00:41FE  20 07               	jr		nz,1f
     134.  00:4200                      	
     135.  00:4200  3A E8 FF            	ld		a,(RG9SAV)		
     136.  00:4203  F6 02               	or		00000010B		; PAL
     137.  00:4205  18 05               	jr	2f
     138.  00:4207                      1:		
     139.  00:4207  3A E8 FF            	ld		a,(RG9SAV)		
     140.  00:420A  E6 FD               	and		11111101B		; NTSC
     141.  00:420C  32 E8 FF            2:	ld		(RG9SAV),a
     142.  00:420F                      
     143.  00:420F  3E 08               	ld  	a,8
     144.  00:4211  CD 5F 00            	call		chgmod
     145.  00:4214                      
     146.  00:4214                      	// border color
     147.  00:4214  AF                  	xor		a
     148.  00:4215  32 E6 F3            	ld		(RG7SAV),a
     149.  00:4218  D3 99               	out		(0x99),a
     150.  00:421A  3E 87               	ld		a,7+128
     151.  00:421C  D3 99               	out		(0x99),a
     152.  00:421E  C9                  	ret
     153.  00:421F                      
     154.  00:421F                      
     155.  00:421F                      
     156.  00:421F                      _waitvdp:
     157.  00:421F  3E 02               	ld a,2
     158.  00:4221  D3 99               	out (0x99),a
     159.  00:4223  3E 8F               	ld a, 128+15
     160.  00:4225  D3 99               	out (0x99),a
     161.  00:4227  DB 99               1:  in	a,(0x99)
     162.  00:4229  0F                  	rrca
     163.  00:422A  DA 27 42            	jp c,1b
     164.  00:422D                      
     165.  00:422D  C9                  	ret
     166.  00:422E                      
     167.  00:422E                      ; .inf:
     168.  00:422E                      	; ld	a,r			; random colour
     169.  00:422E                      	; out		(0x99),a
     170.  00:422E                      	; ld		a,7+128
     171.  00:422E                      	; out		(0x99),a
     172.  00:422E                      	; jp	1b
     173.  00:422E                      	
      58   00:422E                      		include turbo.asm
       1.  00:422E                      
       2.  00:422E  (00:000C)           rdslt	equ	0x000c
       3.  00:422E  (00:001C)           CALSLT	equ	0x001c
       4.  00:422E  (00:0180)           chgcpu	equ	0x0180	; change cpu mode
       5.  00:422E  (00:FCC1)           exttbl	equ	0xfcc1	; main rom slot
       6.  00:422E                      
       7.  00:422E                      ; Switch to r800 rom mode
       8.  00:422E                      	
       9.  00:422E                      _set_r800:
      10.  00:422E  DB AA               		in	a,(0aah)
      11.  00:4230  E6 F0               		and 011110000B			; upper 4 bits contain info to preserve
      12.  00:4232  F6 06               		or	6
      13.  00:4234  D3 AA               		out (0aah),a
      14.  00:4236  DB A9               		in	a,(0a9h)
      15.  00:4238  6F                  		ld	l,a
      16.  00:4239                      
      17.  00:4239  3A 2D 00            		ld	a,(0x002d)
      18.  00:423C  FE 03               		cp	3					; this is a TR
      19.  00:423E  7D                  		ld	a,l
      20.  00:423F  28 0E               		jr	z,set_turbo_tr
      21.  00:4241                      								; this is anything else
      22.  00:4241  E6 02               		and	0x02				; CTR
      23.  00:4243  C0                  		ret	nz					; if NZ, CTR is not pressed set the turbo
      24.  00:4244                      
      25.  00:4244  3A 80 01            		ld	A,(chgcpu)
      26.  00:4247  FE C3               		cp	0C3h
      27.  00:4249  3E 81               		ld	a,81h              ; R800 ROM mode or any other turbo
      28.  00:424B  CC 80 01            		call	z,chgcpu
      29.  00:424E  C9                  		ret
      30.  00:424F                      
      31.  00:424F                      set_turbo_tr
      32.  00:424F  E6 02               		and	0x02				; CTR
      33.  00:4251  C8                  		ret	z					; if Z, CTR is pressed -> do not set the turbo
      34.  00:4252  3E 81               		ld	a,81h              	; R800 ROM mode
      35.  00:4254  C3 80 01            		jp chgcpu
      36.  00:4257                      		
      59   00:4257                      		include isr.asm
       1.  00:4257                      
       2.  00:4257                      		; include "header.asm"
       3.  00:4257                      		
       4.  00:4257                      // MSX 1 
       5.  00:4257  (00:F3DF)           RG0SAV  equ 0xF3DF  
       6.  00:4257  (00:F3E0)           RG1SAV  equ 0xF3E0  
       7.  00:4257  (00:F3E1)           RG2SAV  equ 0xF3E1
       8.  00:4257  (00:F3E2)           RG3SAV  equ 0xF3E2
       9.  00:4257  (00:F3E3)           RG4SAV  equ 0xF3E3
      10.  00:4257  (00:F3E4)           RG5SAV  equ 0xF3E4
      11.  00:4257  (00:F3E5)           RG6SAV  equ 0xF3E5
      12.  00:4257  (00:F3E6)           RG7SAV  equ 0xF3E6
      13.  00:4257                      // MSX 2
      14.  00:4257  (00:FFE7)           RG8SAV  equ 0xFFE7 
      15.  00:4257  (00:FFE8)           RG9SAV  equ 0xFFE8 
      16.  00:4257  (00:FFE9)           RG10SAV equ 0xFFE9 
      17.  00:4257  (00:FFEA)           RG11SAV equ 0xFFEA 
      18.  00:4257  (00:FFEB)           RG12SAV equ 0xFFEB 
      19.  00:4257  (00:FFEC)           RG13SAV equ 0xFFEC 
      20.  00:4257  (00:FFED)           RG14SAV equ 0xFFED 
      21.  00:4257  (00:FFEE)           RG15SAV equ 0xFFEE 
      22.  00:4257  (00:FFEF)           RG16SAV equ 0xFFEF 
      23.  00:4257  (00:FFF0)           RG17SAV equ 0xFFF0 
      24.  00:4257  (00:FFF1)           RG18SAV equ 0xFFF1 
      25.  00:4257  (00:FFF2)           RG19SAV equ 0xFFF2 
      26.  00:4257  (00:FFF3)           RG20SAV equ 0xFFF3 
      27.  00:4257  (00:FFF4)           RG21SAV equ 0xFFF4 
      28.  00:4257  (00:FFF5)           RG22SAV equ 0xFFF5 
      29.  00:4257  (00:FFF7)           RG23SAV equ 0xFFF7 
      30.  00:4257                      
      31.  00:4257  (00:FC9E)           _jiffy: equ 0xFC9E 
      32.  00:4257                      
      33.  00:4257                      _fake_isr
      34.  00:4257  F5                  		push	af
      35.  00:4258  AF                  		xor	a 			; read S#0
      36.  00:4259  D3 99               		out (0x99),a
      37.  00:425B  3E 8F               		ld a,128+15
      38.  00:425D  D3 99               		out (0x99),a
      39.  00:425F                      
      40.  00:425F                      		; ld	a,(replay_mode)
      41.  00:425F                      		; and	a
      42.  00:425F                      		; jr	z,1f
      43.  00:425F                      		
      44.  00:425F  E5                  		push   hl         
      45.  00:4260  D5                  		push   de         
      46.  00:4261  C5                  		push   bc         
      47.  00:4262  D9                  		exx               
      48.  00:4263  08                  		ex     af,af'     
      49.  00:4264  E5                  		push   hl         
      50.  00:4265  D5                  		push   de         
      51.  00:4266  C5                  		push   bc         
      52.  00:4267  F5                  		push   af         
      53.  00:4268  FD E5               		push   iy         
      54.  00:426A  DD E5               		push   ix         
      55.  00:426C                      
      56.  00:426C                      
      57.  00:426C                      		
      58.  00:426C  DD E1               		pop    ix         
      59.  00:426E  FD E1               		pop    iy         
      60.  00:4270  F1                  		pop    af         
      61.  00:4271  C1                  		pop    bc         
      62.  00:4272  D1                  		pop    de         
      63.  00:4273  E1                  		pop    hl         
      64.  00:4274  08                  		ex     af,af'     
      65.  00:4275  D9                  		exx               
      66.  00:4276  C1                  		pop    bc         
      67.  00:4277  D1                  		pop    de         
      68.  00:4278  E1                  		pop    hl         
      69.  00:4279                      
      70.  00:4279  DB 99               1:		in	a,(0x99)
      71.  00:427B  F1                  		pop	af
      72.  00:427C  FB                  		ei
      73.  00:427D  C9                  		ret
      74.  00:427E                      	
      75.  00:427E                      _isrinit:
      76.  00:427E  F3                  		di
      77.  00:427F  21 38 00            		ld	hl,0x0038
      78.  00:4282  36 C3               		ld	(hl),0xC3
      79.  00:4284  23                  		inc	hl
      80.  00:4285  36 BE               		ld	(hl),low _scroll
      81.  00:4287  23                  		inc	hl
      82.  00:4288  36 42               		ld	(hl),high _scroll
      83.  00:428A                      
      84.  00:428A                      ; set interrupt line
      85.  00:428A  3E A7               		LD    A,YSIZE-1
      86.  00:428C  D3 99               		out (0x99),a
      87.  00:428E  3E 93               		LD    A,19+128
      88.  00:4290  D3 99               		out (0x99),a
      89.  00:4292                      	
      90.  00:4292                      ; enable line interrupt
      91.  00:4292  3A DF F3            		LD    A,(RG0SAV)
      92.  00:4295  F6 10               		OR    00010000B
      93.  00:4297  32 DF F3            		LD    (RG0SAV),A
      94.  00:429A  D3 99               		out (0x99),a
      95.  00:429C  3E 80               		LD    A,0+128
      96.  00:429E  D3 99               		out (0x99),a
      97.  00:42A0  FB                  		ei
      98.  00:42A1  C9                  		ret
      99.  00:42A2                      	
     100.  00:42A2                      _intreset:
     101.  00:42A2  F3                  		di
     102.  00:42A3  21 38 00            		ld	hl,0x0038
     103.  00:42A6  36 C3               		ld	(hl),0xC3
     104.  00:42A8  23                  		inc	hl
     105.  00:42A9  36 57               		ld	(hl),low _fake_isr
     106.  00:42AB  23                  		inc	hl
     107.  00:42AC  36 42               		ld	(hl),high _fake_isr
     108.  00:42AE                      
     109.  00:42AE                      ; disable line interrupt		
     110.  00:42AE  3A DF F3            		LD    A,(RG0SAV)
     111.  00:42B1  E6 EF               		and    11101111B
     112.  00:42B3  32 DF F3            		LD    (RG0SAV),A
     113.  00:42B6  D3 99               		out (0x99),a
     114.  00:42B8  3E 80               		LD    A,0+128
     115.  00:42BA  D3 99               		out (0x99),a
     116.  00:42BC  FB                  		ei
     117.  00:42BD  C9                  		ret
     118.  00:42BE                      	
     119.  00:42BE                      ;;;;;;;;;;;;;;;;;;;;;;
     120.  00:42BE                      ; actual ISR handler
     121.  00:42BE                      ;;;;;;;;;;;;;;;;;;;;;;
     122.  00:42BE                      
     123.  00:42BE                      _scroll:
     124.  00:42BE  F5                  		push	af
     125.  00:42BF                      		
     126.  00:42BF  3E 01               		ld a,1 			; read S#1
     127.  00:42C1  D3 99               		out (0x99),a
     128.  00:42C3  3E 8F               		ld a,128+15
     129.  00:42C5  D3 99               		out (0x99),a
     130.  00:42C7                      		 
     131.  00:42C7  DB 99               		in	a,(0x99)
     132.  00:42C9  1F                  		rra
     133.  00:42CA  DA ED 42            		jp	c,lint	
     134.  00:42CD                      
     135.  00:42CD  AF                  		xor	a 			; read S#0
     136.  00:42CE  D3 99               		out (0x99),a
     137.  00:42D0  3E 8F               		ld a,128+15
     138.  00:42D2  D3 99               		out (0x99),a
     139.  00:42D4                      		 
     140.  00:42D4  DB 99               		in	a,(0x99)
     141.  00:42D6  07                  		rlca
     142.  00:42D7  DA 49 43            		jp	c,vblank
     143.  00:42DA                      		
     144.  00:42DA  F1                  		pop	af			; none of them (?)
     145.  00:42DB  FB                  		ei
     146.  00:42DC  C9                  		ret
     147.  00:42DD                      	
     148.  00:42DD                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
     149.  00:42DD                      ; manage score bar at YSIZE
     150.  00:42DD                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
     151.  00:42DD                      waitHBLANK
     152.  00:42DD  3E 02               		ld a,2 				; read S#2
     153.  00:42DF  D3 99               		out (0x99),a
     154.  00:42E1  3E 8F               		ld a,128+15
     155.  00:42E3  D3 99               		out (0x99),a		; poll for HBLANK
     156.  00:42E5                      		 
     157.  00:42E5                      ; 1:	in	a,(0x99)		; we are in HBLANK already, so wait until end of HBLANK
     158.  00:42E5                      ; 		and	0x20
     159.  00:42E5                      ; 		jp	nz,1b			
     160.  00:42E5                      
     161.  00:42E5  DB 99               2:		in	a,(0x99)		; wait until end of the active area
     162.  00:42E7  E6 20               		and	0x20
     163.  00:42E9  CA E5 42            		jp	z,2b
     164.  00:42EC  C9                  		ret
     165.  00:42ED                      	
     166.  00:42ED                      lint:	
     167.  00:42ED                      		; call	waitHBLANK
     168.  00:42ED                      		; now we are at the start of HBLANK
     169.  00:42ED                      	
     170.  00:42ED                      		; ld	a,(RG1SAV)
     171.  00:42ED                      		; and	010111111B			; disable screen
     172.  00:42ED                      		; ld	(RG1SAV),a
     173.  00:42ED                      		; out	(0x99),a
     174.  00:42ED                      		; ld	a,1+128
     175.  00:42ED                      		; out	(0x99),a
     176.  00:42ED                      
     177.  00:42ED                      
     178.  00:42ED  3E 1F               		ld a,00011111B		; 0XX11111B
     179.  00:42EF  D3 99               		out (0x99),a
     180.  00:42F1  3E 82               		ld a,2+128			; R#2 
     181.  00:42F3  D3 99               		out (0x99),a		; score bar in page 0
     182.  00:42F5                      
     183.  00:42F5  3E 0A               		LD    A,mapHeight*16-(YSIZE-2)	; SCROLL DOWN
     184.  00:42F7  D3 99               		out (0x99),a
     185.  00:42F9  3E 97               		LD    A,23+128
     186.  00:42FB  D3 99               		out (0x99),a
     187.  00:42FD                      
     188.  00:42FD  AF                  		xor		a
     189.  00:42FE  D3 99               		out	(099h),a
     190.  00:4300  3E 92               		ld	a,18+128
     191.  00:4302  D3 99               		out	(099h),a		; set adjust 0,0
     192.  00:4304                      
     193.  00:4304                      
     194.  00:4304  3A E7 FF            		ld	a,(RG8SAV)
     195.  00:4307  F6 02               		or	000000010B		; disable sprites
     196.  00:4309  32 E7 FF            		ld	(RG8SAV),a
     197.  00:430C  D3 99               		out	(0x99),a
     198.  00:430E  3E 88               		ld	a,8+128
     199.  00:4310  D3 99               		out	(0x99),a
     200.  00:4312                      
     201.  00:4312                      		; call	waitHBLANK
     202.  00:4312                      		
     203.  00:4312                      		; ld	a,(RG1SAV)
     204.  00:4312                      		; or 	01000010B		; enable screen
     205.  00:4312                      		; ld	(RG1SAV),a
     206.  00:4312                      		; out	(0x99),a
     207.  00:4312                      		; ld	a,1+128
     208.  00:4312                      		; out	(0x99),a
     209.  00:4312                      	
     210.  00:4312  E5                  		push   hl         
     211.  00:4313  D5                  		push   de         
     212.  00:4314  C5                  		push   bc         
     213.  00:4315  D9                  		exx               
     214.  00:4316  08                  		ex     af,af'     
     215.  00:4317  E5                  		push   hl         
     216.  00:4318  D5                  		push   de         
     217.  00:4319  C5                  		push   bc         
     218.  00:431A  F5                  		push   af         
     219.  00:431B  FD E5               		push   iy         
     220.  00:431D  DD E5               		push   ix         
     221.  00:431F                      
     222.  00:431F                      		
     223.  00:431F  21 2F 43            		ld	hl,.exit
     224.  00:4322  E5                  		push	hl
     225.  00:4323  3A 43 CB            		ld		a,(dxmap)
     226.  00:4326  CB 07               		rlc a
     227.  00:4328                      
     228.  00:4328  D2 73 43            		jp	nc,_blank_line_lft		; >0 == dx
     229.  00:432B  DA 79 43            		jp	 c,_blank_line_rgt		; <0 == sx
     230.  00:432E  E1                  1:		pop	hl
     231.  00:432F                      .exit:
     232.  00:432F                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     233.  00:432F                      		; ld		a,00001000B
     234.  00:432F                      		; out		(0x99),a
     235.  00:432F                      		; ld		a,7+128
     236.  00:432F                      		; out		(0x99),a
     237.  00:432F                      		
     238.  00:432F                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     239.  00:432F  CD 55 64            		call	test_star
     240.  00:4332                      
     241.  00:4332  AF                  		xor		a
     242.  00:4333  D3 99               		out		(0x99),a
     243.  00:4335  3E 87               		ld		a,7+128
     244.  00:4337  D3 99               		out		(0x99),a
     245.  00:4339                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     246.  00:4339                      		
     247.  00:4339  DD E1               		pop    ix         
     248.  00:433B  FD E1               		pop    iy         
     249.  00:433D  F1                  		pop    af         
     250.  00:433E  C1                  		pop    bc         
     251.  00:433F  D1                  		pop    de         
     252.  00:4340  E1                  		pop    hl         
     253.  00:4341  08                  		ex     af,af'     
     254.  00:4342  D9                  		exx               
     255.  00:4343  C1                  		pop    bc         
     256.  00:4344  D1                  		pop    de         
     257.  00:4345  E1                  		pop    hl         
     258.  00:4346                      
     259.  00:4346  F1                  		pop		af
     260.  00:4347  FB                  		ei
     261.  00:4348  C9                  		ret
     262.  00:4349                      
     263.  00:4349                      ;-------------------------------------		
     264.  00:4349                      
     265.  00:4349  (00:0000)           border_color	equ 	0;	00100101B
     266.  00:4349                      		
     267.  00:4349                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
     268.  00:4349                      ;   manage normal vblank routine
     269.  00:4349                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
     270.  00:4349                      
     271.  00:4349                      vblank:
     272.  00:4349  CD 13 44            		call	activate_window	
     273.  00:434C                      
     274.  00:434C  E5                  		push   hl         
     275.  00:434D  D5                  		push   de         
     276.  00:434E  C5                  		push   bc         
     277.  00:434F  D9                  		exx               
     278.  00:4350  08                  		ex     af,af'     
     279.  00:4351  E5                  		push   hl         
     280.  00:4352  D5                  		push   de         
     281.  00:4353  C5                  		push   bc         
     282.  00:4354  F5                  		push   af         
     283.  00:4355  FD E5               		push   iy         
     284.  00:4357  DD E5               		push   ix         
     285.  00:4359                      
     286.  00:4359                      		; ld	a,00011100B		; red
     287.  00:4359                      		; out		(0x99),a
     288.  00:4359                      		; ld		a,7+128
     289.  00:4359                      		; out		(0x99),a
     290.  00:4359                      
     291.  00:4359  CD 52 44            		call	changedir
     292.  00:435C                      				
     293.  00:435C  2A 9E FC            		ld	hl,(_jiffy)
     294.  00:435F  23                  		inc	hl
     295.  00:4360  22 9E FC            		ld	(_jiffy),hl
     296.  00:4363                      				
     297.  00:4363                      		; ld	a,00011100B		; red
     298.  00:4363                      		; out	(0x99),a
     299.  00:4363                      		; ld	a,7+128
     300.  00:4363                      		; out	(0x99),a
     301.  00:4363                      		
     302.  00:4363                      
     303.  00:4363                      		; xor		a		; black
     304.  00:4363                      		; out	(0x99),a
     305.  00:4363                      		; ld	a,7+128
     306.  00:4363                      		; out	(0x99),a
     307.  00:4363                      	
     308.  00:4363  DD E1               		pop    ix         
     309.  00:4365  FD E1               		pop    iy         
     310.  00:4367  F1                  		pop    af         
     311.  00:4368  C1                  		pop    bc         
     312.  00:4369  D1                  		pop    de         
     313.  00:436A  E1                  		pop    hl         
     314.  00:436B  08                  		ex     af,af'     
     315.  00:436C  D9                  		exx               
     316.  00:436D  C1                  		pop    bc         
     317.  00:436E  D1                  		pop    de         
     318.  00:436F  E1                  		pop    hl         
     319.  00:4370                      
     320.  00:4370  F1                  		pop		af
     321.  00:4371  FB                  		ei
     322.  00:4372  C9                  		ret
     323.  00:4373                      ;-------------------------------------
     324.  00:4373                      ;-------------------------------------
     325.  00:4373                      
     326.  00:4373                      _blank_line_lft:
     327.  00:4373                      		; ld	a,00000111B		; blue
     328.  00:4373                      		; out	(0x99),a
     329.  00:4373                      		; ld	a,7+128
     330.  00:4373                      		; out	(0x99),a
     331.  00:4373                      
     332.  00:4373  1E 00               		ld	e,0
     333.  00:4375  CD 3C 56            		call	blank_line
     334.  00:4378                      
     335.  00:4378                      		
     336.  00:4378                      		
     337.  00:4378                      		; xor	a
     338.  00:4378                      		; out	(0x99),a
     339.  00:4378                      		; ld	a,7+128
     340.  00:4378                      		; out	(0x99),a
     341.  00:4378  C9                  		ret
     342.  00:4379                      
     343.  00:4379                      ;-------------------------------------	
     344.  00:4379                      
     345.  00:4379                      _blank_line_rgt
     346.  00:4379                      		; ld	a,00000111B		; blue
     347.  00:4379                      		; out	(0x99),a
     348.  00:4379                      		; ld	a,7+128
     349.  00:4379                      		; out	(0x99),a
     350.  00:4379                      
     351.  00:4379  1E F0               		ld	e,240
     352.  00:437B  CD 3C 56            		call	blank_line
     353.  00:437E                      
     354.  00:437E                      		; xor	a
     355.  00:437E                      		; out	(0x99),a
     356.  00:437E                      		; ld	a,7+128
     357.  00:437E                      		; out	(0x99),a
     358.  00:437E  C9                  		ret
     359.  00:437F                      		
     360.  00:437F                      ;-------------------------------------	
     361.  00:437F                      		
     362.  00:437F                      inc_xoffset
     363.  00:437F  CD 80 56            		call	plot_line_rgt1
     364.  00:4382  CD 8B 43            		call	.movex
     365.  00:4385  CD 8C 56            		call	plot_line_rgt2
     366.  00:4388                      				
     367.  00:4388                      		; ld	a,00000010B		; blue
     368.  00:4388                      		; out	(0x99),a
     369.  00:4388                      		; ld	a,7+128
     370.  00:4388                      		; out	(0x99),a
     371.  00:4388                      		
     372.  00:4388  C3 D0 43            		jp		newxmap
     373.  00:438B                      		
     374.  00:438B                      .movex
     375.  00:438B  3A 35 CB            		ld		a,(_xoffset)
     376.  00:438E  A7                  		and		a
     377.  00:438F  20 0B               		jr		nz,.case1_15
     378.  00:4391                      .case0
     379.  00:4391  3A 33 CB            		ld 		a,(_displaypage)
     380.  00:4394  EE 01               		xor		1
     381.  00:4396  57                  		ld 		d,a
     382.  00:4397  1E F0               		ld		e,240
     383.  00:4399  C3 0F 57            		jp		clrboder
     384.  00:439C                      		
     385.  00:439C                      .case1_15
     386.  00:439C  87 87 87 87         [4]		add		a,a
     387.  00:43A0  5F                  		ld		e,a
     388.  00:43A1  D6 10               		sub		a,16
     389.  00:43A3  57                  		ld		d,a
     390.  00:43A4  C3 41 57            		jp		move_block
     391.  00:43A7                      
     392.  00:43A7                      
     393.  00:43A7                      ;-------------------------------------	
     394.  00:43A7                      	
     395.  00:43A7                      dec_xoffset
     396.  00:43A7  CD 70 56            		call	plot_line_lft1
     397.  00:43AA  CD B3 43            		call	.movex
     398.  00:43AD  CD 78 56            		call	plot_line_lft2
     399.  00:43B0                      				
     400.  00:43B0                      		; ld	a,00000011B		; blue
     401.  00:43B0                      		; out	(0x99),a
     402.  00:43B0                      		; ld	a,7+128
     403.  00:43B0                      		; out	(0x99),a
     404.  00:43B0                      
     405.  00:43B0  C3 D0 43            		jp		newxmap
     406.  00:43B3                      		
     407.  00:43B3                      .movex
     408.  00:43B3  3A 35 CB            		ld		a,(_xoffset)
     409.  00:43B6  FE 0F               		cp	15
     410.  00:43B8  20 0B               		jr		nz,.case0_14
     411.  00:43BA                      .case15
     412.  00:43BA  3A 33 CB            		ld 		a,(_displaypage)
     413.  00:43BD  EE 01               		xor		1
     414.  00:43BF  57                  		ld 		d,a
     415.  00:43C0  1E 00               		ld		e,0
     416.  00:43C2  C3 0F 57            		jp		clrboder
     417.  00:43C5                      		
     418.  00:43C5                      .case0_14
     419.  00:43C5  87 87 87 87         [4]		add		a,a
     420.  00:43C9  5F                  		ld		e,a
     421.  00:43CA  C6 10               		add		a,16
     422.  00:43CC  57                  		ld		d,a
     423.  00:43CD  C3 41 57            		jp		move_block
     424.  00:43D0                      
     425.  00:43D0                      
     426.  00:43D0                      ;-------------------------------------
     427.  00:43D0                      newxmap
     428.  00:43D0  CD 48 45            		call 	plot_enemy		
     429.  00:43D3  CD 81 59            		call	color_enemy
     430.  00:43D6                      
     431.  00:43D6  2A 46 CB            		ld		hl,(_xmapx4)
     432.  00:43D9  3A 43 CB            		ld		a,(dxmap)
     433.  00:43DC  5F                  		ld		e,a
     434.  00:43DD  87                  		add 	a,a
     435.  00:43DE  9F                  		sbc 	a,a
     436.  00:43DF  57                  		ld		d,a
     437.  00:43E0  19                  		add 	hl,de
     438.  00:43E1  22 46 CB            		ld		(_xmapx4),hl
     439.  00:43E4                      		repeat 2
     440.  00:43E4                    < 		sra		h
     441.  00:43E4                    < 		rr  	l
     442.  00:43E4                    < 		endrepeat
     442.  00:43E4  CB 2C CB 1D CB 2C CB 1D 
     443.  00:43EC  22 44 CB            		ld		(xmap),hl
     444.  00:43EF  7D                  		ld 		a,l
     445.  00:43F0  E6 0F               		and		15
     446.  00:43F2  32 35 CB            		ld		(_xoffset),a
     447.  00:43F5                      		repeat 4
     448.  00:43F5                    < 		sra		h
     449.  00:43F5                    < 		rr  	l
     450.  00:43F5                    < 		endrepeat
     450.  00:43F5  CB 2C CB 1D CB 2C CB 1D CB 2C CB 1D CB 2C CB 1D 
     451.  00:4405  7D                  		ld 		a,l
     452.  00:4406  E6 01               		and		1
     453.  00:4408  32 33 CB            		ld		(_displaypage),a
     454.  00:440B  11 00 C0            		ld		de,_levelmap
     455.  00:440E  19                  		add		hl,de
     456.  00:440F  22 2F CB            		ld		(_levelmap_pos),hl
     457.  00:4412  C9                  		ret
     458.  00:4413                      		
     459.  00:4413                      ;-------------------------------------
     460.  00:4413                      
     461.  00:4413                      activate_window	
     462.  00:4413  3A 33 CB            		ld	a,(_displaypage)
     463.  00:4416  87 87 87 87 87      [5]		add a,a 			; x32
     464.  00:441B  F6 1F               		or	00011111B
     465.  00:441D  D3 99               		out (0x99),a
     466.  00:441F  3E 82               		ld a,2+128
     467.  00:4421  D3 99               		out (0x99),a
     468.  00:4423                      		
     469.  00:4423  3A 36 CB            		LD    A,(_yoffset)		; SCROLL DOWN
     470.  00:4426  D3 99               		out (0x99),a
     471.  00:4428  C6 A7               		add    A,YSIZE-1
     472.  00:442A  6F                  		ld		l,a
     473.  00:442B  3E 97               		LD    A,23+128
     474.  00:442D  D3 99               		out (0x99),a
     475.  00:442F                      
     476.  00:442F  7D                  		ld    a,l
     477.  00:4430  D3 99               		out (0x99),a			; set interrupt line
     478.  00:4432  3E 93               		LD    A,19+128
     479.  00:4434  D3 99               		out (0x99),a
     480.  00:4436                      		
     481.  00:4436  3A 35 CB            		ld	a,(_xoffset)		; set R#18 only if not scrolling
     482.  00:4439  C6 F8               		add	a,-8
     483.  00:443B  E6 0F               		and	0Fh
     484.  00:443D  D3 99               		out	(099h),a
     485.  00:443F  3E 92               		ld	a,18+128
     486.  00:4441  D3 99               		out	(099h),a
     487.  00:4443                      
     488.  00:4443  3A E7 FF            		ld	a,(RG8SAV)		; enable sprites
     489.  00:4446  E6 FD               		and	11111101B
     490.  00:4448  32 E7 FF            		ld	(RG8SAV),a
     491.  00:444B  D3 99               		out	(0x99),a
     492.  00:444D  3E 88               		ld	a,8+128
     493.  00:444F  D3 99               		out	(0x99),a
     494.  00:4451                      
     495.  00:4451  C9                  		ret
     496.  00:4452                      			
     497.  00:4452                      ;-------------------------------------
     498.  00:4452                      	
     499.  00:4452                      changedir:
     500.  00:4452  3A 42 CB            		ld		a,(_dxmap)
     501.  00:4455  E6 80               		and		128
     502.  00:4457  47                  		ld		b,a
     503.  00:4458  23                  		inc		hl
     504.  00:4459  3A 43 CB            		ld		a,(dxmap)		; dxmap
     505.  00:445C  4F                  		ld		c,a
     506.  00:445D  E6 80               		and		128
     507.  00:445F  A8                  		xor		b				; compare signs
     508.  00:4460  CA 92 44            		jp		z,nodirchange
     509.  00:4463  32 41 CB            		ld		(_dxchng),a		; a<>0
     510.  00:4466  CB 79               		bit		7,c
     511.  00:4468  28 14               		jr		z,.right
     512.  00:446A                      .left
     513.  00:446A  CD 70 56            		call	plot_line_lft1
     514.  00:446D  3A 33 CB            		ld 		a,(_displaypage)
     515.  00:4470  EE 01               		xor		1
     516.  00:4472  57                  		ld 		d,a
     517.  00:4473  1E 00               		ld		e,0
     518.  00:4475  CD 0F 57            		call	clrboder
     519.  00:4478  CD 78 56            		call	plot_line_lft2
     520.  00:447B  C3 D0 43            		jp		newxmap
     521.  00:447E                      
     522.  00:447E                      .right
     523.  00:447E  CD 80 56            		call	plot_line_rgt1
     524.  00:4481  3A 33 CB            		ld 		a,(_displaypage)
     525.  00:4484  EE 01               		xor		1
     526.  00:4486  57                  		ld 		d,a
     527.  00:4487  1E F0               		ld		e,240
     528.  00:4489  CD 0F 57            		call	clrboder
     529.  00:448C  CD 8C 56            		call	plot_line_rgt2
     530.  00:448F  C3 D0 43            		jp		newxmap
     531.  00:4492                      
     532.  00:4492                      nodirchange:
     533.  00:4492  3A 41 CB            		ld		a,(_dxchng)
     534.  00:4495  A7                  		and		a
     535.  00:4496  20 08               		jr		nz,1f
     536.  00:4498  CB 79               		bit		7,c
     537.  00:449A  CA 7F 43            		jp		z,inc_xoffset
     538.  00:449D  C3 A7 43            		jp		dec_xoffset
     539.  00:44A0                      	
     540.  00:44A0  AF                  1:		xor	a
     541.  00:44A1  32 41 CB            		ld		(_dxchng),a
     542.  00:44A4  CB 79               		bit		7,c
     543.  00:44A6  CA B9 44            		jp		z,.right
     544.  00:44A9                      .left
     545.  00:44A9  CD 70 56            		call	plot_line_lft1
     546.  00:44AC  1E E0               		ld		e,240-16
     547.  00:44AE  16 F0               		ld		d,240
     548.  00:44B0  CD 41 57            		call	move_block
     549.  00:44B3  CD 78 56            		call	plot_line_lft2
     550.  00:44B6  C3 D0 43            		jp		newxmap
     551.  00:44B9                      
     552.  00:44B9                      .right
     553.  00:44B9  CD 80 56            		call	plot_line_rgt1
     554.  00:44BC  1E 10               		ld		e,16
     555.  00:44BE  16 00               		ld		d,0
     556.  00:44C0  CD 41 57            		call	move_block
     557.  00:44C3  CD 8C 56            		call	plot_line_rgt2
     558.  00:44C6  C3 D0 43            		jp		newxmap
     559.  00:44C9                      
     560.  00:44C9                      ;-------------------------------------
      60   00:44C9                      		
      61   00:44C9                      		include checkkbd.asm
       1.  00:44C9                      
       2.  00:44C9                      ; // Line Bit_7 Bit_6 Bit_5 Bit_4 Bit_3 Bit_2 Bit_1 Bit_0
       3.  00:44C9                      ; // 0 "7" "6" "5" "4" "3" "2" "1" "0"
       4.  00:44C9                      ; // 1 ";" "]" "[" "\" "=" "-" "9" "8"
       5.  00:44C9                      ; // 2 "B" "A" ??? "/" "." "," "'" "`"
       6.  00:44C9                      ; // 3 "J" "I" "H" "G" "F" "E" "D" "C"
       7.  00:44C9                      ; // 4 "R" "Q" "P" "O" "N" "M" "L" "K"
       8.  00:44C9                      ; // 5 "Z" "Y" "X" "W" "V" "U" "T" "S"
       9.  00:44C9                      ; // 6 F3 F2 F1 CODE CAP GRAPH CTRL SHIFT
      10.  00:44C9                      ; // 7 RET SEL BS STOP TAB ESC F5 F4
      11.  00:44C9                      ; // 8 RIGHT DOWN UP LEFT DEL INS HOME SPACE
      12.  00:44C9                      
      13.  00:44C9                      checkkbd:
      14.  00:44C9  F3                  		di
      15.  00:44CA  DB AA               		in	a,(0aah)
      16.  00:44CC  E6 F0               		and 011110000B			; upper 4 bits contain info to preserve
      17.  00:44CE  B3                  		or	e
      18.  00:44CF  D3 AA               		out (0aah),a
      19.  00:44D1  DB A9               		in	a,(0a9h)
      20.  00:44D3  6F                  		ld	l,a
      21.  00:44D4  FB                  		ei
      22.  00:44D5  C9                  		ret
      62   00:44D6                      		include sprts.asm
       1.  00:44D6                      
       2.  00:44D6                      
       3.  00:44D6                      
       4.  00:44D6                      _hw_sprite_init:
       5.  00:44D6                      
       6.  00:44D6  (00:0000)           teller:=0
       7.  00:44D6                      		repeat	4				; 4 SPTs, at 0xD800, 0xE000, 0xE800, 0xF000
       8.  00:44D6                    < 		ld		c,0
       9.  00:44D6                    < 		ld		de,0F000h-64*32*3+64*32*teller
      10.  00:44D6                    < 		call	_vdpsetvramwr
      11.  00:44D6                    < 		ld		d, :sprtdata
      12.  00:44D6                    < 		ld		e, 1
      13.  00:44D6                    < 		call	outvram
      14.  00:44D6                    < teller:=teller+1
      15.  00:44D6                    < 		endrepeat
      15.  00:44D6  0E 00 11 00 D8 CD A5 41 16 1B 1E 01 CD 39 65 0E 
      15.  00:44E6  00 11 00 E0 CD A5 41 16 1B 1E 01 CD 39 65 0E 00 
      15.  00:44F6  11 00 E8 CD A5 41 16 1B 1E 01 CD 39 65 0E 00 11 
      15.  00:4506  00 F0 CD A5 41 16 1B 1E 01 CD 39 65 
      16.  00:4512                      		
      17.  00:4512  0E 00               		ld		c,0
      18.  00:4514  11 00 FA            		ld		de,0FA00h
      19.  00:4517  CD A5 41            		call	_vdpsetvramwr
      20.  00:451A                      
      21.  00:451A  3E D8               		ld		a,0xD8
      22.  00:451C  D3 98               		out 	(0x98),a
      23.  00:451E                      
      24.  00:451E  C9                  		ret
      25.  00:451F                      
      26.  00:451F                      		
      27.  00:451F                      	; load static colors 
      28.  00:451F                      load_colors:
      29.  00:451F  0E 00               		ld		c,0
      30.  00:4521  11 30 F8            		ld		de,0F830h			;	0FA00h-512+3*16
      31.  00:4524  CD A5 41            		call	_vdpsetvramwr
      32.  00:4527  CD 36 45            		call	bull_color
      33.  00:452A                      		
      34.  00:452A  0E 00               		ld		c,0
      35.  00:452C  11 80 FD            		ld		de,0FD80h		   ;	0FE00h-512+max_enem*16
      36.  00:452F  CD A5 41            		call	_vdpsetvramwr
      37.  00:4532  CD 36 45            		call	bull_color
      38.  00:4535  C9                  		ret
      39.  00:4536                      		
      40.  00:4536                      
      41.  00:4536                      bull_color:	
      42.  00:4536  06 50               		ld	b,16*(max_bullets+max_enem_bullets)
      43.  00:4538  3E 0F               		ld	a,15
      44.  00:453A                      1:
      45.  00:453A  D3 98               		out	(0x98),a
      46.  00:453C  10 FC               		djnz 1b		
      47.  00:453E  C9                  		ret
      48.  00:453F                      		
      63   00:453F                      		include sat_update.asm
       1.  00:453F                      
       2.  00:453F                      ; _plot_enemy:
       3.  00:453F                      
       4.  00:453F                      ; __sat_update
       5.  00:453F                      	; ld		c,0
       6.  00:453F                      	; ld		de,0FA00h
       7.  00:453F                      	; call	_vdpsetvramwr
       8.  00:453F                      	; ld		hl,_sat
       9.  00:453F                      	; ld		bc,0x8098
      10.  00:453F                      ; 1:	outi
      11.  00:453F                      	; ld	a,(_xoffset)		; set R#18 only if not scrolling
      12.  00:453F                      	; add	a,(hl)
      13.  00:453F                      	; out (0x98),a
      14.  00:453F                      	; inc hl
      15.  00:453F                      ; [2]	outi
      16.  00:453F                      	; djnz 1b
      17.  00:453F                      	; ret
      18.  00:453F                      	
      19.  00:453F                      set_manta:	
      20.  00:453F  01 98 0C            	ld	bc,0x98+4*3*256
      21.  00:4542  21 54 CB            	ld  hl,ram_sat
      22.  00:4545  ED B3               	otir
      23.  00:4547  C9                  	ret
      24.  00:4548                      	
      25.  00:4548                      plot_enemy:
      26.  00:4548  3A 53 CB            	ld	a,(flip_flop)
      27.  00:454B  EE 01               	xor	1
      28.  00:454D  32 53 CB            	ld	(flip_flop),a
      29.  00:4550  C2 19 46            	jp nz, reverseplot_enemy
      30.  00:4553                      	
      31.  00:4553                      directplot_enemy:
      32.  00:4553                      	; R#5=0xF7 -> sat = FA000
      33.  00:4553  3E F7               	ld 		a,0xF7
      34.  00:4555  D3 99               	out (0x99),a
      35.  00:4557  3E 85               	ld 		a,128+5
      36.  00:4559  D3 99               	out (0x99),a
      37.  00:455B                      	
      38.  00:455B  0E 00               	ld		c,0
      39.  00:455D  11 00 FA            	ld		de,0FA00h	; 3 positions for main ship and its shadow
      40.  00:4560  CD A5 41            	call	_vdpsetvramwr
      41.  00:4563  CD 3F 45            	call	set_manta	
      42.  00:4566                      
      43.  00:4566  DD 21 60 CB         	ld	ix,any_object
      44.  00:456A                      
      45.  00:456A                      ; process MS bullets and enemy bullets
      46.  00:456A                      
      47.  00:456A  01 98 05            	ld	bc,0x98+256*(max_bullets + max_enem_bullets)
      48.  00:456D                      	
      49.  00:456D  DD CB 07 46         1:	bit 0,(ix+enemy_data.status)
      50.  00:4571  CA F7 45            	jp	z,.spriteoff1
      51.  00:4574                      	
      52.  00:4574  DD 6E 01            	ld	l,(ix+enemy_data.x+0)
      53.  00:4577  DD 66 02            	ld	h,(ix+enemy_data.x+1)
      54.  00:457A  ED 5B 44 CB         	ld	de,(xmap)
      55.  00:457E  AF                  	xor a
      56.  00:457F  ED 52               	sbc hl,de				; dx = enemy.x - xmap
      57.  00:4581  FA F7 45            	jp	m,.spriteoff1		; dx <0
      58.  00:4584                      
      59.  00:4584  B4                  	or	h
      60.  00:4585  C2 F7 45            	jp	nz,.spriteoff1		; dx >255
      61.  00:4588                      
      62.  00:4588  3A 35 CB            	ld	a,(_xoffset)		; compensate R#18 
      63.  00:458B  85                  	add	a,l
      64.  00:458C  DA F7 45            	jp	c,.spriteoff1		; remove if off screen i.e. dx + _xoffset > 255
      65.  00:458F  FE F0               	cp	240
      66.  00:4591  D2 F7 45            	jp	nc,.spriteoff1		; remove if dx + _xoffset > 240
      67.  00:4594                      	
      68.  00:4594  DD 56 00            	ld	d,(ix+enemy_data.y)	; write Y
      69.  00:4597  ED 51               	out (c),d
      70.  00:4599  ED 79               	out (c),a				; write X
      71.  00:459B  DD 7E 0A            	ld	a,(ix+enemy_data.frame)
      72.  00:459E  D3 98               	out (0x98),a			; write shape
      73.  00:45A0  ED 79               	out (c),a				; write crap
      74.  00:45A2                      	
      75.  00:45A2                      .next1
      76.  00:45A2  11 0F 00            	ld	de,enemy_data
      77.  00:45A5  DD 19               	add ix,de
      78.  00:45A7  10 C4               	djnz	1b
      79.  00:45A9                      
      80.  00:45A9                      ; process two layer enemies
      81.  00:45A9                      
      82.  00:45A9  06 0C               	ld	b,max_enem 
      83.  00:45AB  DD CB 07 46         1:	bit 0,(ix+enemy_data.status)
      84.  00:45AF  CA 04 46            	jp	z,.spriteoff2
      85.  00:45B2                      
      86.  00:45B2  DD 6E 01            	ld	l,(ix+enemy_data.x+0)
      87.  00:45B5  DD 66 02            	ld	h,(ix+enemy_data.x+1)
      88.  00:45B8  ED 5B 44 CB         	ld	de,(xmap)
      89.  00:45BC  AF                  	xor a
      90.  00:45BD  ED 52               	sbc hl,de				; dx = enemy.x - xmap
      91.  00:45BF  FA 04 46            	jp	m,.spriteoff2		; dx <0
      92.  00:45C2                      
      93.  00:45C2  B4                  	or	h
      94.  00:45C3  C2 04 46            	jp	nz,.spriteoff2		; dx >255
      95.  00:45C6                      
      96.  00:45C6  3A 35 CB            	ld	a,(_xoffset)		; compensate R#18 
      97.  00:45C9  85                  	add	a,l
      98.  00:45CA  DA 04 46            	jp	c,.spriteoff2		; remove if off screen i.e. dx + _xoffset > 255
      99.  00:45CD  FE F0               	cp	240
     100.  00:45CF  D2 04 46            	jp	nc,.spriteoff2		; remove if dx + _xoffset > 240
     101.  00:45D2                      	
     102.  00:45D2  DD 56 00            	ld	d,(ix+enemy_data.y)	
     103.  00:45D5  ED 51               	out (c),d				; write Y
     104.  00:45D7  6F                  	ld  l,a
     105.  00:45D8  D3 98               	out (0x98),a			; write X
     106.  00:45DA                      
     107.  00:45DA  DD 7E 0A            	ld	a,(ix+enemy_data.frame)
     108.  00:45DD  D3 98               	out (0x98),a			; write shape
     109.  00:45DF  ED 79               	out (c),a				; write crap
     110.  00:45E1                      
     111.  00:45E1  ED 51               	out (c),d				; write Y
     112.  00:45E3  ED 69               	out (c),l				; write X
     113.  00:45E5  C6 04               	add	a,4
     114.  00:45E7  D3 98               	out (0x98),a			; write shape
     115.  00:45E9  ED 79               	out (c),a				; write crap
     116.  00:45EB                      	
     117.  00:45EB                      .next2
     118.  00:45EB  11 0F 00            	ld	de,enemy_data
     119.  00:45EE  DD 19               	add ix,de
     120.  00:45F0  10 B9               	djnz	1b
     121.  00:45F2                      	
     122.  00:45F2  3E D8               	ld	a,0xD8
     123.  00:45F4  D3 98               	out (0x98),a			; SAT terminator
     124.  00:45F6  C9                  	ret
     125.  00:45F7                      
     126.  00:45F7                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     127.  00:45F7                      	
     128.  00:45F7                      .spriteoff1
     129.  00:45F7  3E D9               	ld	a,0xD9
     130.  00:45F9                      [4]	out (c),a				; write crap
     130.  00:45F9  ED 79 ED 79 ED 79 ED 79 
     131.  00:4601  C3 A2 45            	jp	.next1
     132.  00:4604                      
     133.  00:4604                      .spriteoff2
     134.  00:4604  3E D9               	ld	a,0xD9
     135.  00:4606                      [8]	out (c),a				; write crap
     135.  00:4606  ED 79 ED 79 ED 79 ED 79 ED 79 ED 79 ED 79 ED 79 
     136.  00:4616  C3 EB 45            	jp	.next2
     137.  00:4619                      
     138.  00:4619                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     139.  00:4619                      
     140.  00:4619                      reverseplot_enemy:
     141.  00:4619                      	; R#5=0xFF -> sat = FE000
     142.  00:4619  3E FF               	ld 		a,0xFF
     143.  00:461B  D3 99               	out (0x99),a
     144.  00:461D  3E 85               	ld 		a,128+5
     145.  00:461F  D3 99               	out (0x99),a
     146.  00:4621                      
     147.  00:4621  0E 00               	ld		c,0
     148.  00:4623  11 00 FE            	ld		de,0FE00h	; 3 positions for main ship and its shadow
     149.  00:4626  CD A5 41            	call	_vdpsetvramwr
     150.  00:4629                      
     151.  00:4629  DD 21 50 CC         	ld	ix,enemies+(max_enem-1)*enemy_data
     152.  00:462D                      
     153.  00:462D                      ; process two layer enemies
     154.  00:462D                      
     155.  00:462D  01 98 0C            	ld	bc,0x98+256*max_enem
     156.  00:4630                      	
     157.  00:4630  DD CB 07 46         1:	bit 0,(ix+enemy_data.status)
     158.  00:4634  CA CA 46            	jp	z,.spriteoff2
     159.  00:4637                      	
     160.  00:4637  DD 6E 01            	ld	l,(ix+enemy_data.x+0)
     161.  00:463A  DD 66 02            	ld	h,(ix+enemy_data.x+1)
     162.  00:463D  ED 5B 44 CB         	ld	de,(xmap)
     163.  00:4641  AF                  	xor a
     164.  00:4642  ED 52               	sbc hl,de				; dx = enemy.x - xmap
     165.  00:4644  FA CA 46            	jp	m,.spriteoff2		; dx <0
     166.  00:4647                      
     167.  00:4647  B4                  	or	h
     168.  00:4648  C2 CA 46            	jp	nz,.spriteoff2		; dx >255
     169.  00:464B                      
     170.  00:464B  3A 35 CB            	ld	a,(_xoffset)		; compensate R#18 
     171.  00:464E  85                  	add	a,l
     172.  00:464F  DA CA 46            	jp	c,.spriteoff2		; remove if off screen i.e. dx + _xoffset > 255
     173.  00:4652  FE F0               	cp	240
     174.  00:4654  D2 CA 46            	jp	nc,.spriteoff2		; remove if dx + _xoffset > 240
     175.  00:4657  DD 56 00            	ld	d,(ix+enemy_data.y)	
     176.  00:465A  ED 51               	out (c),d				; write Y
     177.  00:465C  6F                  	ld  l,a
     178.  00:465D  D3 98               	out (0x98),a			; write X
     179.  00:465F                      
     180.  00:465F  DD 7E 0A            	ld	a,(ix+enemy_data.frame)
     181.  00:4662  D3 98               	out (0x98),a			; write shape
     182.  00:4664  ED 79               	out (c),a				; write crap
     183.  00:4666                      
     184.  00:4666  ED 51               	out (c),d				; write Y
     185.  00:4668  ED 69               	out (c),l				; write X
     186.  00:466A  C6 04               	add	a,4
     187.  00:466C  D3 98               	out (0x98),a			; write shape
     188.  00:466E  ED 79               	out (c),a				; write crap
     189.  00:4670                      	
     190.  00:4670                      .next2
     191.  00:4670  11 F1 FF            	ld	de,-enemy_data
     192.  00:4673  DD 19               	add ix,de
     193.  00:4675  10 B9               	djnz	1b
     194.  00:4677                      
     195.  00:4677                      ; process one layer enemies
     196.  00:4677                      
     197.  00:4677  06 05               	ld	b,max_bullets + max_enem_bullets 
     198.  00:4679  DD CB 07 46         1:	bit 0,(ix+enemy_data.status)
     199.  00:467D  CA BD 46            	jp	z,.spriteoff1
     200.  00:4680                      
     201.  00:4680  DD 6E 01            	ld	l,(ix+enemy_data.x+0)
     202.  00:4683  DD 66 02            	ld	h,(ix+enemy_data.x+1)
     203.  00:4686  ED 5B 44 CB         	ld	de,(xmap)
     204.  00:468A  AF                  	xor a
     205.  00:468B  ED 52               	sbc hl,de				; dx = enemy.x - xmap
     206.  00:468D  FA BD 46            	jp	m,.spriteoff1		; dx <0
     207.  00:4690                      
     208.  00:4690  B4                  	or	h
     209.  00:4691  C2 BD 46            	jp	nz,.spriteoff1		; dx >255
     210.  00:4694                      
     211.  00:4694  3A 35 CB            	ld	a,(_xoffset)		; compensate R#18 
     212.  00:4697  85                  	add	a,l
     213.  00:4698  DA BD 46            	jp	c,.spriteoff1		; remove if off screen i.e. dx + _xoffset > 255
     214.  00:469B  FE F0               	cp	240
     215.  00:469D  D2 BD 46            	jp	nc,.spriteoff1		; remove if dx + _xoffset > 240
     216.  00:46A0                      	
     217.  00:46A0  DD 56 00            	ld	d,(ix+enemy_data.y)	
     218.  00:46A3  ED 51               	out (c),d				; write Y
     219.  00:46A5  ED 79               	out (c),a				; write X
     220.  00:46A7                      
     221.  00:46A7  DD 7E 0A            	ld	a,(ix+enemy_data.frame)
     222.  00:46AA  D3 98               	out (0x98),a			; write shape
     223.  00:46AC  ED 79               	out (c),a				; write crap
     224.  00:46AE                      
     225.  00:46AE                      .next1
     226.  00:46AE  11 F1 FF            	ld	de,-enemy_data
     227.  00:46B1  DD 19               	add ix,de
     228.  00:46B3  10 C4               	djnz	1b
     229.  00:46B5                      
     230.  00:46B5  CD 3F 45            	call	set_manta	
     231.  00:46B8                      	
     232.  00:46B8  3E D8               	ld	a,0xD8
     233.  00:46BA  D3 98               	out (0x98),a			; SAT terminator
     234.  00:46BC  C9                  	ret
     235.  00:46BD                      	
     236.  00:46BD                      	
     237.  00:46BD                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     238.  00:46BD                      	
     239.  00:46BD                      .spriteoff1
     240.  00:46BD  3E D9               	ld	a,0xD9
     241.  00:46BF                      [4]	out (c),a				; write crap
     241.  00:46BF  ED 79 ED 79 ED 79 ED 79 
     242.  00:46C7  C3 AE 46            	jp	.next1
     243.  00:46CA                      
     244.  00:46CA                      .spriteoff2
     245.  00:46CA  3E D9               	ld	a,0xD9
     246.  00:46CC                      [8]	out (c),a				; write crap
     246.  00:46CC  ED 79 ED 79 ED 79 ED 79 ED 79 ED 79 ED 79 ED 79 
     247.  00:46DC  C3 70 46            	jp	.next2
     248.  00:46DF                      
     249.  00:46DF                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      64   00:46DF                      		include collision_tst.asm
       1.  00:46DF  (0021)              	align 0x100
       2.  00:4700                      sprite_collision_windows:
       3.  00:4700                      	include sprite_collision_window.asm
       1:  00:4700                      
       2:  00:4700                       ; xoff			db	0 
       3:  00:4700                       ; yoff			db	0 
       4:  00:4700                       ; xsize		db	0 
       5:  00:4700                       ; ysize		db	0 
       6:  00:4700                      
       7:  00:4700                      sprite_0:
       8:  00:4700  00 00 10 10             defb  0, 0,16,16 
       9:  00:4704                      sprite_1:
      10:  00:4704  00 00 10 10             defb  0, 0,16,16 
      11:  00:4708                      sprite_2:
      12:  00:4708  00 00 10 10             defb  0, 0,16,16 
      13:  00:470C                      sprite_3:
      14:  00:470C  00 00 10 10             defb  0, 0,16,16 
      15:  00:4710                      sprite_4:
      16:  00:4710  00 00 10 10             defb  0, 0,16,16 
      17:  00:4714                      sprite_5:
      18:  00:4714  00 00 10 10             defb  0, 0,16,16 
      19:  00:4718                      sprite_6:
      20:  00:4718  00 00 10 10             defb  0, 0,16,16 
      21:  00:471C                      sprite_7:
      22:  00:471C  00 00 10 10             defb  0, 0,16,16 
      23:  00:4720                      sprite_8:
      24:  00:4720  00 03 10 0B             defb  0, 3,16,11 
      25:  00:4724                      sprite_9:
      26:  00:4724  00 03 10 0B             defb  0, 3,16,11 
      27:  00:4728                      sprite_10:
      28:  00:4728  00 00 10 10             defb  0, 0,16,16 
      29:  00:472C                      sprite_11:
      30:  00:472C  00 00 10 10             defb  0, 0,16,16 
      31:  00:4730                      sprite_12:
      32:  00:4730  00 00 10 10             defb  0, 0,16,16 
      33:  00:4734                      sprite_13:
      34:  00:4734  00 00 10 10             defb  0, 0,16,16 
      35:  00:4738                      sprite_14:
      36:  00:4738  00 00 10 10             defb  0, 0,16,16 
      37:  00:473C                      sprite_15:
      38:  00:473C  00 00 10 10             defb  0, 0,16,16 
      39:  00:4740                      sprite_16:
      40:  00:4740  00 01 10 0E             defb  0, 1,16,14 
      41:  00:4744                      sprite_17:
      42:  00:4744  00 00 10 10             defb  0, 0,16,16 
      43:  00:4748                      sprite_18:
      44:  00:4748  00 02 10 0C             defb  0, 2,16,12 
      45:  00:474C                      sprite_19:
      46:  00:474C  00 01 10 0E             defb  0, 1,16,14 
      47:  00:4750                      sprite_20:
      48:  00:4750  00 01 10 0E             defb  0, 1,16,14 
      49:  00:4754                      sprite_21:
      50:  00:4754  00 02 10 0C             defb  0, 2,16,12 
      51:  00:4758                      sprite_22:
      52:  00:4758  00 00 10 10             defb  0, 0,16,16 
      53:  00:475C                      sprite_23:
      54:  00:475C  00 01 10 0E             defb  0, 1,16,14 
       4.  00:4760                      
       5.  00:4760                      ;	in: 
       6.  00:4760                      ;		IX-> current sprite
       7.  00:4760                      ;		(ix+enemy_data.frame) = frame in the SPT
       8.  00:4760                      ;	out;
       9.  00:4760                      ;		IX -> xoff,yoff,xsize,ysize are set
      10.  00:4760                      	
      11.  00:4760                      set_size:
      12.  00:4760  08                   	ex	af,af'
      13.  00:4761  DD 7E 0A            	ld	a,(ix+enemy_data.frame)
      14.  00:4764  D6 40               	sub	a,16*4
      15.  00:4766  0F                  	rrca
      16.  00:4767  D9                  	exx
      17.  00:4768  E6 7C               	and	%01111100
      18.  00:476A  6F                  	ld	l,a
      19.  00:476B  26 47               	ld	h,high sprite_collision_windows		
      20.  00:476D  7E                  	ld	a,(hl)
      21.  00:476E  DD 77 03            	ld	(ix+enemy_data.xoff),a
      22.  00:4771  23                  	inc	hl
      23.  00:4772  7E                  	ld	a,(hl)
      24.  00:4773  DD 77 04            	ld	(ix+enemy_data.yoff),a
      25.  00:4776  23                  	inc	hl
      26.  00:4777  7E                  	ld	a,(hl)
      27.  00:4778  DD 77 05            	ld	(ix+enemy_data.xsize),a
      28.  00:477B  23                  	inc	hl
      29.  00:477C  7E                  	ld	a,(hl)
      30.  00:477D  DD 77 06            	ld	(ix+enemy_data.ysize),a
      31.  00:4780  D9                  	exx
      32.  00:4781  08                  	ex		af,af'
      33.  00:4782  C9                  	ret
      34.  00:4783                      
      35.  00:4783                      ;	in: 
      36.  00:4783                      ;		IY-> current sprite
      37.  00:4783                      ;		(iY+enemy_data.frame) = frame in the SPT
      38.  00:4783                      ;	out;
      39.  00:4783                      ;		IY -> xoff,yoff,xsize,ysize are set
      40.  00:4783                      	
      41.  00:4783                      bullet_set_size2:
      42.  00:4783  D6 20               	sub	a,8*4
      43.  00:4785  D9                  	exx
      44.  00:4786  E6 7C               	and	%01111100
      45.  00:4788  4F                  	ld	c,a
      46.  00:4789  06 00               	ld	b,0
      47.  00:478B  21 A4 47            	ld	hl,bullet_sprite_collision_windows
      48.  00:478E  09                  	add	hl,bc
      49.  00:478F  7E                  	ld	a,(hl)
      50.  00:4790  FD 77 03            	ld	(iy+enemy_data.xoff),a
      51.  00:4793  23                  	inc	hl
      52.  00:4794  7E                  	ld	a,(hl)
      53.  00:4795  FD 77 04            	ld	(iy+enemy_data.yoff),a
      54.  00:4798  23                  	inc	hl
      55.  00:4799  7E                  	ld	a,(hl)
      56.  00:479A  FD 77 05            	ld	(iy+enemy_data.xsize),a
      57.  00:479D  23                  	inc	hl
      58.  00:479E  7E                  	ld	a,(hl)
      59.  00:479F  FD 77 06            	ld	(iy+enemy_data.ysize),a
      60.  00:47A2  D9                  	exx
      61.  00:47A3  C9                  	ret
      62.  00:47A4                      	
      63.  00:47A4                      bullet_sprite_collision_windows:
      64.  00:47A4                      .sprite_8:
      65.  00:47A4  04 01 08 0E             defb  4, 1, 8,14 
      66.  00:47A8                      .sprite_9:
      67.  00:47A8  04 03 08 0B             defb  4, 3, 8,11 
      68.  00:47AC                      .sprite_10:
      69.  00:47AC  04 05 08 07             defb  4, 5, 8, 7 
      70.  00:47B0                      .sprite_11:
      71.  00:47B0  04 06 08 05             defb  4, 6, 8, 5 
      72.  00:47B4                      .sprite_12:
      73.  00:47B4  04 07 08 02             defb  4, 7, 8, 2 
      74.  00:47B8                      .sprite_13:
      75.  00:47B8  04 06 08 05             defb  4, 6, 8, 5 
      76.  00:47BC                      .sprite_14:
      77.  00:47BC  04 05 08 07             defb  4, 5, 8, 7 
      78.  00:47C0                      .sprite_15:
      79.  00:47C0  04 03 08 0B             defb  4, 3, 8,11 
      80.  00:47C4                      
      81.  00:47C4                      ;	in: 
      82.  00:47C4                      ;		IX-> current sprite
      83.  00:47C4                      ;		(ix+enemy_data.frame) = frame in the SPT
      84.  00:47C4                      ;	out;
      85.  00:47C4                      ;		IX -> xoff,yoff,xsize,ysize are set
      86.  00:47C4                      	
      87.  00:47C4                      bullet_set_size:
      88.  00:47C4  D6 20               	sub	a,8*4
      89.  00:47C6  D9                  	exx
      90.  00:47C7  E6 FC               	and	%11111100
      91.  00:47C9  4F                  	ld	c,a
      92.  00:47CA  06 00               	ld	b,0
      93.  00:47CC  21 A4 47            	ld	hl,bullet_sprite_collision_windows
      94.  00:47CF  09                  	add	hl,bc
      95.  00:47D0  7E                  	ld	a,(hl)
      96.  00:47D1  DD 77 03            	ld	(ix+enemy_data.xoff),a
      97.  00:47D4  23                  	inc	hl
      98.  00:47D5  7E                  	ld	a,(hl)
      99.  00:47D6  DD 77 04            	ld	(ix+enemy_data.yoff),a
     100.  00:47D9  23                  	inc	hl
     101.  00:47DA  7E                  	ld	a,(hl)
     102.  00:47DB  DD 77 05            	ld	(ix+enemy_data.xsize),a
     103.  00:47DE  23                  	inc	hl
     104.  00:47DF  7E                  	ld	a,(hl)
     105.  00:47E0  DD 77 06            	ld	(ix+enemy_data.ysize),a
     106.  00:47E3  D9                  	exx
     107.  00:47E4  C9                  	ret
     108.  00:47E5                      
     109.  00:47E5                      
     110.  00:47E5                      ;	in: 
     111.  00:47E5                      ;		IX-> current bullet
     112.  00:47E5                      ;		(iY+enemy_data.frame) = frame in the SPT
     113.  00:47E5                      ;		xship,yship,ms_ysize,ms_xoff ecc ecc
     114.  00:47E5                      ;	out:
     115.  00:47E5                      ;		Carry set = MS is hit
     116.  00:47E5                      ;
     117.  00:47E5                      test_collision_enemy_bullets:
     118.  00:47E5                      	
     119.  00:47E5  DD 7E 00            	ld  a,(ix+enemy_data.y)
     120.  00:47E8  DD 86 04            	add a,(ix+enemy_data.yoff)
     121.  00:47EB  47                  	ld  b,a						; b = y+yoffset
     122.  00:47EC  DD 4E 06            	ld  c,(ix+enemy_data.ysize) ; c = ysize
     123.  00:47EF                      	
     124.  00:47EF                      	;[minx(h) maxx(h) miny(h) maxy(h)]
     125.  00:47EF                      	
     126.  00:47EF  3A 48 CB            	ld  a,(yship)
     127.  00:47F2  FD 86 02            	add	a,(iy+2)
     128.  00:47F5  57                  	ld  d,a				; d = y+ymin
     129.  00:47F6                      	
     130.  00:47F6  FD 7E 03            	ld	a,(iy+3)
     131.  00:47F9  FD 96 02            	sub	a,(iy+2)
     132.  00:47FC  3C                  	inc	a
     133.  00:47FD  5F                  	ld  e,a 		; 	ms_ysize
     134.  00:47FE                      	
     135.  00:47FE  CD 84 48            	call	CollisionCheck_8b
     136.  00:4801  D0                  	ret nc
     137.  00:4802                      	
     138.  00:4802                      	;[minx(h) maxx(h) miny(h) maxy(h)]
     139.  00:4802                      	
     140.  00:4802  DD 6E 01            	ld l,(ix+enemy_data.x)
     141.  00:4805  DD 66 02            	ld h,(ix+enemy_data.x+1)
     142.  00:4808  16 00               	ld d,0
     143.  00:480A  DD 5E 03            	ld e,(ix+enemy_data.xoff)
     144.  00:480D  19                  	add hl,de
     145.  00:480E  EB                  	ex de,hl
     146.  00:480F                      	
     147.  00:480F  44                  	ld b,h
     148.  00:4810  2A 49 CB            	ld hl,(xship)
     149.  00:4813  FD 4E 00            	ld c,(iy+0) ;	ms_xoff
     150.  00:4816  09                  	add hl,bc
     151.  00:4817                      
     152.  00:4817  DD 4E 05            	ld c,(ix+enemy_data.xsize)
     153.  00:481A                      	
     154.  00:481A  FD 7E 01            	ld	a,(iy+1)
     155.  00:481D  FD 96 00            	sub	a,(iy+0)
     156.  00:4820  3C                  	inc	a
     157.  00:4821  47                  	ld  b,a 		; ms_xsize
     158.  00:4822                      
     159.  00:4822  C3 74 48            	jp CalcCollision
     160.  00:4825                      	; call CalcCollision
     161.  00:4825                      	; ret 
     162.  00:4825                      	
     163.  00:4825                      ;	in: 
     164.  00:4825                      ;		ix -> current enemy
     165.  00:4825                      ;	out;
     166.  00:4825                      ; 		Carry set = collision
     167.  00:4825                      	
     168.  00:4825                      test_collision_msbullets:
     169.  00:4825                      
     170.  00:4825  FD 21 60 CB             ld  iy,ms_bullets
     171.  00:4829  11 0F 00            	ld  de,enemy_data
     172.  00:482C  06 02                   ld  b,max_bullets
     173.  00:482E  A7                      and	a
     174.  00:482F                      	
     175.  00:482F  D9                  1:	exx
     176.  00:4830                          
     177.  00:4830  FD CB 07 46         	bit 0,(iy+enemy_data.status)
     178.  00:4834  C4 3E 48            	call	nz,test_collision
     179.  00:4837  D8                  	ret	c
     180.  00:4838                      	
     181.  00:4838  D9                  	exx
     182.  00:4839  FD 19                   add iy,de
     183.  00:483B  10 F2                   djnz   1b
     184.  00:483D  C9                  	ret
     185.  00:483E                      	
     186.  00:483E                      
     187.  00:483E                      ; struct enemy_data
     188.  00:483E                      ; y               db  0
     189.  00:483E                      ; x               dw  0
     190.  00:483E                      ; xoff			db	0
     191.  00:483E                      ; yoff			db	0
     192.  00:483E                      ; xsize			db	0
     193.  00:483E                      ; ysize			db	0
     194.  00:483E                      ; status          db  0
     195.  00:483E                      ; cntr            db  0
     196.  00:483E                      ; kind            db  0
     197.  00:483E                      ; frame			db	0
     198.  00:483E                      ; color			db	0
     199.  00:483E                      ; speed           dw  0
     200.  00:483E                      ; ends
     201.  00:483E                      
     202.  00:483E                      
     203.  00:483E                      ; IN: 
     204.  00:483E                      ; 	ix -> object 1
     205.  00:483E                      ; 	iy -> object 2
     206.  00:483E                      ;
     207.  00:483E                      ; OUT: 
     208.  00:483E                      ; Carry set = collision
     209.  00:483E                      
     210.  00:483E                      test_collision:
     211.  00:483E  DD 7E 00            	ld  a,(ix+enemy_data.y)
     212.  00:4841  DD 86 04            	add a,(ix+enemy_data.yoff)
     213.  00:4844  47                  	ld  b,a
     214.  00:4845  DD 4E 06            	ld  c,(ix+enemy_data.ysize)
     215.  00:4848                      	
     216.  00:4848  FD 7E 00            	ld  a,(iy+enemy_data.y)
     217.  00:484B  FD 86 04            	add	a,(iy+enemy_data.yoff)
     218.  00:484E  57                  	ld  d,a
     219.  00:484F  FD 5E 06            	ld  e,(iy+enemy_data.ysize)
     220.  00:4852                      	
     221.  00:4852  CD 84 48            	call	CollisionCheck_8b
     222.  00:4855  D0                  	ret nc
     223.  00:4856                      	
     224.  00:4856  DD 6E 01            	ld l,(ix+enemy_data.x)
     225.  00:4859  DD 66 02            	ld h,(ix+enemy_data.x+1)
     226.  00:485C  16 00               	ld d,0
     227.  00:485E  42                  	ld b,d
     228.  00:485F  DD 5E 03            	ld e,(ix+enemy_data.xoff)
     229.  00:4862  19                  	add hl,de
     230.  00:4863  EB                  	ex de,hl
     231.  00:4864                      	
     232.  00:4864  FD 6E 01            	ld l,(iy+enemy_data.x)
     233.  00:4867  FD 66 02            	ld h,(iy+enemy_data.x+1)
     234.  00:486A  FD 4E 03            	ld c,(iy+enemy_data.xoff)
     235.  00:486D  09                  	add hl,bc
     236.  00:486E                      
     237.  00:486E  DD 4E 05            	ld c,(ix+enemy_data.xsize)
     238.  00:4871  FD 46 05            	ld b,(iy+enemy_data.xsize)
     239.  00:4874                      
     240.  00:4874                      	; call CalcCollision
     241.  00:4874                      	; ret 
     242.  00:4874                      
     243.  00:4874                      ; CalcCollision
     244.  00:4874                      ;
     245.  00:4874                      ; 1D collision check
     246.  00:4874                      ;
     247.  00:4874                      ; IN: 
     248.  00:4874                      ; 	DE = Location object 1
     249.  00:4874                      ; 	C = Size object 1
     250.  00:4874                      ; 	HL = Location object 2
     251.  00:4874                      ; 	B = Size object 2
     252.  00:4874                      ; OUT: 
     253.  00:4874                      ; Carry set = collision
     254.  00:4874                      ;
     255.  00:4874                      CalcCollision:
     256.  00:4874  AF                  	xor a
     257.  00:4875  ED 52               	sbc hl,de		; x2-x1
     258.  00:4877  57                  	ld  d,a
     259.  00:4878  38 04               	jr  c,.switch 	; jump if x2<x1
     260.  00:487A                      	
     261.  00:487A                      					; x2>=x1
     262.  00:487A  59                  	ld  e,c
     263.  00:487B  ED 52               	sbc hl,de		; C == x2-x1<dx1	
     264.  00:487D  C9                  	ret
     265.  00:487E                      
     266.  00:487E                      
     267.  00:487E                      .switch:			; x2-x1<0
     268.  00:487E  57                  	ld	d,a
     269.  00:487F  58                  	ld	e,b
     270.  00:4880  AF                  	xor	a
     271.  00:4881  ED 52               	sbc hl,de		; x2-x1 - dx2
     272.  00:4883  C9                  	ret				; C == x1-x2<dx2
     273.  00:4884                      
     274.  00:4884                      ;
     275.  00:4884                      ; CollisionCheck
     276.  00:4884                      ;
     277.  00:4884                      ;   Calculates whether a collision occurs between two objects
     278.  00:4884                      ;   of a certain size
     279.  00:4884                      ;
     280.  00:4884                      ; IN: b = coordinate of object 1
     281.  00:4884                      ;     c = size of object 1
     282.  00:4884                      ;     d = coordinate of object 2
     283.  00:4884                      ;     e = size of object 2
     284.  00:4884                      ; OUT: Carry set if collision
     285.  00:4884                      ; CHANGES: AF
     286.  00:4884                      ;
     287.  00:4884                      CollisionCheck_8b:
     288.  00:4884  7A                          ld      a,d             ; get x2                       [5]
     289.  00:4885  90                          sub     b               ; calculate x2-x1              [5]
     290.  00:4886  38 02                       jr      c,.other        ; jump if x2<x1                [13/8]
     291.  00:4888  91                          sub     c               ; compare with size 1          [5]
     292.  00:4889  C9                          ret                     ; return result                [11]
     293.  00:488A                      .other:
     294.  00:488A  ED 44                       neg                     ; use negative value           [10]
     295.  00:488C  93                          sub     e               ; compare with size 1          [5]
     296.  00:488D  C9                          ret                     ; return result                [11]
     297.  00:488E                      
     298.  00:488E                      
     299.  00:488E                      	
     300.  00:488E                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     301.  00:488E                      ; check_obj_collision
     302.  00:488E                      ; (obj *obj1,                          DE
     303.  00:488E                      ;  obj *obj2);                         BC
     304.  00:488E                      ;
     305.  00:488E                      ; obj->
     306.  00:488E                      ;    dw x,y
     307.  00:488E                      ;    db dx,dy
     308.  00:488E                      ;
     309.  00:488E                      ; if collision 
     310.  00:488E                      ;	return HL = -1 
     311.  00:488E                      ; else 
     312.  00:488E                      ;	return HL = 0
     313.  00:488E                      
     314.  00:488E                      	struct obj_data
     315.  00:488E                    < y               db  0
     316.  00:488E                    < x               dw  0
     317.  00:488E                    < xoff			db	0
     318.  00:488E                    < yoff			db	0
     319.  00:488E                    < xsize			db	0
     320.  00:488E                    < ysize			db	0
     321.  00:488E                    <     ends
     322.  00:488E                      
     323.  00:488E                      
     324.  00:488E                      _check_obj_collision:
     325.  00:488E                      
     326.  00:488E                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     327.  00:488E                      
     328.  00:488E  D5                  	push de
     329.  00:488F  DD E1               	pop ix		; ix   -> obj_data1
     330.  00:4891  C5                  	push bc
     331.  00:4892  FD E1               	pop iy		; iy   -> obj_data1
     332.  00:4894                      
     333.  00:4894                      check_obj_collision_8_16:
     334.  00:4894                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     335.  00:4894                      
     336.  00:4894  DD 7E 00            	ld  a,(ix+obj_data.y)        ; TEST Y
     337.  00:4897  DD 86 04            	add	a,(ix+obj_data.yoff)
     338.  00:489A  6F                  	ld	l,a				; HL=vertical pos. object 1 + 256 (i.e. Y1+256)
     339.  00:489B  26 01               	ld	h,1
     340.  00:489D                      	
     341.  00:489D                      	
     342.  00:489D  FD 7E 00            	ld  a,(iy+obj_data.y)
     343.  00:48A0  FD 86 04            	add	a,(iy+obj_data.yoff)
     344.  00:48A3  5F                  	ld	e,a		    	; DE=vertical pos. object 2 + 256 (i.e. Y2+256)
     345.  00:48A4  54                  	ld	d,h               
     346.  00:48A5                      
     347.  00:48A5  FD 46 06            	ld      b,(iy+obj_data.ysize)    ; B=number of pixels, object 2 (i.e. Ysize2)
     348.  00:48A8                      
     349.  00:48A8  AF                  	xor      a
     350.  00:48A9  ED 52               	sbc     hl,de
     351.  00:48AB  30 08               	jr      nc,1f       ; if HL<DE swap objects
     352.  00:48AD                      
     353.  00:48AD                      swap_objects_y:
     354.  00:48AD                      
     355.  00:48AD  DD 46 06            	ld      b,(ix+obj_data.ysize)    ; B=number of pixels, object 1 (i.e. Ysize1)
     356.  00:48B0                      
     357.  00:48B0  EB                  	ex      de,hl
     358.  00:48B1  67                  	ld      h,a			; NB: A is 0
     359.  00:48B2  6F                  	ld      l,a
     360.  00:48B3  ED 52               	sbc     hl,de       ; HL = - HL
     361.  00:48B5                      
     362.  00:48B5  B4                  1:	or      h			; NB: A was 0
     363.  00:48B6  20 30               	jr      nz,9f       ; Delta Y>256 == test failed (NB: CF = 0)
     364.  00:48B8                      
     365.  00:48B8  7D                  	ld      a,l         ; A = abs(Y2+256-(Y1+256)); B = (Y2>Y1) ? Ysize1 : Ysize2;
     366.  00:48B9  B8                  	cp      b
     367.  00:48BA  30 2C               	jr      nc,9f       ; delta Y> B == test failed
     368.  00:48BC                      
     369.  00:48BC                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     370.  00:48BC  06 01               	ld	b,1
     371.  00:48BE                      
     372.  00:48BE  DD 6E 01            	ld  l,(ix+obj_data.x)        ; TEST X
     373.  00:48C1  DD 66 02            	ld  h,(ix+obj_data.x+1)
     374.  00:48C4  DD 4E 03            	ld	c,(ix+obj_data.xoff)
     375.  00:48C7  09                  	add	hl,bc		    ; HL=x pos. object 1 + 256 (i.e. X1+256)
     376.  00:48C8                      
     377.  00:48C8  FD 5E 01            	ld  e,(iy+obj_data.x)
     378.  00:48CB  FD 56 02            	ld  d,(iy+obj_data.x+1)
     379.  00:48CE  FD 4E 03            	ld	c,(iy+obj_data.xoff)
     380.  00:48D1  09                  	add	hl,bc		    ; DE=x pos. object 2 + 256 (i.e. X2+256)
     381.  00:48D2  EB                  	ex	de,hl               
     382.  00:48D3                      
     383.  00:48D3  FD 46 05            	ld      b,(iy+obj_data.xsize)    ; Xsize2 in b
     384.  00:48D6                      
     385.  00:48D6  AF                  	xor      a
     386.  00:48D7  ED 52               	sbc     hl,de       ; x1-x2
     387.  00:48D9  30 08               	jr      nc,1f       ; if (x1-x2>=0) swap objects (NB CF=0)
     388.  00:48DB                      
     389.  00:48DB                      swap_objects_x:
     390.  00:48DB                      
     391.  00:48DB  DD 46 05            	ld      b,(ix+obj_data.xsize)    ; Xsize1 in b
     392.  00:48DE                      
     393.  00:48DE  EB                  	ex      de,hl
     394.  00:48DF  67                  	ld      h,a			; NB: A is 0
     395.  00:48E0  6F                  	ld      l,a
     396.  00:48E1  ED 52               	sbc     hl,de       ; hl=x1-x2
     397.  00:48E3                      
     398.  00:48E3  B4                  1:	or      h
     399.  00:48E4  20 02               	jr      nz,9f       ; if delta X>256 the test on X failed (NB CF=0)
     400.  00:48E6                      
     401.  00:48E6  7D                  	ld      a,l
     402.  00:48E7  B8                  	cp      b           ; CF holds the test result on X
     403.  00:48E8                      
     404.  00:48E8                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     405.  00:48E8                      
     406.  00:48E8                      9:              
     407.  00:48E8  ED 62               	sbc     hl,hl       ; return hl = -1 if obj1 and obj2 collide
     408.  00:48EA                      
     409.  00:48EA  C9                  	ret
     410.  00:48EB                      
     411.  00:48EB                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     412.  00:48EB                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     413.  00:48EB                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     414.  00:48EB                      
     415.  00:48EB                      	
     416.  00:48EB                      	
     417.  00:48EB                      	
      65   00:48EB                      		include enemies.asm
       1.  00:48EB                      
       2.  00:48EB                      ms_ani:
       3.  00:48EB                      	include mship03_ani.asm
       1:  00:48EB                      mship03_ani:
       2:  00:48EB  09                      defb 9 
       3:  00:48EC  1C                      defb 28 
       4:  00:48ED  1E                      defb 30 
       5:  00:48EE  1F                      defb 31 
       6:  00:48EF  1F                      defb 31 
       7:  00:48F0  21                      defb 33 
       8:  00:48F1  1B                      defb 27 
       9:  00:48F2  15                      defb 21 
      10:  00:48F3  15                      defb 21 
      11:  00:48F4  0B                      defb 11 
      12:  00:48F5  10                      defb 16 
      13:  00:48F6  0C                      defb 12 
      14:  00:48F7  11                      defb 17 
      15:  00:48F8  06                      defb 6 
      16:  00:48F9  00                      defb 0 
      17:  00:48FA  17                      defb 23 
      18:  00:48FB  13                      defb 19 
      19:  00:48FC  1A                      defb 26 
      20:  00:48FD  20                      defb 32 
      21:  00:48FE  23                      defb 35 
      22:  00:48FF  23                      defb 35 
      23:  00:4900  22                      defb 34 
      24:  00:4901  1D                      defb 29 
      25:  00:4902  02                      defb 2 
      26:  00:4903  02                      defb 2 
      27:  00:4904  0D                      defb 13 
      28:  00:4905  01                      defb 1 
      29:  00:4906  0A                      defb 10 
      30:  00:4907  08                      defb 8 
      31:  00:4908  03                      defb 3 
      32:  00:4909  05                      defb 5 
      33:  00:490A  04                      defb 4 
      34:  00:490B  09                      defb 9 
      35:  00:490C  04                      defb 4 
      36:  00:490D  05                      defb 5 
      37:  00:490E  03                      defb 3 
      38:  00:490F  08                      defb 8 
      39:  00:4910  03                      defb 3 
      40:  00:4911  05                      defb 5 
      41:  00:4912  04                      defb 4 
      42:  00:4913  09                      defb 9 
      43:  00:4914  12                      defb 18 
      44:  00:4915  0F                      defb 15 
      45:  00:4916  0E                      defb 14 
      46:  00:4917  07                      defb 7 
      47:  00:4918  0E                      defb 14 
      48:  00:4919  0F                      defb 15 
      49:  00:491A  12                      defb 18 
      50:  00:491B  13                      defb 19 
      51:  00:491C  18                      defb 24 
      52:  00:491D  14                      defb 20 
      53:  00:491E  16                      defb 22 
      54:  00:491F  19                      defb 25 
      55:  00:4920  16                      defb 22 
      56:  00:4921  14                      defb 20 
      57:  00:4922  18                      defb 24 
      58:  00:4923  13                      defb 19 
      59:  00:4924  17                      defb 23 
      60:  00:4925  00                      defb 0 
      61:  00:4926  06                      defb 6 
      62:  00:4927  11                      defb 17 
      63:  00:4928  06                      defb 6 
      64:  00:4929  00                      defb 0 
      65:  00:492A  17                      defb 23 
      66:  00:492B  25                      defb 37 
      67:  00:492C  24                      defb 36 
      68:  00:492D  26                      defb 38 
      69:  00:492E  28                      defb 40 
      70:  00:492F  29                      defb 41 
      71:  00:4930  27                      defb 39 
      72:  00:4931  2E                      defb 46 
      73:  00:4932  2F                      defb 47 
      74:  00:4933  2A                      defb 42 
      75:  00:4934  30                      defb 48 
      76:  00:4935  32                      defb 50 
      77:  00:4936  33                      defb 51 
      78:  00:4937  2C                      defb 44 
      79:  00:4938  31                      defb 49 
      80:  00:4939  2D                      defb 45 
      81:  00:493A  2B                      defb 43 
       4.  00:493B                      ms_col_win:
       5.  00:493B                      	include mship03_frm_coll_wind.asm
       1:  00:493B                      mship03_coll_wind:
       2:  00:493B  01 0F 03 0D             defb 1,15,3,13 
       3:  00:493F  01 0F 04 0D             defb 1,15,4,13 
       4:  00:4943  01 0F 01 0F             defb 1,15,1,15 
       5:  00:4947  01 0F 06 0C             defb 1,15,6,12 
       6:  00:494B  01 0F 03 0F             defb 1,15,3,15 
       7:  00:494F  01 0F 04 0E             defb 1,15,4,14 
       8:  00:4953  01 0F 05 0B             defb 1,15,5,11 
       9:  00:4957  01 0F 06 0B             defb 1,15,6,11 
      10:  00:495B  01 0F 06 0B             defb 1,15,6,11 
      11:  00:495F  01 0F 01 0F             defb 1,15,1,15 
      12:  00:4963  01 0F 06 0B             defb 1,15,6,11 
      13:  00:4967  01 0F 02 0D             defb 1,15,2,13 
      14:  00:496B  01 0F 05 0A             defb 1,15,5,10 
      15:  00:496F  01 0F 02 0E             defb 1,15,2,14 
      16:  00:4973  01 0F 05 0B             defb 1,15,5,11 
      17:  00:4977  01 0F 03 0D             defb 1,15,3,13 
      18:  00:497B  01 0F 03 0C             defb 1,15,3,12 
      19:  00:497F  01 0F 06 0B             defb 1,15,6,11 
      20:  00:4983  01 0F 02 0E             defb 1,15,2,14 
      21:  00:4987  01 0F 01 0F             defb 1,15,1,15 
      22:  00:498B  01 0F 04 0E             defb 1,15,4,14 
      23:  00:498F  01 0F 01 0F             defb 1,15,1,15 
      24:  00:4993  01 0F 06 0C             defb 1,15,6,12 
      25:  00:4997  01 0F 02 0E             defb 1,15,2,14 
      26:  00:499B  01 0F 03 0F             defb 1,15,3,15 
      27:  00:499F  01 0F 06 0B             defb 1,15,6,11 
      28:  00:49A3  02 0E 01 0F             defb 2,14,1,15 
      29:  00:49A7  02 0D 01 0F             defb 2,13,1,15 
      30:  00:49AB  02 0E 01 0F             defb 2,14,1,15 
      31:  00:49AF  03 0E 01 0F             defb 3,14,1,15 
      32:  00:49B3  03 0B 01 0F             defb 3,11,1,15 
      33:  00:49B7  04 0A 01 0F             defb 4,10,1,15 
      34:  00:49BB  05 0D 01 0F             defb 5,13,1,15 
      35:  00:49BF  05 0B 01 0F             defb 5,11,1,15 
      36:  00:49C3  05 0B 01 0F             defb 5,11,1,15 
      37:  00:49C7  06 0C 01 0F             defb 6,12,1,15 
      38:  00:49CB  05 0B 04 0A             defb 5,11,4,10 
      39:  00:49CF  05 09 05 09             defb 5,9,5,9 
      40:  00:49D3  03 0B 03 0B             defb 3,11,3,11 
      41:  00:49D7  03 0E 01 0C             defb 3,14,1,12 
      42:  00:49DB  03 0C 03 0C             defb 3,12,3,12 
      43:  00:49DF  03 0D 02 0C             defb 3,13,2,12 
      44:  00:49E3  02 0F 02 0F             defb 2,15,2,15 
      45:  00:49E7  02 0D 04 0D             defb 2,13,4,13 
      46:  00:49EB  02 0F 01 0D             defb 2,15,1,13 
      47:  00:49EF  02 0D 02 0D             defb 2,13,2,13 
      48:  00:49F3  02 0D 01 0C             defb 2,13,1,12 
      49:  00:49F7  01 0E 02 0F             defb 1,14,2,15 
      50:  00:49FB  01 0E 02 0F             defb 1,14,2,15 
      51:  00:49FF  01 0E 01 0E             defb 1,14,1,14 
      52:  00:4A03  01 0E 02 0F             defb 1,14,2,15 
      53:  00:4A07  01 0E 01 0E             defb 1,14,1,14 
      54:  00:4A0B                      
       6.  00:4A0B                      
       7.  00:4A0B                      ;--------------------------------------------------------------------
       8.  00:4A0B                      ;--------------------------------------------------------------------
       9.  00:4A0B                      add_bc_score_bin
      10.  00:4A0B  C9                  	ret
      11.  00:4A0C                      ;--------------------------------------------------------------------
      12.  00:4A0C                      
      13.  00:4A0C                      ; Fast random number generator using the same method
      14.  00:4A0C                      ; as the CDMA used in cellular telephones
      15.  00:4A0C                      ;--------------------------------------------------------------------
      16.  00:4A0C                      ; init random seed 
      17.  00:4A0C                      
      18.  00:4A0C                      rand8_init:
      19.  00:4A0C  2A 9E FC            	LD      HL,(_jiffy)
      20.  00:4A0F  CB C5               	SET		0,L
      21.  00:4A11  22 39 CB            	LD      (randSeed),HL
      22.  00:4A14  C9                  	RET
      23.  00:4A15                      
      24.  00:4A15                      
      25.  00:4A15                      ; -------------------------------------------------------------------
      26.  00:4A15                      ; rand8
      27.  00:4A15                      ; -------------------------------------------------------------------
      28.  00:4A15                      ;
      29.  00:4A15                      ; choose a random number in the set [0,127] with uniform distribution
      30.  00:4A15                      ; return: A = random value
      31.  00:4A15                      
      32.  00:4A15                      rand8:
      33.  00:4A15  2A 39 CB            	ld      hl,(randSeed)
      34.  00:4A18  29                  	add     hl,hl
      35.  00:4A19  9F                  	sbc     a,a
      36.  00:4A1A  E6 83               	and     083h
      37.  00:4A1C  AD                  	xor     l
      38.  00:4A1D  6F                  	ld      l,a
      39.  00:4A1E  22 39 CB            	ld      (randSeed),hl
      40.  00:4A21  C9                  	ret
      41.  00:4A22                      	
      42.  00:4A22                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      43.  00:4A22                      ;	increase the wave counter
      44.  00:4A22                      ; 	and test for landing permission
      45.  00:4A22                      	
      46.  00:4A22                      land_now_test:
      47.  00:4A22  3A 3C CB            	ld	a,(wave_count)
      48.  00:4A25  3C                  	inc	a
      49.  00:4A26  32 3C CB            	ld	(wave_count),a
      50.  00:4A29  5F                  	ld	e,a
      51.  00:4A2A  3A 3B CB            	ld	a,(cur_level)
      52.  00:4A2D  0F 0F               [2]	rrca
      53.  00:4A2F  E6 0F               	and	15
      54.  00:4A31  C6 19               	add	a,25
      55.  00:4A33  BB                  	cp	e				; 'land now' counter after  25+cur_level/4 waves
      56.  00:4A34  C0                  	ret nz
      57.  00:4A35                      
      58.  00:4A35                      	; ld	hl,land_now
      59.  00:4A35                      	; ld	de,0x1C00+8*3*32
      60.  00:4A35                      	; call	print_strf
      61.  00:4A35  3E FF               	ld	a,-1
      62.  00:4A37  32 3D CB            	ld	(landing_permission),a
      63.  00:4A3A                      	
      64.  00:4A3A  3E 0E               	ld	a,14			; Land Now
      65.  00:4A3C  CD AB 55            	call AFXPLAY
      66.  00:4A3F  C9                  	ret
      67.  00:4A40                      
      68.  00:4A40                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      69.  00:4A40                      ;
      70.  00:4A40                      ; NPC initialization 
      71.  00:4A40                      ; it removes also bullets
      72.  00:4A40                      ;
      73.  00:4A40                      npc_init:
      74.  00:4A40  DD 21 AB CB         	ld  ix,enemies
      75.  00:4A44  06 0C               	ld  b,max_enem
      76.  00:4A46  11 0F 00            	ld	de,enemy_data
      77.  00:4A49  AF                  	xor	a
      78.  00:4A4A                      	
      79.  00:4A4A  DD 77 07            1:  ld  (ix+enemy_data.status),a
      80.  00:4A4D  DD 36 09 FF         	ld  (ix+enemy_data.kind),-1
      81.  00:4A51  DD 77 08            	ld	(ix+enemy_data.cntr),a
      82.  00:4A54  DD 36 0B FF         	ld	(ix+enemy_data.color),-1
      83.  00:4A58  DD 36 00 D9         	ld	(ix+enemy_data.y),0xD9
      84.  00:4A5C                      
      85.  00:4A5C  DD 19               	add ix,de
      86.  00:4A5E  10 EA               	djnz    1b
      87.  00:4A60                      
      88.  00:4A60  21 B4 00            	ld	hl,assault_wave_timer_preset
      89.  00:4A63  22 3E CB            	ld	(assault_wave_timer),hl
      90.  00:4A66  AF                  	xor	a
      91.  00:4A67  32 3C CB            	ld	(wave_count),a
      92.  00:4A6A  32 3D CB            	ld	(landing_permission),a
      93.  00:4A6D                      	
      94.  00:4A6D                      ; turn off MS and enemy bullets
      95.  00:4A6D                      
      96.  00:4A6D                      bull_init:
      97.  00:4A6D  AF                  	xor a
      98.  00:4A6E  32 40 CB            	ld  (bullet_rate),a
      99.  00:4A71                      
     100.  00:4A71  DD 21 60 CB         	ld  ix,ms_bullets
     101.  00:4A75  06 05               	ld	b,max_bullets+max_enem_bullets
     102.  00:4A77  11 0F 00            	ld  de,enemy_data
     103.  00:4A7A                      	
     104.  00:4A7A  DD 77 07            1:	ld  (ix+enemy_data.status),a
     105.  00:4A7D  DD 36 0B 0F         	ld	(ix+enemy_data.color),15
     106.  00:4A81  DD 19               	add ix,de
     107.  00:4A83  10 F5               	djnz	1b
     108.  00:4A85                      
     109.  00:4A85  C9                  	ret
     110.  00:4A86                      
     111.  00:4A86                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     112.  00:4A86                      ; for debug only
     113.  00:4A86                      
     114.  00:4A86                      manual_wave_ctrl:
     115.  00:4A86  1E 06               	ld e,6
     116.  00:4A88  CD C9 44            	call	checkkbd
     117.  00:4A8B  CB 0D               	rrc	l				; shift
     118.  00:4A8D  D2 94 4A            	jp	nc,levels_8_16
     119.  00:4A90                      levels_0_8:
     120.  00:4A90  16 00               	ld	d,0
     121.  00:4A92  18 02               	jr	1f
     122.  00:4A94                      levels_8_16
     123.  00:4A94  16 08               	ld	d,8
     124.  00:4A96                      1:
     125.  00:4A96  1E 00               	ld e,0
     126.  00:4A98  CD C9 44            	call	checkkbd
     127.  00:4A9B  7A                  	ld	a,d
     128.  00:4A9C                      	repeat 8
     129.  00:4A9C                    < 11:	rrc	l				 ; <- '0','1','2','3','4','5','6','7'
     130.  00:4A9C                    < 	jr	nc,1f
     131.  00:4A9C                    < 	inc	a
     132.  00:4A9C                    < 	endrepeat
     132.  00:4A9C  CB 0D 30 24 3C CB 0D 30 1F 3C CB 0D 30 1A 3C CB 
     132.  00:4AAC  0D 30 15 3C CB 0D 30 10 3C CB 0D 30 0B 3C CB 0D 
     132.  00:4ABC  30 06 3C CB 0D 30 01 3C 
     133.  00:4AC4  C9                  1:	ret
     134.  00:4AC5                      	
     135.  00:4AC5                      
     136.  00:4AC5                      
     137.  00:4AC5                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     138.  00:4AC5                      ;
     139.  00:4AC5                      ;	timer for wave assaults
     140.  00:4AC5                      ;
     141.  00:4AC5                      wave_timer:
     142.  00:4AC5  2A 3E CB            	ld	hl,(assault_wave_timer)
     143.  00:4AC8  2B                  	dec	hl
     144.  00:4AC9  7C                  	ld	a,h
     145.  00:4ACA  B5                  	or	l
     146.  00:4ACB  22 3E CB            	ld	(assault_wave_timer),hl
     147.  00:4ACE  C0                  	ret	nz
     148.  00:4ACF                      
     149.  00:4ACF  3E 01               	ld	a,1			; wave incoming
     150.  00:4AD1  CD AB 55            	call AFXPLAY
     151.  00:4AD4                      	
     152.  00:4AD4  21 B4 00            	ld	hl,assault_wave_timer_preset
     153.  00:4AD7  3A 3B CB            	ld	a,(cur_level)
     154.  00:4ADA  87                  	add	a,a
     155.  00:4ADB  5F                  	ld	e,a
     156.  00:4ADC  16 00               	ld	d,0
     157.  00:4ADE  A7                  	and	a
     158.  00:4ADF  ED 52               	sbc	hl,de					; at level 15 frequency is a wave each 2,5 seconds
     159.  00:4AE1  22 3E CB            	ld	(assault_wave_timer),hl	; 180 - 2*cur_level
     160.  00:4AE4                      	
     161.  00:4AE4                      
     162.  00:4AE4  CD 22 4A            	call	land_now_test
     163.  00:4AE7                      	
     164.  00:4AE7  CD 15 4A            	call	rand8
     165.  00:4AEA  E6 07               	and	7			
     166.  00:4AEC                      	; call 	manual_wave_ctrl
     167.  00:4AEC                      	
     168.  00:4AEC  CA 0C 4B            	jp	z,wave0
     169.  00:4AEF  3D                  	dec	a
     170.  00:4AF0  CA 0C 4B            	jp	z,wave1
     171.  00:4AF3  3D                  	dec	a
     172.  00:4AF4  CA 98 4B            	jp	z,wave2
     173.  00:4AF7  3D                  	dec	a
     174.  00:4AF8  CA 24 4C            	jp	z,wave3
     175.  00:4AFB  3D                  	dec	a
     176.  00:4AFC  CA 9C 4C            	jp	z,wave4
     177.  00:4AFF  3D                  	dec	a
     178.  00:4B00  CA 30 4D            	jp	z,wave5
     179.  00:4B03  3D                  	dec	a
     180.  00:4B04  CA A4 4D            	jp	z,wave6
     181.  00:4B07  3D                  	dec	a
     182.  00:4B08  CA AF 4D            	jp	z,wave7
     183.  00:4B0B  C9                  	ret		; no wave at all
     184.  00:4B0C                      	
     185.  00:4B0C                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     186.  00:4B0C                      
     187.  00:4B0C                      	; align 0x100
     188.  00:4B0C                      ; spritecolors:
     189.  00:4B0C                      	; db       15,14, 9, 7
     190.  00:4B0C                      	; db        9, 3,14,15
     191.  00:4B0C                      
     192.  00:4B0C                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     193.  00:4B0C                      ;
     194.  00:4B0C                      ;	enemies n#0 coming frontally
     195.  00:4B0C                      ;
     196.  00:4B0C                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     197.  00:4B0C                      	
     198.  00:4B0C                      wave0:
     199.  00:4B0C                      wave1:
     200.  00:4B0C  DD 21 AB CB         	ld  ix,enemies
     201.  00:4B10  FD 26 0C            	ld	iyh,max_enem
     202.  00:4B13                      1:
     203.  00:4B13  CD 15 4A            	call	rand8
     204.  00:4B16  E6 07               	and	7
     205.  00:4B18  C6 04               	add	a,4
     206.  00:4B1A  47                  	ld	b,a			; frame
     207.  00:4B1B                      	
     208.  00:4B1B  3A 43 CB            	ld	a,(dxmap)
     209.  00:4B1E  A7                  	and	a
     210.  00:4B1F  F2 33 4B            	jp	p,.pos
     211.  00:4B22                      .neg
     212.  00:4B22  11 C0 FF            	ld	de,-64
     213.  00:4B25  0E 01               	ld	c,+1		; enemies going right
     214.  00:4B27  78                  	ld	a,b
     215.  00:4B28  87 87 87 87         [4]	add	a,a
     216.  00:4B2C  47                  	ld	b,a
     217.  00:4B2D  D9                  	exx	
     218.  00:4B2E  11 01 00            	ld 	de,1		; enemy speed = 1
     219.  00:4B31  18 10               	jr	1f
     220.  00:4B33                      .pos
     221.  00:4B33  11 20 01            	ld	de,256+32
     222.  00:4B36  0E 41               	ld	c,1+64		; enemies going left
     223.  00:4B38  78                  	ld	a,b
     224.  00:4B39  87                  	add	a,a
     225.  00:4B3A  3C                  	inc	a
     226.  00:4B3B  87 87 87            [3]	add	a,a
     227.  00:4B3E  47                  	ld	b,a
     228.  00:4B3F  D9                  	exx	
     229.  00:4B40  11 FF FF            	ld 	de,-1		; enemy speed = -1
     230.  00:4B43                      1:
     231.  00:4B43  01 0F 00            	ld  bc,enemy_data
     232.  00:4B46  D9                  	exx		
     233.  00:4B47                      
     234.  00:4B47  CD 15 4A            	call	rand8
     235.  00:4B4A  E6 0F               	and	15			; Y off set
     236.  00:4B4C                      	
     237.  00:4B4C  2A 44 CB            	ld	hl,(xmap)
     238.  00:4B4F  19                  	add	hl,de
     239.  00:4B50                      
     240.  00:4B50                      1:
     241.  00:4B50  DD CB 07 46         	bit	0,(ix+enemy_data.status)
     242.  00:4B54  20 38               	jr  nz,.next
     243.  00:4B56                      
     244.  00:4B56  DD 71 07            	ld  (ix+enemy_data.status),c
     245.  00:4B59  DD 70 0A            	ld	(ix+enemy_data.frame),b
     246.  00:4B5C                      
     247.  00:4B5C  DD 36 09 00         	ld  (ix+enemy_data.kind),0
     248.  00:4B60  D9                  	exx
     249.  00:4B61  DD 73 0D            	ld	(ix+enemy_data.speed),e
     250.  00:4B64  DD 72 0E            	ld	(ix+enemy_data.speed+1),d
     251.  00:4B67  D9                  	exx
     252.  00:4B68                      
     253.  00:4B68  11 10 00            	ld 		de,16
     254.  00:4B6B  CB 6F               	bit	5,a
     255.  00:4B6D  28 03               	jr	z,2f
     256.  00:4B6F  11 F0 FF            	ld 		de,-16
     257.  00:4B72                      	
     258.  00:4B72  19                  2:	add 	hl,de 
     259.  00:4B73  DD 75 01            	ld  	(ix+enemy_data.x),l
     260.  00:4B76  DD 74 02            	ld  	(ix+enemy_data.x+1),h
     261.  00:4B79  DD 77 00            	ld  	(ix+enemy_data.y),a
     262.  00:4B7C  C6 20               	add		a,32
     263.  00:4B7E  CD 60 47            	call	set_size
     264.  00:4B81  D9                  	exx	
     265.  00:4B82  DD 09               	add ix,bc
     266.  00:4B84  D9                  	exx
     267.  00:4B85  FD 25               	dec	iyh
     268.  00:4B87  C8                  	ret	z
     269.  00:4B88  FE A0               	cp	mapHeight*16-16
     270.  00:4B8A  DA 50 4B            	jp	c,1b
     271.  00:4B8D  C9                  	ret
     272.  00:4B8E                      
     273.  00:4B8E                      .next
     274.  00:4B8E  D9                  	exx	
     275.  00:4B8F  DD 09               	add ix,bc
     276.  00:4B91  D9                  	exx
     277.  00:4B92  FD 25               	dec	iyh
     278.  00:4B94  C8                  	ret	z
     279.  00:4B95  C3 50 4B            	jp	1b
     280.  00:4B98                      	
     281.  00:4B98                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     282.  00:4B98                      ;
     283.  00:4B98                      ;	enemies n#2 coming from back
     284.  00:4B98                      ;
     285.  00:4B98                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     286.  00:4B98                      wave2:
     287.  00:4B98  3A 43 CB            	ld	a,(dxmap)
     288.  00:4B9B  CB 2F               	sra a			; de' = player speed x2
     289.  00:4B9D  F6 01               	or  1
     290.  00:4B9F  5F                  	ld	e,a
     291.  00:4BA0  17                  	rla
     292.  00:4BA1  9F                  	sbc a,a
     293.  00:4BA2  57                  	ld	d,a
     294.  00:4BA3  D9                  	exx
     295.  00:4BA4                      
     296.  00:4BA4  28 15               	jr	z,.pos				
     297.  00:4BA6                      .neg
     298.  00:4BA6  11 20 01            	ld	de,256+32
     299.  00:4BA9  0E 41               	ld	c,1+64		; enemies going left
     300.  00:4BAB                      	
     301.  00:4BAB  CD 15 4A            	call	rand8
     302.  00:4BAE  E6 07               	and	7
     303.  00:4BB0  C6 04               	add	a,4
     304.  00:4BB2  87                  	add	a,a
     305.  00:4BB3  3C                  	inc	a
     306.  00:4BB4  87 87 87            [3]	add	a,a
     307.  00:4BB7  47                  	ld	b,a			; frame
     308.  00:4BB8                      	
     309.  00:4BB8  C3 CC 4B            	jp	1f
     310.  00:4BBB                      .pos
     311.  00:4BBB  11 C0 FF            	ld	de,-64
     312.  00:4BBE  0E 01               	ld	c,+1		; enemies going right
     313.  00:4BC0                      
     314.  00:4BC0  CD 15 4A            	call	rand8
     315.  00:4BC3  E6 07               	and	7
     316.  00:4BC5  C6 04               	add	a,4
     317.  00:4BC7  87 87 87 87         [4]	add	a,a
     318.  00:4BCB  47                  	ld	b,a			; frame
     319.  00:4BCC                      	
     320.  00:4BCC                      1:
     321.  00:4BCC  CD 15 4A            	call	rand8
     322.  00:4BCF  E6 0F               	and	15			; Y off set
     323.  00:4BD1  C6 90               	add	a,mapHeight*16-32
     324.  00:4BD3                      
     325.  00:4BD3  2A 44 CB            	ld	hl,(xmap)
     326.  00:4BD6  19                  	add	hl,de
     327.  00:4BD7                      
     328.  00:4BD7                      	; bit	7,b			; pick up a random bit from frame number
     329.  00:4BD7                      	; ld  ix,enemies1
     330.  00:4BD7                      	; ld	iyh,max_enem1
     331.  00:4BD7                      	; jr	z,1f
     332.  00:4BD7                      	; ld  ix,enemies2
     333.  00:4BD7                      	; ld	iyh,max_enem2
     334.  00:4BD7                      ; 1:
     335.  00:4BD7  DD 21 AB CB         	ld  ix,enemies
     336.  00:4BDB  FD 26 0C            	ld	iyh,max_enem
     337.  00:4BDE                      
     338.  00:4BDE  11 0F 00            	ld  de,enemy_data
     339.  00:4BE1                      1:
     340.  00:4BE1  DD CB 07 46         	bit	0,(ix+enemy_data.status)
     341.  00:4BE5  20 36               	jr  nz,.next
     342.  00:4BE7                      
     343.  00:4BE7  DD 71 07            	ld  (ix+enemy_data.status),c
     344.  00:4BEA  DD 70 0A            	ld	(ix+enemy_data.frame),b
     345.  00:4BED                      
     346.  00:4BED  DD 36 09 02         	ld  (ix+enemy_data.kind),2
     347.  00:4BF1                      
     348.  00:4BF1  D9                  	exx	
     349.  00:4BF2  DD 73 0D            	ld	(ix+enemy_data.speed),e
     350.  00:4BF5  DD 72 0E            	ld	(ix+enemy_data.speed+1),d
     351.  00:4BF8  D9                  	exx
     352.  00:4BF9                      	
     353.  00:4BF9  C5                  	push	bc
     354.  00:4BFA  CB 47               	bit	0,a			; pick up a random bit from Y
     355.  00:4BFC  01 08 00            	ld 	bc,8
     356.  00:4BFF  28 03               	jr z,11f
     357.  00:4C01  01 F8 FF            	ld 	bc,-8
     358.  00:4C04  09                  11:	add hl,bc 
     359.  00:4C05  DD 75 01            	ld  (ix+enemy_data.x),l
     360.  00:4C08  DD 74 02            	ld  (ix+enemy_data.x+1),h
     361.  00:4C0B  C1                  	pop		bc
     362.  00:4C0C                      	
     363.  00:4C0C  DD 77 00            	ld  (ix+enemy_data.y),a
     364.  00:4C0F                      
     365.  00:4C0F  CD 60 47            	call	set_size
     366.  00:4C12                      
     367.  00:4C12  DD 19               	add ix,de
     368.  00:4C14  FD 25               	dec	iyh
     369.  00:4C16  C8                  	ret	z
     370.  00:4C17  D6 20               	sub	a,32
     371.  00:4C19  D2 E1 4B            	jp	nc,1b
     372.  00:4C1C  C9                  	ret
     373.  00:4C1D                      
     374.  00:4C1D                      .next
     375.  00:4C1D  DD 19               	add ix,de
     376.  00:4C1F  FD 25               	dec	iyh
     377.  00:4C21  C8                  	ret	z
     378.  00:4C22  18 BD               	jr	1b
     379.  00:4C24                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     380.  00:4C24                      ;
     381.  00:4C24                      ; waving enemies n#5 from back
     382.  00:4C24                      ;
     383.  00:4C24                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     384.  00:4C24                      wave3:
     385.  00:4C24  3A 43 CB            	ld	a,(dxmap)
     386.  00:4C27  CB 2F               	sra a			; de' = player speed x 2
     387.  00:4C29  F6 01               	or  1
     388.  00:4C2B  5F                  	ld	e,a
     389.  00:4C2C  17                  	rla
     390.  00:4C2D  9F                  	sbc a,a
     391.  00:4C2E  57                  	ld	d,a
     392.  00:4C2F  D9                  	exx
     393.  00:4C30                      
     394.  00:4C30  28 08               	jr	z,.pos				
     395.  00:4C32                      .neg
     396.  00:4C32  11 20 01            	ld	de,256+32
     397.  00:4C35  01 41 68            	ld	bc,256*(96+8)+1+64		; enemies going left
     398.  00:4C38  18 06               	jr	1f
     399.  00:4C3A                      .pos
     400.  00:4C3A  11 C0 FF            	ld	de,-64
     401.  00:4C3D  01 01 60            	ld	bc,256*96+1			; enemies going right
     402.  00:4C40                      	
     403.  00:4C40                      1:
     404.  00:4C40  CD 15 4A            	call	rand8
     405.  00:4C43  E6 0F               	and	15					; random Y offset
     406.  00:4C45  C6 80               	add	a,mapHeight*16-48
     407.  00:4C47                      	
     408.  00:4C47  2A 44 CB            	ld	hl,(xmap)
     409.  00:4C4A  19                  	add	hl,de
     410.  00:4C4B                      
     411.  00:4C4B                      	; bit	0,a			; pick up a random bit from Y offset
     412.  00:4C4B                      	; ld  ix,enemies1
     413.  00:4C4B                      	; ld	iyh,max_enem1
     414.  00:4C4B                      	; jr	z,1f
     415.  00:4C4B                      	; ld  ix,enemies2
     416.  00:4C4B                      	; ld	iyh,max_enem2
     417.  00:4C4B                      ; 1:
     418.  00:4C4B  DD 21 AB CB         	ld  ix,enemies
     419.  00:4C4F  FD 26 0C            	ld	iyh,max_enem
     420.  00:4C52  11 0F 00            	ld  de,enemy_data
     421.  00:4C55                      1:
     422.  00:4C55  DD CB 07 46         	bit	0,(ix+enemy_data.status)
     423.  00:4C59  20 3A               	jr  nz,.next
     424.  00:4C5B                      
     425.  00:4C5B  DD 71 07            	ld  (ix+enemy_data.status),c
     426.  00:4C5E  DD 70 0A            	ld	(ix+enemy_data.frame),b
     427.  00:4C61                      
     428.  00:4C61  DD 36 09 05         	ld  (ix+enemy_data.kind),5
     429.  00:4C65  DD 36 08 00         	ld	(ix+enemy_data.cntr),0
     430.  00:4C69                      
     431.  00:4C69  D9                  	exx	
     432.  00:4C6A  DD 73 0D            	ld	(ix+enemy_data.speed),e
     433.  00:4C6D  DD 72 0E            	ld	(ix+enemy_data.speed+1),d
     434.  00:4C70  D9                  	exx
     435.  00:4C71                      	
     436.  00:4C71  C5                  	push	bc
     437.  00:4C72  CB 67               	bit	4,a
     438.  00:4C74  01 10 00            	ld bc,16
     439.  00:4C77  28 03               	jr	z,2f
     440.  00:4C79  01 F0 FF            	ld	bc,-16
     441.  00:4C7C                      2:	
     442.  00:4C7C  09                  	add hl,bc 
     443.  00:4C7D  DD 75 01            	ld  (ix+enemy_data.x),l
     444.  00:4C80  DD 74 02            	ld  (ix+enemy_data.x+1),h
     445.  00:4C83  C1                  	pop		bc
     446.  00:4C84                      	
     447.  00:4C84  DD 77 00            	ld  (ix+enemy_data.y),a
     448.  00:4C87                      
     449.  00:4C87  CD 60 47            	call	set_size
     450.  00:4C8A                      
     451.  00:4C8A  DD 19               	add ix,de
     452.  00:4C8C  FD 25               	dec	iyh
     453.  00:4C8E  C8                  	ret	z
     454.  00:4C8F  D6 18               	sub	a,24
     455.  00:4C91  D2 55 4C            	jp	nc,1b
     456.  00:4C94  C9                  	ret
     457.  00:4C95                      
     458.  00:4C95                      .next
     459.  00:4C95  DD 19               	add ix,de
     460.  00:4C97  FD 25               	dec	iyh
     461.  00:4C99  C8                  	ret	z
     462.  00:4C9A  18 B9               	jr	1b
     463.  00:4C9C                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     464.  00:4C9C                      ;
     465.  00:4C9C                      ;	enemies n#4 coming from back
     466.  00:4C9C                      ; 
     467.  00:4C9C                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     468.  00:4C9C                      wave4:
     469.  00:4C9C  3A 43 CB            	ld	a,(dxmap)
     470.  00:4C9F  CB 2F               	sra a			; de' = player speed x 1.5
     471.  00:4CA1  5F                  	ld	e,a
     472.  00:4CA2  07                  	RLCA
     473.  00:4CA3  9F                  	sbc a,a
     474.  00:4CA4  57                  	ld	d,a
     475.  00:4CA5  3A 43 CB            	ld	a,(dxmap)
     476.  00:4CA8  83                  	add	a,e
     477.  00:4CA9  5F                  	ld	e,a
     478.  00:4CAA  D9                  	exx
     479.  00:4CAB                      	
     480.  00:4CAB                      _wave4_cont:
     481.  00:4CAB                      
     482.  00:4CAB  F2 C2 4C            	jp	p,.pos				
     483.  00:4CAE                      .neg
     484.  00:4CAE  11 60 01            	ld	de,256+96
     485.  00:4CB1  0E 41               	ld	c,+1+64		; enemies going left
     486.  00:4CB3                      	
     487.  00:4CB3  CD 15 4A            	call	rand8
     488.  00:4CB6  E6 07               	and	7
     489.  00:4CB8  C6 04               	add	a,4
     490.  00:4CBA  87                  	add	a,a
     491.  00:4CBB  3C                  	inc	a
     492.  00:4CBC  87 87 87            [3]	add	a,a
     493.  00:4CBF  47                  	ld	b,a			; frame
     494.  00:4CC0                      
     495.  00:4CC0  18 11               	jr	1f
     496.  00:4CC2                      .pos
     497.  00:4CC2  11 80 FF            	ld	de,-128
     498.  00:4CC5  0E 01               	ld	c,+1		; enemies going right
     499.  00:4CC7                      
     500.  00:4CC7  CD 15 4A            	call	rand8
     501.  00:4CCA  E6 07               	and	7
     502.  00:4CCC  3E 04               	ld	a,4
     503.  00:4CCE  87 87 87 87         [4]	add	a,a
     504.  00:4CD2  47                  	ld	b,a			; frame
     505.  00:4CD3                      	
     506.  00:4CD3                      1:
     507.  00:4CD3  CD 15 4A            	call	rand8
     508.  00:4CD6  E6 0F               	and	15			; Y off set
     509.  00:4CD8                      
     510.  00:4CD8  CB 4F               	bit	1,a			; pick up a random bit from Y offset
     511.  00:4CDA  28 02               	jr	z,1f
     512.  00:4CDC  CB F9               	set	7,c			; go up instead of down
     513.  00:4CDE                      1:
     514.  00:4CDE                      		
     515.  00:4CDE  2A 44 CB            	ld	hl,(xmap)
     516.  00:4CE1  19                  	add	hl,de
     517.  00:4CE2                      
     518.  00:4CE2                      	; bit	0,a			; pick up a random bit from Y offset
     519.  00:4CE2                      	; ld  ix,enemies1
     520.  00:4CE2                      	; ld	iyh,max_enem1
     521.  00:4CE2                      	; jr	z,1f
     522.  00:4CE2                      	; ld  ix,enemies2
     523.  00:4CE2                      	; ld	iyh,max_enem2
     524.  00:4CE2                      ; 1:
     525.  00:4CE2  DD 21 AB CB         	ld  ix,enemies
     526.  00:4CE6  FD 26 0C            	ld	iyh,max_enem
     527.  00:4CE9  11 0F 00            	ld  de,enemy_data
     528.  00:4CEC                      1:
     529.  00:4CEC  DD CB 07 46         	bit	0,(ix+enemy_data.status)
     530.  00:4CF0  20 37               	jr  nz,.next
     531.  00:4CF2                      
     532.  00:4CF2  DD 71 07            	ld  (ix+enemy_data.status),c
     533.  00:4CF5  DD 70 0A            	ld	(ix+enemy_data.frame),b
     534.  00:4CF8                      
     535.  00:4CF8  DD 36 09 04         	ld  (ix+enemy_data.kind),4
     536.  00:4CFC                      
     537.  00:4CFC  D9                  	exx	
     538.  00:4CFD  DD 73 0D            	ld	(ix+enemy_data.speed),e
     539.  00:4D00  DD 72 0E            	ld	(ix+enemy_data.speed+1),d
     540.  00:4D03  CB 7A               	bit	7,d
     541.  00:4D05  D9                  	exx
     542.  00:4D06                      	
     543.  00:4D06  C5                  	push	bc
     544.  00:4D07  01 10 00            	ld bc,16
     545.  00:4D0A  28 03               	jr	z,11f
     546.  00:4D0C  01 F0 FF            	ld bc,-16
     547.  00:4D0F  09                  11:	add hl,bc 
     548.  00:4D10  DD 75 01            	ld  (ix+enemy_data.x),l
     549.  00:4D13  DD 74 02            	ld  (ix+enemy_data.x+1),h
     550.  00:4D16  C1                  	pop		bc
     551.  00:4D17                      	
     552.  00:4D17  DD 77 00            	ld  (ix+enemy_data.y),a
     553.  00:4D1A  C6 18               	add	a,24
     554.  00:4D1C                      
     555.  00:4D1C  CD 60 47            	call	set_size
     556.  00:4D1F                      
     557.  00:4D1F  DD 19               	add ix,de
     558.  00:4D21  FD 25               	dec	iyh
     559.  00:4D23  C8                  	ret	z
     560.  00:4D24  FE A0               	cp	mapHeight*16-16
     561.  00:4D26  38 C4               	jr	c,1b
     562.  00:4D28  C9                  	ret
     563.  00:4D29                      
     564.  00:4D29                      .next
     565.  00:4D29  DD 19               	add ix,de
     566.  00:4D2B  FD 25               	dec	iyh
     567.  00:4D2D  C8                  	ret	z
     568.  00:4D2E  18 BC               	jr	1b
     569.  00:4D30                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     570.  00:4D30                      ;
     571.  00:4D30                      ; spinning enemy #6 
     572.  00:4D30                      ;
     573.  00:4D30                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     574.  00:4D30                      wave5:
     575.  00:4D30  3A 43 CB            	ld	a,(dxmap)
     576.  00:4D33  CB 2F               	sra a			; de' = player speed x 2
     577.  00:4D35  F6 01               	or  1
     578.  00:4D37  5F                  	ld	e,a
     579.  00:4D38  17                  	rla
     580.  00:4D39  9F                  	sbc a,a
     581.  00:4D3A  57                  	ld	d,a
     582.  00:4D3B  D9                  	exx
     583.  00:4D3C                      
     584.  00:4D3C  28 07               	jr	z,.pos				
     585.  00:4D3E                      .neg
     586.  00:4D3E  11 20 01            	ld	de,256+32
     587.  00:4D41  0E 41               	ld	c,+1+64		; enemies going left
     588.  00:4D43  18 05               	jr	1f
     589.  00:4D45                      .pos
     590.  00:4D45  11 C0 FF            	ld	de,-64
     591.  00:4D48  0E 01               	ld	c,+1		; enemies going right
     592.  00:4D4A                      	
     593.  00:4D4A                      1:
     594.  00:4D4A  CD 15 4A            	call	rand8
     595.  00:4D4D  E6 0F               	and	15
     596.  00:4D4F                      	
     597.  00:4D4F  CB 4F               	bit	1,a			; pick up a random bit from Y offset
     598.  00:4D51  28 02               	jr	z,1f
     599.  00:4D53  CB F9               	set	7,c			; go up instead of down
     600.  00:4D55                      1:
     601.  00:4D55                      	
     602.  00:4D55  2A 44 CB            	ld	hl,(xmap)
     603.  00:4D58  19                  	add	hl,de
     604.  00:4D59                      
     605.  00:4D59                      	; bit	0,a			; pick up a random bit from Y offset
     606.  00:4D59                      	; ld  ix,enemies1
     607.  00:4D59                      	; ld	iyh,max_enem1
     608.  00:4D59                      	; jr	z,1f
     609.  00:4D59                      	; ld  ix,enemies2
     610.  00:4D59                      	; ld	iyh,max_enem2
     611.  00:4D59                      ; 1:
     612.  00:4D59  DD 21 AB CB         	ld  ix,enemies
     613.  00:4D5D  FD 26 0C            	ld	iyh,max_enem
     614.  00:4D60  11 0F 00            	ld  de,enemy_data
     615.  00:4D63                      1:
     616.  00:4D63  DD CB 07 46         	bit	0,(ix+enemy_data.status)
     617.  00:4D67  20 34               	jr  nz,.next
     618.  00:4D69                      
     619.  00:4D69  DD 71 07            	ld  (ix+enemy_data.status),c
     620.  00:4D6C  DD 36 09 06         	ld  (ix+enemy_data.kind),6
     621.  00:4D70                      
     622.  00:4D70  D9                  	exx	
     623.  00:4D71  DD 73 0D            	ld	(ix+enemy_data.speed),e
     624.  00:4D74  DD 72 0E            	ld	(ix+enemy_data.speed+1),d
     625.  00:4D77  CB 7A               	bit	7,d
     626.  00:4D79  D9                  	exx
     627.  00:4D7A                      	
     628.  00:4D7A  C5                  	push	bc
     629.  00:4D7B  01 10 00            	ld bc,16
     630.  00:4D7E  28 03               	jr	z,11f
     631.  00:4D80  01 F0 FF            	ld bc,-16
     632.  00:4D83  09                  11:	add hl,bc 
     633.  00:4D84  DD 75 01            	ld  (ix+enemy_data.x),l
     634.  00:4D87  DD 74 02            	ld  (ix+enemy_data.x+1),h
     635.  00:4D8A  C1                  	pop		bc
     636.  00:4D8B                      	
     637.  00:4D8B  DD 77 00            	ld  (ix+enemy_data.y),a
     638.  00:4D8E  C6 18               	add	a,24
     639.  00:4D90                      
     640.  00:4D90  CD 60 47            	call	set_size
     641.  00:4D93                      
     642.  00:4D93  DD 19               	add ix,de
     643.  00:4D95  FD 25               	dec	iyh
     644.  00:4D97  C8                  	ret	z
     645.  00:4D98  FE A0               	cp	mapHeight*16-16
     646.  00:4D9A  38 C7               	jr	c,1b
     647.  00:4D9C  C9                  	ret
     648.  00:4D9D                      
     649.  00:4D9D                      .next
     650.  00:4D9D  DD 19               	add ix,de
     651.  00:4D9F  FD 25               	dec	iyh
     652.  00:4DA1  C8                  	ret	z
     653.  00:4DA2  18 BF               	jr	1b
     654.  00:4DA4                      
     655.  00:4DA4                      
     656.  00:4DA4                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     657.  00:4DA4                      ;
     658.  00:4DA4                      ;	fixed enemies n#4 coming from back double speed
     659.  00:4DA4                      ;
     660.  00:4DA4                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     661.  00:4DA4                      wave6:
     662.  00:4DA4  3A 43 CB            	ld	a,(dxmap)
     663.  00:4DA7  5F                  	ld	e,a			; de' = player speed x 4
     664.  00:4DA8  17                  	rla
     665.  00:4DA9  9F                  	sbc a,a
     666.  00:4DAA  57                  	ld	d,a
     667.  00:4DAB  D9                  	exx
     668.  00:4DAC  C3 AB 4C            	jp _wave4_cont
     669.  00:4DAF                      	
     670.  00:4DAF                      
     671.  00:4DAF                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     672.  00:4DAF                      ;
     673.  00:4DAF                      ;  enemies n#7 (spinning)  coming from back double speed
     674.  00:4DAF                      ;
     675.  00:4DAF                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     676.  00:4DAF                      wave7:
     677.  00:4DAF  3A 43 CB            	ld	a,(dxmap)
     678.  00:4DB2  CB 2F               	sra a			; de' = player speed x 1.5
     679.  00:4DB4  5F                  	ld	e,a
     680.  00:4DB5  07                  	RLCA
     681.  00:4DB6  9F                  	sbc a,a
     682.  00:4DB7  57                  	ld	d,a
     683.  00:4DB8  3A 43 CB            	ld	a,(dxmap)
     684.  00:4DBB  83                  	add	a,e
     685.  00:4DBC  5F                  	ld	e,a
     686.  00:4DBD  D9                  	exx
     687.  00:4DBE                      
     688.  00:4DBE  F2 C8 4D            	jp	p,.pos				
     689.  00:4DC1                      .neg
     690.  00:4DC1  11 70 01            	ld	de,256+112
     691.  00:4DC4  0E 41               	ld	c,1+64				; enemies going left
     692.  00:4DC6  18 05               	jr	1f
     693.  00:4DC8                      .pos
     694.  00:4DC8  11 80 FF            	ld	de,-128
     695.  00:4DCB  0E 01               	ld	c,+1				; enemies going right
     696.  00:4DCD                      	
     697.  00:4DCD                      1:
     698.  00:4DCD  CD 15 4A            	call	rand8
     699.  00:4DD0  E6 0F               	and	15			; Y off set
     700.  00:4DD2                      
     701.  00:4DD2  2A 44 CB            	ld	hl,(xmap)
     702.  00:4DD5  19                  	add	hl,de
     703.  00:4DD6                      
     704.  00:4DD6                      	; bit	0,a			; pick up a random bit from Y offset
     705.  00:4DD6                      	; ld  ix,enemies1
     706.  00:4DD6                      	; ld	iyh,max_enem1
     707.  00:4DD6                      	; jr	z,1f
     708.  00:4DD6                      	; ld  ix,enemies2
     709.  00:4DD6                      	; ld	iyh,max_enem2
     710.  00:4DD6                      ; 1:
     711.  00:4DD6  DD 21 AB CB         	ld  ix,enemies
     712.  00:4DDA  FD 26 0C            	ld	iyh,max_enem
     713.  00:4DDD  11 0F 00            	ld  de,enemy_data
     714.  00:4DE0                      1:
     715.  00:4DE0  DD CB 07 46         	bit	0,(ix+enemy_data.status)
     716.  00:4DE4  20 30               	jr  nz,.next
     717.  00:4DE6                      
     718.  00:4DE6  DD 71 07            	ld  (ix+enemy_data.status),c
     719.  00:4DE9                      
     720.  00:4DE9  DD 36 09 07         	ld  (ix+enemy_data.kind),7
     721.  00:4DED                      	
     722.  00:4DED  D9                  	exx	
     723.  00:4DEE  DD 73 0D            	ld	(ix+enemy_data.speed),e
     724.  00:4DF1  DD 72 0E            	ld	(ix+enemy_data.speed+1),d
     725.  00:4DF4  D9                  	exx
     726.  00:4DF5                      	
     727.  00:4DF5  C5                  	push	bc
     728.  00:4DF6  01 10 00            	ld bc,16
     729.  00:4DF9  09                  	add hl,bc 
     730.  00:4DFA  DD 75 01            	ld  (ix+enemy_data.x),l
     731.  00:4DFD  DD 74 02            	ld  (ix+enemy_data.x+1),h
     732.  00:4E00  DD 75 08            	ld	(ix+enemy_data.cntr),l
     733.  00:4E03  C1                  	pop		bc
     734.  00:4E04                      	
     735.  00:4E04  DD 77 00            	ld  (ix+enemy_data.y),a
     736.  00:4E07  C6 18               	add	a,24
     737.  00:4E09                      
     738.  00:4E09  CD 60 47            	call	set_size
     739.  00:4E0C                      
     740.  00:4E0C  DD 19               	add ix,de
     741.  00:4E0E  FD 25               	dec	iyh
     742.  00:4E10  C8                  	ret	z
     743.  00:4E11  FE A0               	cp	mapHeight*16-16
     744.  00:4E13  38 CB               	jr	c,1b
     745.  00:4E15  C9                  	ret
     746.  00:4E16                      
     747.  00:4E16                      .next
     748.  00:4E16  DD 19               	add ix,de
     749.  00:4E18  FD 25               	dec	iyh
     750.  00:4E1A  C8                  	ret	z
     751.  00:4E1B  18 C3               	jr	1b
     752.  00:4E1D                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     753.  00:4E1D                      ;
     754.  00:4E1D                      ;   logic for enemies 
     755.  00:4E1D                      ;
     756.  00:4E1D                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     757.  00:4E1D                      
     758.  00:4E1D                      npc_loop:
     759.  00:4E1D  DD 21 AB CB         	ld  ix,enemies
     760.  00:4E21  06 0C               	ld  b,max_enem
     761.  00:4E23                      
     762.  00:4E23  C5                  1:	push	bc
     763.  00:4E24  DD 7E 07            	ld  a,(ix+enemy_data.status)
     764.  00:4E27  E6 01               	and 1
     765.  00:4E29  28 22               	jr  z,next
     766.  00:4E2B                      
     767.  00:4E2B  DD 7E 09            	ld	a,(ix+enemy_data.kind)
     768.  00:4E2E  A7                  	and	a
     769.  00:4E2F  CA 99 4E            	jp	z,enemy0
     770.  00:4E32  3D 3D               [2]	dec a	
     771.  00:4E34  CA F4 4E            	jp 	z,enemy2
     772.  00:4E37  3D 3D               [2]	dec a	
     773.  00:4E39  CA 48 4F            	jp 	z,enemy4
     774.  00:4E3C  3D                  	dec a			;cp	5
     775.  00:4E3D  CA 40 51            	jp 	z,enemy5
     776.  00:4E40  3D                  	dec a			;cp	6
     777.  00:4E41  CA A7 51            	jp 	z,enemy6
     778.  00:4E44  3D                  	dec a			;cp	7
     779.  00:4E45  CA 2D 52            	jp 	z,enemy7
     780.  00:4E48                      
     781.  00:4E48  FE F8               	cp	255-7
     782.  00:4E4A  CA 7D 4E            	jp z,enemy255
     783.  00:4E4D                      
     784.  00:4E4D                      next:
     785.  00:4E4D  C1                  	pop	bc
     786.  00:4E4E  11 0F 00            	ld  de,enemy_data
     787.  00:4E51  DD 19               	add ix,de
     788.  00:4E53  10 CE               	djnz    1b
     789.  00:4E55  C9                  	ret
     790.  00:4E56                      ;;;;;;;;;;;;;;;;;;;;
     791.  00:4E56                      npcdies:
     792.  00:4E56  FD 36 07 00         	ld  (iy+enemy_data.status),0	; turn off this bullet
     793.  00:4E5A                      
     794.  00:4E5A  DD 36 0B 0A         	ld	(ix+enemy_data.color),10	; start explosion
     795.  00:4E5E  DD 36 09 FF         	ld	(ix+enemy_data.kind),255
     796.  00:4E62  DD 36 08 02         	ld	(ix+enemy_data.cntr),2
     797.  00:4E66  DD 36 0A 0C         	ld	(ix+enemy_data.frame),12
     798.  00:4E6A                      
     799.  00:4E6A  CD 15 4A            	call	rand8
     800.  00:4E6D  E6 03               	and	3
     801.  00:4E6F  C6 02               	add	a,2			; random enemy explosion
     802.  00:4E71  CD AB 55            	call AFXPLAY
     803.  00:4E74                      
     804.  00:4E74  01 64 00            	ld	bc,100		; score for destruction of a flying enemy
     805.  00:4E77  CD 0B 4A            	call	add_bc_score_bin
     806.  00:4E7A  C3 4D 4E            	jp	next
     807.  00:4E7D                      	
     808.  00:4E7D                      ;;;;;;;;;;;;;;;;;;;;
     809.  00:4E7D                      ; explosion
     810.  00:4E7D                      ;;;;;;;;;;;;;;;;;;;;
     811.  00:4E7D                      enemy255:
     812.  00:4E7D  DD 35 08            	dec	(ix+enemy_data.cntr)
     813.  00:4E80  C2 4D 4E            	jp	nz,next
     814.  00:4E83  DD 36 08 02         	ld	(ix+enemy_data.cntr),2
     815.  00:4E87  DD 34 0A            	inc	(ix+enemy_data.frame)
     816.  00:4E8A  DD 7E 0A            	ld	a,(ix+enemy_data.frame)
     817.  00:4E8D  FE 1B               	cp	31-4
     818.  00:4E8F  DA 4D 4E            	jp	c,next
     819.  00:4E92  DD 36 07 00         	ld	(ix+enemy_data.status),0
     820.  00:4E96  C3 4D 4E            	jp	next
     821.  00:4E99                      
     822.  00:4E99                      ;;;;;;;;;;;;;;;;;;;;
     823.  00:4E99                      
     824.  00:4E99                      enemy0:
     825.  00:4E99                      enemy1:
     826.  00:4E99  DD CB 07 76         	bit 6,(ix+enemy_data.status)
     827.  00:4E9D  28 23               	jr  z,.go_right
     828.  00:4E9F                      .go_left:
     829.  00:4E9F                      
     830.  00:4E9F  DD 6E 01            	ld	l,(ix+enemy_data.x)
     831.  00:4EA2  DD 66 02            	ld	h,(ix+enemy_data.x+1)
     832.  00:4EA5  2B                  	dec	hl
     833.  00:4EA6  DD 75 01            	ld  (ix+enemy_data.x),l
     834.  00:4EA9  DD 74 02            	ld  (ix+enemy_data.x+1),h
     835.  00:4EAC  ED 5B 44 CB         	ld	de,(xmap)
     836.  00:4EB0  A7                  	and	a
     837.  00:4EB1  ED 52               	sbc	hl,de
     838.  00:4EB3  11 E0 FF            	ld	de,-32
     839.  00:4EB6  A7                  	and	a
     840.  00:4EB7  ED 52               	sbc	hl,de
     841.  00:4EB9  F2 E3 4E            	jp  p,1f
     842.  00:4EBC  DD 36 07 00         	ld	(ix+enemy_data.status),0
     843.  00:4EC0  18 21               	jr  1f
     844.  00:4EC2                      
     845.  00:4EC2                      .go_right:
     846.  00:4EC2                      
     847.  00:4EC2  DD 6E 01            	ld	l,(ix+enemy_data.x)
     848.  00:4EC5  DD 66 02            	ld	h,(ix+enemy_data.x+1)
     849.  00:4EC8  23                  	inc	hl
     850.  00:4EC9  DD 75 01            	ld  (ix+enemy_data.x),l
     851.  00:4ECC  DD 74 02            	ld  (ix+enemy_data.x+1),h
     852.  00:4ECF  ED 5B 44 CB         	ld	de,(xmap)
     853.  00:4ED3  A7                  	and	a
     854.  00:4ED4  ED 52               	sbc	hl,de
     855.  00:4ED6  11 20 01            	ld	de,256+32
     856.  00:4ED9  A7                  	and	a
     857.  00:4EDA  ED 52               	sbc	hl,de
     858.  00:4EDC  FA E3 4E            	jp  m,1f
     859.  00:4EDF  DD 36 07 00         	ld	(ix+enemy_data.status),0
     860.  00:4EE3                      1:
     861.  00:4EE3  CD 15 4A            	call	rand8
     862.  00:4EE6  E6 7F               	and 	127
     863.  00:4EE8  CC A7 52            	call	z,book_enemy_shoot
     864.  00:4EEB                      
     865.  00:4EEB  CD 25 48            	call	test_collision_msbullets
     866.  00:4EEE  D2 4D 4E            	jp	nc,next
     867.  00:4EF1  C3 56 4E            	jp	npcdies
     868.  00:4EF4                      
     869.  00:4EF4                      ;;;;;;;;;;;;;;;;;;;;
     870.  00:4EF4                      enemy2:
     871.  00:4EF4                      enemy3:
     872.  00:4EF4  DD 6E 01            	ld	l,(ix+enemy_data.x)
     873.  00:4EF7  DD 66 02            	ld	h,(ix+enemy_data.x+1)
     874.  00:4EFA  DD 5E 0D            	ld	e,(ix+enemy_data.speed)
     875.  00:4EFD  DD 56 0E            	ld	d,(ix+enemy_data.speed+1)
     876.  00:4F00  19                  	add	hl,de
     877.  00:4F01  DD 75 01            	ld  (ix+enemy_data.x),l
     878.  00:4F04  DD 74 02            	ld  (ix+enemy_data.x+1),h
     879.  00:4F07                      	
     880.  00:4F07  DD CB 07 76         	bit 6,(ix+enemy_data.status)
     881.  00:4F0B  28 16               	jr  z,.go_right
     882.  00:4F0D                      .go_left:
     883.  00:4F0D                      
     884.  00:4F0D  ED 5B 44 CB         	ld	de,(xmap)
     885.  00:4F11  A7                  	and	a
     886.  00:4F12  ED 52               	sbc	hl,de
     887.  00:4F14  11 E0 FF            	ld	de,-32
     888.  00:4F17  A7                  	and	a
     889.  00:4F18  ED 52               	sbc	hl,de
     890.  00:4F1A  F2 37 4F            	jp  p,1f
     891.  00:4F1D  DD 36 07 00         	ld	(ix+enemy_data.status),0
     892.  00:4F21  18 14               	jr  1f
     893.  00:4F23                      
     894.  00:4F23                      .go_right:
     895.  00:4F23                      
     896.  00:4F23  ED 5B 44 CB         	ld	de,(xmap)
     897.  00:4F27  A7                  	and	a
     898.  00:4F28  ED 52               	sbc	hl,de
     899.  00:4F2A  11 20 01            	ld	de,256+32
     900.  00:4F2D  A7                  	and	a
     901.  00:4F2E  ED 52               	sbc	hl,de
     902.  00:4F30  FA 37 4F            	jp  m,1f
     903.  00:4F33  DD 36 07 00         	ld	(ix+enemy_data.status),0
     904.  00:4F37                      1:
     905.  00:4F37  CD 15 4A            	call	rand8
     906.  00:4F3A  E6 7F               	and 	127
     907.  00:4F3C  CC A7 52            	call	z,book_enemy_shoot
     908.  00:4F3F                      
     909.  00:4F3F  CD 25 48            	call	test_collision_msbullets
     910.  00:4F42  D2 4D 4E            	jp	nc,next
     911.  00:4F45  C3 56 4E            	jp 	npcdies
     912.  00:4F48                      	
     913.  00:4F48                      	
     914.  00:4F48                      ;;;;;;;;;;;;;;;;;;;;
     915.  00:4F48                      enemy4:
     916.  00:4F48  DD 6E 01            	ld	l,(ix+enemy_data.x)
     917.  00:4F4B  DD 66 02            	ld	h,(ix+enemy_data.x+1)
     918.  00:4F4E  DD 5E 0D            	ld	e,(ix+enemy_data.speed)
     919.  00:4F51  DD 56 0E            	ld	d,(ix+enemy_data.speed+1)
     920.  00:4F54  19                  	add	hl,de
     921.  00:4F55  DD 75 01            	ld  (ix+enemy_data.x),l
     922.  00:4F58  DD 74 02            	ld  (ix+enemy_data.x+1),h
     923.  00:4F5B                      	
     924.  00:4F5B  DD CB 07 76         	bit 6,(ix+enemy_data.status)
     925.  00:4F5F  28 16               	jr  z,.go_right
     926.  00:4F61                      .go_left:
     927.  00:4F61                      
     928.  00:4F61  ED 5B 44 CB         	ld	de,(xmap)
     929.  00:4F65  A7                  	and	a
     930.  00:4F66  ED 52               	sbc	hl,de
     931.  00:4F68  11 E0 FF            	ld	de,-32
     932.  00:4F6B  A7                  	and	a
     933.  00:4F6C  ED 52               	sbc	hl,de
     934.  00:4F6E  F2 8B 4F            	jp  p,1f
     935.  00:4F71  DD 36 07 00         	ld	(ix+enemy_data.status),0
     936.  00:4F75  18 14               	jr  1f
     937.  00:4F77                      
     938.  00:4F77                      .go_right:
     939.  00:4F77                      
     940.  00:4F77  ED 5B 44 CB         	ld	de,(xmap)
     941.  00:4F7B  A7                  	and	a
     942.  00:4F7C  ED 52               	sbc	hl,de
     943.  00:4F7E  11 20 01            	ld	de,256+32
     944.  00:4F81  A7                  	and	a
     945.  00:4F82  ED 52               	sbc	hl,de
     946.  00:4F84  FA 8B 4F            	jp  m,1f
     947.  00:4F87  DD 36 07 00         	ld	(ix+enemy_data.status),0
     948.  00:4F8B                      1:
     949.  00:4F8B  DD 7E 00            	ld	a,(ix+enemy_data.y)
     950.  00:4F8E                      
     951.  00:4F8E  DD CB 07 7E         	bit 7,(ix+enemy_data.status)
     952.  00:4F92  28 0A               	jr  z,.go_dwn
     953.  00:4F94                      .go_up:
     954.  00:4F94  3D                  	dec	a
     955.  00:4F95  C2 A7 4F            	jp	nz,1f
     956.  00:4F98  DD CB 07 BE         	res	7,(ix+enemy_data.status)
     957.  00:4F9C  18 09               	jr	1f
     958.  00:4F9E                      .go_dwn:
     959.  00:4F9E  3C                  	inc	a
     960.  00:4F9F  FE A0               	cp	mapHeight*16-16
     961.  00:4FA1  20 04               	jr	nz,1f
     962.  00:4FA3  DD CB 07 FE         	set	7,(ix+enemy_data.status)
     963.  00:4FA7                      	; jr	1f
     964.  00:4FA7                      1:
     965.  00:4FA7  DD 77 00            	ld	(ix+enemy_data.y),a
     966.  00:4FAA                      
     967.  00:4FAA  CD 15 4A            	call	rand8
     968.  00:4FAD  E6 7F               	and 	127
     969.  00:4FAF  CC A7 52            	call	z,book_enemy_shoot
     970.  00:4FB2                      
     971.  00:4FB2  CD 25 48            	call	test_collision_msbullets
     972.  00:4FB5  D2 4D 4E            	jp	nc,next
     973.  00:4FB8  C3 56 4E            	jp 	npcdies
     974.  00:4FBB                      	
     975.  00:4FBB                      	
     976.  00:4FBB                      ;;;;;;;;;;;;;;;;;;;;
     977.  00:4FBB  (0045)              	align 0x100
     978.  00:5000                      rotation:
     979.  00:5000  00 10 20 30         	db 0,16,32,48;,48,32,16,0
     980.  00:5004                      ;;;;;;;;;;
     981.  00:5004                      rotate:
     982.  00:5004  DD 7E 08            	ld	a,(ix+enemy_data.cntr)
     983.  00:5007  3C                  	inc a
     984.  00:5008  DD 77 08            	ld	(ix+enemy_data.cntr),a
     985.  00:500B  D9                  	exx
     986.  00:500C  26 50               	ld h, high rotation
     987.  00:500E  0F 0F 0F 0F         [4]	rrca
     988.  00:5012  E6 03               	and 3
     989.  00:5014  6F                  	ld	l,a
     990.  00:5015  7E                  	ld a,(hl)
     991.  00:5016  D9                  	exx
     992.  00:5017  C9                  	ret
     993.  00:5018                      	
     994.  00:5018                      
     995.  00:5018  (00E8)              	align 0x100
     996.  00:5100                      sinewave:
     997.  00:5100                      	db 2,1,2,1,2,1,1,1,1,1,1,1,0,1,0,0,0,0,-1,0,-1,-1,-1,-1,-1,-1,-1,-2,-1,-2,-1,-2,-2,-1,-2,-1,-2,-1,-1,-1,-1,-1,-1,-1,0,-1,0,0,0,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2
     997.  00:5100  02 01 02 01 02 01 01 01 01 01 01 01 00 01 00 00 
     997.  00:5110  00 00 FF 00 FF FF FF FF FF FF FF FE FF FE FF FE 
     997.  00:5120  FE FF FE FF FE FF FF FF FF FF FF FF 00 FF 00 00 
     997.  00:5130  00 00 01 00 01 01 01 01 01 01 01 02 01 02 01 02 
     998.  00:5140                      
     999.  00:5140                      	
    1000.  00:5140                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;
    1001.  00:5140                      enemy5:
    1002.  00:5140  DD 6E 01            	ld	l,(ix+enemy_data.x)
    1003.  00:5143  DD 66 02            	ld	h,(ix+enemy_data.x+1)
    1004.  00:5146  DD 5E 0D            	ld	e,(ix+enemy_data.speed)
    1005.  00:5149  DD 56 0E            	ld	d,(ix+enemy_data.speed+1)
    1006.  00:514C  19                  	add	hl,de
    1007.  00:514D  DD 75 01            	ld  (ix+enemy_data.x),l
    1008.  00:5150  DD 74 02            	ld  (ix+enemy_data.x+1),h
    1009.  00:5153                      	
    1010.  00:5153  DD CB 07 76         	bit 6,(ix+enemy_data.status)
    1011.  00:5157  28 16               	jr  z,.go_right
    1012.  00:5159                      .go_left:
    1013.  00:5159                      
    1014.  00:5159  ED 5B 44 CB         	ld	de,(xmap)
    1015.  00:515D  A7                  	and	a
    1016.  00:515E  ED 52               	sbc	hl,de
    1017.  00:5160  11 E0 FF            	ld	de,-32
    1018.  00:5163  A7                  	and	a
    1019.  00:5164  ED 52               	sbc	hl,de
    1020.  00:5166  F2 83 51            	jp  p,1f
    1021.  00:5169  DD 36 07 00         	ld	(ix+enemy_data.status),0
    1022.  00:516D  18 14               	jr  1f
    1023.  00:516F                      
    1024.  00:516F                      .go_right:
    1025.  00:516F                      
    1026.  00:516F  ED 5B 44 CB         	ld	de,(xmap)
    1027.  00:5173  A7                  	and	a
    1028.  00:5174  ED 52               	sbc	hl,de
    1029.  00:5176  11 20 01            	ld	de,256+32
    1030.  00:5179  A7                  	and	a
    1031.  00:517A  ED 52               	sbc	hl,de
    1032.  00:517C  FA 83 51            	jp  m,1f
    1033.  00:517F  DD 36 07 00         	ld	(ix+enemy_data.status),0
    1034.  00:5183                      1:
    1035.  00:5183                      
    1036.  00:5183  DD 7E 08            	ld	a,(ix+enemy_data.cntr)
    1037.  00:5186  3C                  	inc	a
    1038.  00:5187  DD 77 08            	ld	(ix+enemy_data.cntr),a
    1039.  00:518A  E6 3F               	and	63
    1040.  00:518C  6F                  	ld	l,a
    1041.  00:518D  26 51               	ld	h,high sinewave
    1042.  00:518F  7E                  	ld	a,(hl)
    1043.  00:5190  DD 86 00            	add	a,(ix+enemy_data.y)
    1044.  00:5193  DD 77 00            	ld	(ix+enemy_data.y),a
    1045.  00:5196                      	
    1046.  00:5196  CD 15 4A            	call	rand8
    1047.  00:5199  E6 7F               	and	127
    1048.  00:519B  CC A7 52            	call	z,book_enemy_shoot
    1049.  00:519E                      
    1050.  00:519E  CD 25 48            	call	test_collision_msbullets
    1051.  00:51A1  D2 4D 4E            	jp	nc,next
    1052.  00:51A4  C3 56 4E            	jp 	npcdies
    1053.  00:51A7                      
    1054.  00:51A7                      
    1055.  00:51A7                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;
    1056.  00:51A7                      enemy6:
    1057.  00:51A7  DD 6E 01            	ld	l,(ix+enemy_data.x)
    1058.  00:51AA  DD 66 02            	ld	h,(ix+enemy_data.x+1)
    1059.  00:51AD  DD 5E 0D            	ld	e,(ix+enemy_data.speed)
    1060.  00:51B0  DD 56 0E            	ld	d,(ix+enemy_data.speed+1)
    1061.  00:51B3  19                  	add	hl,de
    1062.  00:51B4  DD 75 01            	ld  (ix+enemy_data.x),l
    1063.  00:51B7  DD 74 02            	ld  (ix+enemy_data.x+1),h
    1064.  00:51BA                      	
    1065.  00:51BA  DD CB 07 76         	bit 6,(ix+enemy_data.status)
    1066.  00:51BE  28 1E               	jr  z,.go_right
    1067.  00:51C0                      .go_left:
    1068.  00:51C0  CD 04 50            	call	rotate
    1069.  00:51C3  C6 C8               	add	a,192+8
    1070.  00:51C5  DD 77 0A            	ld	(ix+enemy_data.frame),a
    1071.  00:51C8                      	
    1072.  00:51C8  ED 5B 44 CB         	ld	de,(xmap)
    1073.  00:51CC  A7                  	and	a
    1074.  00:51CD  ED 52               	sbc	hl,de
    1075.  00:51CF  11 E0 FF            	ld	de,-32
    1076.  00:51D2  A7                  	and	a
    1077.  00:51D3  ED 52               	sbc	hl,de
    1078.  00:51D5  F2 FA 51            	jp  p,1f
    1079.  00:51D8  DD 36 07 00         	ld	(ix+enemy_data.status),0
    1080.  00:51DC  18 1C               	jr  1f
    1081.  00:51DE                      
    1082.  00:51DE                      .go_right:
    1083.  00:51DE  CD 04 50            	call	rotate
    1084.  00:51E1  C6 C0               	add	a,192
    1085.  00:51E3  DD 77 0A            	ld	(ix+enemy_data.frame),a
    1086.  00:51E6                      
    1087.  00:51E6  ED 5B 44 CB         	ld	de,(xmap)
    1088.  00:51EA  A7                  	and	a
    1089.  00:51EB  ED 52               	sbc	hl,de
    1090.  00:51ED  11 20 01            	ld	de,256+32
    1091.  00:51F0  A7                  	and	a
    1092.  00:51F1  ED 52               	sbc	hl,de
    1093.  00:51F3  FA FA 51            	jp  m,1f
    1094.  00:51F6  DD 36 07 00         	ld	(ix+enemy_data.status),0
    1095.  00:51FA                      1:
    1096.  00:51FA  CD 60 47            	call	set_size	; size varies with frame
    1097.  00:51FD                      		
    1098.  00:51FD  DD 7E 00            	ld	a,(ix+enemy_data.y)
    1099.  00:5200                      
    1100.  00:5200  DD CB 07 7E         	bit 7,(ix+enemy_data.status)
    1101.  00:5204  28 0A               	jr  z,.go_dwn
    1102.  00:5206                      .go_up:
    1103.  00:5206  3D                  	dec	a
    1104.  00:5207  C2 19 52            	jp	nz,1f
    1105.  00:520A  DD CB 07 BE         	res	7,(ix+enemy_data.status)
    1106.  00:520E  18 09               	jr	1f
    1107.  00:5210                      .go_dwn:
    1108.  00:5210  3C                  	inc	a
    1109.  00:5211  FE A0               	cp	mapHeight*16-16
    1110.  00:5213  20 04               	jr	nz,1f
    1111.  00:5215  DD CB 07 FE         	set	7,(ix+enemy_data.status)
    1112.  00:5219                      1:
    1113.  00:5219  DD 77 00            	ld	(ix+enemy_data.y),a
    1114.  00:521C                      
    1115.  00:521C  CD 15 4A            	call	rand8
    1116.  00:521F  E6 7F               	and 	127
    1117.  00:5221  CC A7 52            	call	z,book_enemy_shoot
    1118.  00:5224                      
    1119.  00:5224  CD 25 48            	call	test_collision_msbullets
    1120.  00:5227  D2 4D 4E            	jp	nc,next
    1121.  00:522A  C3 56 4E            	jp	npcdies
    1122.  00:522D                      	
    1123.  00:522D                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;
    1124.  00:522D                      enemy7:	
    1125.  00:522D  DD 6E 01            	ld	l,(ix+enemy_data.x)
    1126.  00:5230  DD 66 02            	ld	h,(ix+enemy_data.x+1)
    1127.  00:5233  DD 5E 0D            	ld	e,(ix+enemy_data.speed)
    1128.  00:5236  DD 56 0E            	ld	d,(ix+enemy_data.speed+1)
    1129.  00:5239  19                  	add	hl,de
    1130.  00:523A  DD 75 01            	ld  (ix+enemy_data.x),l
    1131.  00:523D  DD 74 02            	ld  (ix+enemy_data.x+1),h
    1132.  00:5240                      	
    1133.  00:5240  DD CB 07 76         	bit 6,(ix+enemy_data.status)
    1134.  00:5244  28 1E               	jr  z,.go_right
    1135.  00:5246                      .go_left:
    1136.  00:5246  CD 04 50            	call	rotate
    1137.  00:5249  C6 C8               	add	a,192+8
    1138.  00:524B  DD 77 0A            	ld	(ix+enemy_data.frame),a
    1139.  00:524E                      
    1140.  00:524E  ED 5B 44 CB         	ld	de,(xmap)
    1141.  00:5252  A7                  	and	a
    1142.  00:5253  ED 52               	sbc	hl,de
    1143.  00:5255  11 E0 FF            	ld	de,-32
    1144.  00:5258  A7                  	and	a
    1145.  00:5259  ED 52               	sbc	hl,de
    1146.  00:525B  F2 80 52            	jp  p,1f
    1147.  00:525E  DD 36 07 00         	ld	(ix+enemy_data.status),0
    1148.  00:5262  18 1C               	jr  1f
    1149.  00:5264                      
    1150.  00:5264                      .go_right:
    1151.  00:5264  CD 04 50            	call	rotate
    1152.  00:5267  C6 C0               	add	a,192
    1153.  00:5269  DD 77 0A            	ld	(ix+enemy_data.frame),a
    1154.  00:526C                      	
    1155.  00:526C  ED 5B 44 CB         	ld	de,(xmap)
    1156.  00:5270  A7                  	and	a
    1157.  00:5271  ED 52               	sbc	hl,de
    1158.  00:5273  11 20 01            	ld	de,256+32
    1159.  00:5276  A7                  	and	a
    1160.  00:5277  ED 52               	sbc	hl,de
    1161.  00:5279  FA 80 52            	jp  m,1f
    1162.  00:527C  DD 36 07 00         	ld	(ix+enemy_data.status),0
    1163.  00:5280                      1:
    1164.  00:5280  CD 60 47            	call	set_size	; size varies with frame
    1165.  00:5283                      
    1166.  00:5283  DD 7E 08            	ld	a,(ix+enemy_data.cntr)
    1167.  00:5286  3C                  	inc	a
    1168.  00:5287  DD 77 08            	ld	(ix+enemy_data.cntr),a
    1169.  00:528A  E6 3F               	and	63
    1170.  00:528C  6F                  	ld	l,a
    1171.  00:528D  26 51               	ld	h,high sinewave
    1172.  00:528F  7E                  	ld	a,(hl)
    1173.  00:5290  DD 86 00            	add	a,(ix+enemy_data.y)
    1174.  00:5293  DD 77 00            	ld	(ix+enemy_data.y),a
    1175.  00:5296                      
    1176.  00:5296  CD 15 4A            	call	rand8
    1177.  00:5299  E6 7F               	and 	127
    1178.  00:529B  CC A7 52            	call	z,book_enemy_shoot
    1179.  00:529E                      
    1180.  00:529E  CD 25 48            	call	test_collision_msbullets
    1181.  00:52A1  D2 4D 4E            	jp	nc,next
    1182.  00:52A4  C3 56 4E            	jp 	npcdies
    1183.  00:52A7                      	
    1184.  00:52A7                      
    1185.  00:52A7                      
    1186.  00:52A7                      ; enemy3:
    1187.  00:52A7                      	; bit 6,(ix+enemy_data.status)
    1188.  00:52A7                      	; jr  z,.go_right
    1189.  00:52A7                      ; .go_left:
    1190.  00:52A7                      	; call	rotate
    1191.  00:52A7                      	; add	a,224
    1192.  00:52A7                      	; ld	(ix+enemy_data.frame),a
    1193.  00:52A7                      	; dec (ix+enemy_data.x)
    1194.  00:52A7                      	; ld  a,64-1
    1195.  00:52A7                      	; cp  (ix+enemy_data.x)
    1196.  00:52A7                      	; jr  nz,1f
    1197.  00:52A7                      	; res 6,(ix+enemy_data.status)
    1198.  00:52A7                      	; jr  1f
    1199.  00:52A7                      ; .go_right:
    1200.  00:52A7                      	; call	rotate
    1201.  00:52A7                      	; add	a,240
    1202.  00:52A7                      	; ld	(ix+enemy_data.frame),a
    1203.  00:52A7                      	; inc (ix+enemy_data.x)
    1204.  00:52A7                      	; ld  a,192-16
    1205.  00:52A7                      	; cp  (ix+enemy_data.x)
    1206.  00:52A7                      	; jr  nz,1f
    1207.  00:52A7                      	; set 6,(ix+enemy_data.status)
    1208.  00:52A7                      ; 1:
    1209.  00:52A7                      	; ld	(ix+enemy_data.color),14
    1210.  00:52A7                      	; jp	next
    1211.  00:52A7                      
    1212.  00:52A7                      
    1213.  00:52A7                      
    1214.  00:52A7                      
    1215.  00:52A7                      ; in
    1216.  00:52A7                      ;	IX -> enemy ship
    1217.  00:52A7                      ; out
    1218.  00:52A7                      ;	active bullet in list enem_bullets
    1219.  00:52A7                      
    1220.  00:52A7                      book_enemy_shoot:
    1221.  00:52A7                      	; aim to the manta
    1222.  00:52A7  0E 20               	ld	c,32
    1223.  00:52A9  59                  	ld	e,c
    1224.  00:52AA  3A 48 CB            	ld	a,(yship)
    1225.  00:52AD  47                  	ld	b,a
    1226.  00:52AE  DD 56 00            	ld	d,(ix+enemy_data.y)
    1227.  00:52B1  CD 84 48            	call	CollisionCheck_8b
    1228.  00:52B4  D0                  	ret		nc
    1229.  00:52B5                      
    1230.  00:52B5                      	; avoid shooting from outside the screen	
    1231.  00:52B5  06 00               	ld	b,0
    1232.  00:52B7  DD 6E 01            	ld	l,(ix+enemy_data.x)
    1233.  00:52BA  DD 66 02            	ld	h,(ix+enemy_data.x+1)
    1234.  00:52BD  DD 4E 03            	ld 	c,(ix+enemy_data.xoff)
    1235.  00:52C0  09                  	add hl,bc
    1236.  00:52C1  DD 46 05            	ld 	b,(ix+enemy_data.xsize)
    1237.  00:52C4                      	
    1238.  00:52C4  ED 5B 44 CB         	ld	de,(xmap)
    1239.  00:52C8  0E FF               	ld 	c,255
    1240.  00:52CA  CD 74 48            	call	CalcCollision
    1241.  00:52CD  D0                  	ret		nc
    1242.  00:52CE                      	
    1243.  00:52CE                      
    1244.  00:52CE  FD 21 7E CB         	ld  iy,enem_bullets
    1245.  00:52D2  11 0F 00            	ld  de,enemy_data
    1246.  00:52D5                      	
    1247.  00:52D5                      	repeat	max_enem_bullets
    1248.  00:52D5                    < 
    1249.  00:52D5                    < 	bit	0,(iy+enemy_data.status)
    1250.  00:52D5                    < 	jr  z,.activate_this
    1251.  00:52D5                    < 	add iy,de
    1252.  00:52D5                    < 
    1253.  00:52D5                    < 	endrepeat
    1253.  00:52D5  FD CB 07 46 28 13 FD 19 FD CB 07 46 28 0B FD 19 
    1253.  00:52E5  FD CB 07 46 28 03 FD 19 
    1254.  00:52ED  C9                  	ret
    1255.  00:52EE                      
    1256.  00:52EE                      .activate_this:
    1257.  00:52EE  DD CB 07 76         	bit 6,(ix+enemy_data.status)
    1258.  00:52F2  20 0F               	jr  nz,.shootsx
    1259.  00:52F4                      .shootdx
    1260.  00:52F4  FD 36 07 01         	ld  (iy+enemy_data.status),1
    1261.  00:52F8                      	; ld  hl,enemy_bullet_speed
    1262.  00:52F8                      	; ld	e,(ix+enemy_data.speed)
    1263.  00:52F8                      	; ld	d,(ix+enemy_data.speed+1)
    1264.  00:52F8                      	; add	hl,de
    1265.  00:52F8  DD 6E 0D            	ld	l,(ix+enemy_data.speed)
    1266.  00:52FB  DD 66 0E            	ld	h,(ix+enemy_data.speed+1)
    1267.  00:52FE  23 23               [enemy_bullet_speed]	inc hl
    1268.  00:5300  C3 0F 53            	jp  1f
    1269.  00:5303                      
    1270.  00:5303                      .shootsx
    1271.  00:5303  FD 36 07 41         	ld  (iy+enemy_data.status),1 + 64
    1272.  00:5307                      	; ld  hl,-enemy_bullet_speed
    1273.  00:5307                      	; ld	e,(ix+enemy_data.speed)
    1274.  00:5307                      	; ld	d,(ix+enemy_data.speed+1)
    1275.  00:5307                      	; add	hl,de
    1276.  00:5307  DD 6E 0D            	ld	l,(ix+enemy_data.speed)
    1277.  00:530A  DD 66 0E            	ld	h,(ix+enemy_data.speed+1)
    1278.  00:530D  2B 2B               [enemy_bullet_speed]	dec hl
    1279.  00:530F                      	
    1280.  00:530F                      1:
    1281.  00:530F  FD 75 0D            	ld  (iy+enemy_data.speed),l
    1282.  00:5312  FD 74 0E            	ld  (iy+enemy_data.speed+1),h
    1283.  00:5315                      
    1284.  00:5315  3E 30               	ld  a,12*4			; it could depend on enemy ship
    1285.  00:5317  FD 77 0A            	ld  (iy+enemy_data.frame),a
    1286.  00:531A                      
    1287.  00:531A  CD 83 47            	call	bullet_set_size2	; set  xoff,yoff,xsize,ysize for sprite collision
    1288.  00:531D                      
    1289.  00:531D  DD 6E 01            	ld	l,(ix+enemy_data.x)
    1290.  00:5320  DD 66 02            	ld	h,(ix+enemy_data.x+1)
    1291.  00:5323  FD 75 01            	ld  (iy+enemy_data.x),l
    1292.  00:5326  FD 74 02            	ld  (iy+enemy_data.x+1),h
    1293.  00:5329                      
    1294.  00:5329  DD 7E 00            	ld  a,(ix+enemy_data.y)
    1295.  00:532C  FD 77 00            	ld  (iy+enemy_data.y),a
    1296.  00:532F  FD 36 08 9C         	ld  (iy+enemy_data.cntr),(256+32+24)/enemy_bullet_speed
    1297.  00:5333                      
    1298.  00:5333                      	; ld  (iy+enemy_data.color),11
    1299.  00:5333                      	
    1300.  00:5333  3E 08               	ld a,8			; enemy shoot
    1301.  00:5335  CD AB 55            	call AFXPLAY
    1302.  00:5338  C9                  	ret
    1303.  00:5339                      
    1304.  00:5339                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    1305.  00:5339                      ;
    1306.  00:5339                      ; manage active enemy bullets
    1307.  00:5339                      ;
    1308.  00:5339                      
    1309.  00:5339                      enemy_bullet_loop:
    1310.  00:5339                      
    1311.  00:5339  21 EB 48            	ld	hl,ms_ani
    1312.  00:533C  3A 4B CB            	ld  a,(aniframe)
    1313.  00:533F  4F                  	ld	c,a
    1314.  00:5340  06 00               	ld	b,0
    1315.  00:5342  09                  	add	hl,bc
    1316.  00:5343  7E                  	ld	a,(hl)
    1317.  00:5344  87                  	add	a,a
    1318.  00:5345  87                  	add	a,a
    1319.  00:5346  FD 21 3B 49         	ld	iy,ms_col_win
    1320.  00:534A  4F                  	ld	c,a
    1321.  00:534B  06 00               	ld	b,0
    1322.  00:534D  FD 09               	add	iy,bc	; iy aims to MS size for current frame
    1323.  00:534F                      
    1324.  00:534F                      	;iy -> [minx(h) maxx(h) miny(h) maxy(h)]
    1325.  00:534F                      
    1326.  00:534F  DD 21 7E CB         	ld  ix,enem_bullets
    1327.  00:5353  11 0F 00            	ld  de,enemy_data
    1328.  00:5356                      	repeat	max_enem_bullets
    1329.  00:5356                    < 2:
    1330.  00:5356                    < 	exx
    1331.  00:5356                    < 	bit  0,(ix+enemy_data.status)
    1332.  00:5356                    < 	jp  z,1f
    1333.  00:5356                    < 
    1334.  00:5356                    < 	ld  l,(ix+enemy_data.x)
    1335.  00:5356                    < 	ld  h,(ix+enemy_data.x+1)
    1336.  00:5356                    < 	ld  e,(ix+enemy_data.speed)
    1337.  00:5356                    < 	ld  d,(ix+enemy_data.speed+1)
    1338.  00:5356                    < 	add hl,de						; move right or  left
    1339.  00:5356                    < 	ld  (ix+enemy_data.x),l
    1340.  00:5356                    < 	ld  (ix+enemy_data.x+1),h
    1341.  00:5356                    < 
    1342.  00:5356                    < 	ld	a,(ms_state)				; MS is immune to bullets while looping
    1343.  00:5356                    < 	cp	ms_loop_right2left
    1344.  00:5356                    < 	jr	z,3f
    1345.  00:5356                    < 	cp	ms_loop_left2right
    1346.  00:5356                    < 	jr	z,3f
    1347.  00:5356                    < 
    1348.  00:5356                    < 	ld	a,(god_mode)
    1349.  00:5356                    < 	and 	a						
    1350.  00:5356                    < 	call	z,test_collision_enemy_bullets
    1351.  00:5356                    < 	jp	nc,3f
    1352.  00:5356                    < 	res 0,(ix+enemy_data.status)	; turn off this bullet
    1353.  00:5356                    < 	jp	test_obstacles.found		; start ms explosion
    1354.  00:5356                    < 3:
    1355.  00:5356                    < 	dec	(ix+enemy_data.cntr)
    1356.  00:5356                    < 	jp  nz,1f
    1357.  00:5356                    < 	res 0,(ix+enemy_data.status)
    1358.  00:5356                    < 1:
    1359.  00:5356                    < 	exx
    1360.  00:5356                    < 	add ix,de
    1361.  00:5356                    < 	endrepeat
    1361.  00:5356  D9 DD CB 07 46 CA 97 53 DD 6E 01 DD 66 02 DD 5E 
    1361.  00:5366  0D DD 56 0E 19 DD 75 01 DD 74 02 3A 4C CB FE 08 
    1361.  00:5376  28 15 FE 09 28 11 3A 51 CB A7 CC E5 47 D2 8D 53 
    1361.  00:5386  DD CB 07 86 C3 23 54 DD 35 08 C2 97 53 DD CB 07 
    1361.  00:5396  86 D9 DD 19 D9 DD CB 07 46 CA DB 53 DD 6E 01 DD 
    1361.  00:53A6  66 02 DD 5E 0D DD 56 0E 19 DD 75 01 DD 74 02 3A 
    1361.  00:53B6  4C CB FE 08 28 15 FE 09 28 11 3A 51 CB A7 CC E5 
    1361.  00:53C6  47 D2 D1 53 DD CB 07 86 C3 23 54 DD 35 08 C2 DB 
    1361.  00:53D6  53 DD CB 07 86 D9 DD 19 D9 DD CB 07 46 CA 1F 54 
    1361.  00:53E6  DD 6E 01 DD 66 02 DD 5E 0D DD 56 0E 19 DD 75 01 
    1361.  00:53F6  DD 74 02 3A 4C CB FE 08 28 15 FE 09 28 11 3A 51 
    1361.  00:5406  CB A7 CC E5 47 D2 15 54 DD CB 07 86 C3 23 54 DD 
    1361.  00:5416  35 08 C2 1F 54 DD CB 07 86 D9 DD 19 
    1362.  00:5422  C9                  	ret
    1363.  00:5423                      
    1364.  00:5423                      
    1365.  00:5423                      test_obstacles.found
    1366.  00:5423  3A 4C CB            	ld	a,(ms_state)
    1367.  00:5426  FE 0A               	cp	ms_explode
    1368.  00:5428  C8                  	ret	z
    1369.  00:5429  3E 0A               	ld	a,ms_explode
    1370.  00:542B  32 4C CB            	ld	(ms_state),a
    1371.  00:542E  3E 40               	ld	a,64
    1372.  00:5430  32 4B CB            	ld	(aniframe),a
    1373.  00:5433  AF                  	xor	a
    1374.  00:5434  32 43 CB            	ld	(dxmap),a
    1375.  00:5437                      
    1376.  00:5437  3E 09               	ld	a,9			; ms explosion
    1377.  00:5439  CD AB 55            	call AFXPLAY
    1378.  00:543C                      
    1379.  00:543C  C9                  	ret
      66   00:543D                      		include plot_distrucable.asm
       1.  00:543D                      
       2.  00:543D                      _plot_distrucable:
       3.  00:543D                      
       4.  00:543D  F3                  		di
       5.  00:543E  3E 20               		ld 		a, 32
       6.  00:5440  D3 99               		out 	(0x99),a
       7.  00:5442  3E 91               		ld 		a, 17+128
       8.  00:5444  D3 99               		out 	(0x99),a
       9.  00:5446  FB                  		ei
      10.  00:5447                      
      11.  00:5447  0E 9B               		ld 		c, 0x9B
      12.  00:5449                      	
      13.  00:5449  CD 1F 42            		call _waitvdp
      14.  00:544C                      
      15.  00:544C  7D                  		ld		a,l
      16.  00:544D  87 87 87 87         [4]		add		a,a
      17.  00:5451  D3 9B               		out		(0x9B), a 		; sx
      18.  00:5453  AF                  		xor a
      19.  00:5454  D3 9B               		out		(0x9B), a 		; sx (high)
      20.  00:5456                      		
      21.  00:5456  3E D0               		ld		a,mapHeight*16+32
      22.  00:5458  D3 9B               		out		(0x9B), a 		; sy
      23.  00:545A  3E 01               		ld		a,1				; source page for animated tiles
      24.  00:545C  D3 9B               		out 	(0x9B), a 		; sy (high-> page 3)
      25.  00:545E                      		
      26.  00:545E  7B                  		ld		a,e
      27.  00:545F  D3 9B               		out 	(0x9B), a 	; dx	
      28.  00:5461  AF                  		xor a
      29.  00:5462  D3 9B               		out 	(0x9B), a	; dx (high)
      30.  00:5464                      	
      31.  00:5464  7A                  		ld		a,d
      32.  00:5465  D3 9B               		out 	(0x9B), a	; dy
      33.  00:5467  7C                  		ld 		a,h			; destination page
      34.  00:5468  D3 9B               		out 	(0x9B), a	; dy (high-> page 0 or 1)
      35.  00:546A                      
      36.  00:546A  21 10 10            		ld 		hl,16*257 	; block size
      37.  00:546D                      
      38.  00:546D  ED 69               		out 	(c), l
      39.  00:546F  AF                  		xor a
      40.  00:5470  D3 9B               		out 	(0x9B), a
      41.  00:5472  ED 61               		out 	(c), h
      42.  00:5474  D3 9B               		out 	(0x9B), a
      43.  00:5476  D3 9B               		out 	(0x9B), a
      44.  00:5478  D3 9B               		out 	(0x9B), a
      45.  00:547A                      
      46.  00:547A  3E D0               		ld		a,11010000B
      47.  00:547C  D3 9B               		out 	(0x9B), a		; command HMMM
      48.  00:547E  C9                  		ret
      49.  00:547F                      
      67   00:547F                      
      68   00:547F                      		
      69   00:547F                      ;-------------------------------------
      70   00:547F                      ; Entry point
      71   00:547F                      ;-------------------------------------
      72   00:547F                      START:
      73   00:547F  1E 06               		ld e,6
      74   00:5481  CD C9 44            		call	checkkbd
      75   00:5484  3E 01               		ld	a,1
      76   00:5486  CB 0D               		rrc	l				; shift
      77   00:5488  D2 8C 54            		jp	nc,_ntsc
      78   00:548B  AF                  		xor	a
      79   00:548C  32 02 CB            _ntsc:	ld	(SEL_NTSC),a	; if set NSTC, if reset PAL
      80   00:548F                      
      81   00:548F  CD 0C 4A            		call 	rand8_init								
      82   00:5492  CD EA 41            		call	set_scr
      83   00:5495                      
      84   00:5495  1E 06               		ld e,6
      85   00:5497  CD C9 44            		call	checkkbd
      86   00:549A  E6 02               		and	00000010B		; CRTL
      87   00:549C  C4 2E 42            		call nz,_set_r800	; if CRTL is pressed do not test for turbo
      88   00:549F                      		
      89   00:549F                      ;-------------------------------------
      90   00:549F                      ;   Power-up routine for 32K ROM
      91   00:549F                      ;   set pages and sub slot
      92   00:549F                      ;-------------------------------------
      93   00:549F  CD 10 40                    call    search_slot
      94   00:54A2  CD 2F 40                    call    search_slotram
      95   00:54A5  CD 61 40            		call	setrompage2
      96   00:54A8  CD 5B 40            		call	setrampage0
      97   00:54AB                      
      98   00:54AB                      
      99   00:54AB  AF                  		xor	a
     100   00:54AC  32 00 50            		ld	(_kBank1),a
     101   00:54AF  3C                  		inc	a
     102   00:54B0  32 00 70            		ld	(_kBank2),a
     103   00:54B3  3C                  		inc	a
     104   00:54B4  32 00 90            		ld	(_kBank3),a
     105   00:54B7                      		
     106   00:54B7                      		;--- initialise ISR in RAM
     107   00:54B7                      		
     108   00:54B7  F3                  		di
     109   00:54B8  21 38 00            		ld	hl,0x0038
     110   00:54BB  36 C3               		ld	(hl),0xC3
     111   00:54BD  23                  		inc	hl
     112   00:54BE  36 57               		ld	(hl),low _fake_isr
     113   00:54C0  23                  		inc	hl
     114   00:54C1  36 42               		ld	(hl),high _fake_isr
     115   00:54C3                      
     116   00:54C3  CD 10 65            		call	opening
     117   00:54C6                      		
     118   00:54C6                      
     119   00:54C6  CD D6 44            		call 	_hw_sprite_init
     120   00:54C9                      
     121   00:54C9  0E 00               		ld		c,0
     122   00:54CB  11 00 B3            		ld		de,256*(mapHeight*16+3)
     123   00:54CE  CD A5 41            		call	_vdpsetvramwr
     124   00:54D1                      
     125   00:54D1  11 01 18            		ld		de, 256*:_scorebar+1
     126   00:54D4  CD 39 65            		call	outvram
     127   00:54D7                      		
     128   00:54D7  0E 01               		ld		c,1
     129   00:54D9  11 00 B0            		ld		de,256*mapHeight*16
     130   00:54DC  CD A5 41            		call	_vdpsetvramwr
     131   00:54DF                      
     132   00:54DF  11 02 19            		ld		de, 256*:_animated+2
     133   00:54E2  CD 39 65            		call	outvram
     134   00:54E5                      
     135   00:54E5                      	
     136   00:54E5                      		; ld	a,:demo_song
     137   00:54E5                      		; setpage_a
     138   00:54E5                      		
     139   00:54E5                      		; ld	bc,	end_demo_song-musbuff
     140   00:54E5                      		; ld	hl,	demo_song
     141   00:54E5                      		; ld	de,	musbuff
     142   00:54E5                      		; ldir
     143   00:54E5                      			
     144   00:54E5                      		; call	replay_init
     145   00:54E5                      		; ld		hl,musbuff
     146   00:54E5                      		; call	replay_loadsong
     147   00:54E5                      
     148   00:54E5                      
     149   00:54E5  1E 00               		ld		e,0
     150   00:54E7  CD D9 41            		call	_setpage
     151   00:54EA                      				
     152   00:54EA  3E 0F               		ld	a, :_level
     153   00:54EC  32 00 B0            		ld	(_kBank4),a
     154   00:54EF                      		
     155   00:54EF  21 00 A0            		ld		hl,_level
     156   00:54F2  11 00 C0            		ld		de,_levelmap
     157   00:54F5  01 00 0B            		ld		bc,mapWidth*mapHeight
     158   00:54F8  ED B0               		ldir
     159   00:54FA                      
     160   00:54FA                      
     161   00:54FA                      		; call	init_page0
     162   00:54FA                      
     163   00:54FA  3E 00               		ld		a,0
     164   00:54FC  32 3B CB            		ld		(cur_level),a
     165   00:54FF                      
     166   00:54FF  FB                  		ei
     167   00:5500                      
     168   00:5500                      restart:
     169   00:5500  CD A2 42            		call	_intreset
     170   00:5503                      
     171   00:5503                      		
     172   00:5503                      
     173   00:5503  3E 01               		ld		a,1
     174   00:5505  32 33 CB            		ld		(_displaypage),a		
     175   00:5508  CD 90 41            		call 	_cls0
     176   00:550B  21 00 C0            		ld		hl,_levelmap
     177   00:550E  22 2F CB            		ld		(_levelmap_pos),hl
     178   00:5511                      		
     179   00:5511  AF                  		xor		a
     180   00:5512  67                  		ld		h,a
     181   00:5513  6F                  		ld		l,a
     182   00:5514  32 53 CB            		ld		(flip_flop),a
     183   00:5517  32 51 CB            		ld		(god_mode),a
     184   00:551A  32 2C CB            		ld		(_ymappos),a
     185   00:551D  22 2D CB            		ld		(_xmappos),hl
     186   00:5520                      		
     187   00:5520  22 28 CB            		ld		(_nframes),hl
     188   00:5523  22 0F CB            		ld		(_mcdx),hl
     189   00:5526  32 0D CB            		ld		(_mcframe),a
     190   00:5529                      		
     191   00:5529  32 36 CB            		ld		(_yoffset),a		;  0 tutto su
     192   00:552C  32 35 CB            		ld		(_xoffset),a		;  0 tutto su
     193   00:552F                      								
     194   00:552F  32 4B CB            		ld		(aniframe),a
     195   00:5532  32 4E CB            		ld		(anispeed),a
     196   00:5535  32 4C CB            		ld		(ms_state),a
     197   00:5538  3C                  		inc 	a
     198   00:5539  32 4D CB            		ld		(old_aniframe),a		; old_aniframe!=aniframe
     199   00:553C                      	
     200   00:553C  32 43 CB            		ld		(dxmap),a		; moving right
     201   00:553F  32 42 CB            		ld		(_dxmap),a		; moving right
     202   00:5542                      
     203   00:5542  22 44 CB            		ld		(xmap),hl
     204   00:5545  22 46 CB            		ld		(_xmapx4),hl
     205   00:5548  01 78 00            		ld		bc,xship_rel
     206   00:554B  09                  		add 	hl,bc
     207   00:554C  22 49 CB            		ld		(xship),hl
     208   00:554F  3E 50               		ld		a,80
     209   00:5551  32 48 CB            		ld		(yship),a
     210   00:5554                      
     211   00:5554  CD 40 4A            		call 	npc_init								
     212   00:5557  CD 1F 45            		call 	load_colors
     213   00:555A                      
     214   00:555A  AF                  		xor	a
     215   00:555B  32 00 50            		ld		(_kBank1),a
     216   00:555E  3C                  		inc	a
     217   00:555F  32 00 70            		ld		(_kBank2),a
     218   00:5562  3C                  		inc	a
     219   00:5563  32 00 90            		ld		(_kBank3),a
     220   00:5566                      		
     221   00:5566                      
     222   00:5566  CD 7E 42            		call	_isrinit
     223   00:5569                      
     224   00:5569                      main_loop: 
     225   00:5569                      				
     226   00:5569  21 00 00            		ld	hl,0
     227   00:556C  22 9E FC            		ld	(_jiffy),hl
     228   00:556F                      
     229   00:556F                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     230   00:556F                      ; run ms FSM and place its sprites in the SAT in RAM
     231   00:556F  CD 00 60            		call	ms_ctrl
     232   00:5572                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     233   00:5572                      ; test for game restart
     234   00:5572  3A 4C CB            		ld	a,(ms_state)
     235   00:5575  FE 0C               		cp	ms_reset
     236   00:5577  CA 00 55            		jp	z,restart
     237   00:557A                      
     238   00:557A                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     239   00:557A                      ; place MS in the SAT and test for collision
     240   00:557A  CD 5A 63            		call	put_ms_sprt
     241   00:557D  3A 51 CB            		ld		a,(god_mode)
     242   00:5580  A7                  		and 	a
     243   00:5581                      		; call	z,test_obstacles
     244   00:5581                      
     245   00:5581                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     246   00:5581                      ; run NCPS FSM
     247   00:5581  CD C5 4A            		call	wave_timer
     248   00:5584  CD 1D 4E            		call	npc_loop
     249   00:5587  CD 39 53            		call	enemy_bullet_loop
     250   00:558A                      
     251   00:558A                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     252   00:558A                      ; run MS bullets FSM
     253   00:558A  CD C7 5A            		call	bullet_loop
     254   00:558D                      
     255   00:558D                      		; ld	a,00100101B			; random colour
     256   00:558D                      		; out		(0x99),a
     257   00:558D                      		; ld		a,7+128
     258   00:558D                      		; out		(0x99),a
     259   00:558D                      		
     260   00:558D                      		; call	_waitvdp
     261   00:558D                      
     262   00:558D                      		; ld	a,10100101B			; random colour
     263   00:558D                      		; out		(0x99),a
     264   00:558D                      		; ld		a,7+128
     265   00:558D                      		; out		(0x99),a
     266   00:558D                      				
     267   00:558D  3A 03 CB            		ld	a,(joystick)
     268   00:5590  E6 20               		and	32
     269   00:5592                      		; call	z,_plot_distrucable
     270   00:5592                      
     271   00:5592                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     272   00:5592                      		; ld		a,3
     273   00:5592                      		; out		(0x99),a
     274   00:5592                      		; ld		a,7+128
     275   00:5592                      		; out		(0x99),a
     276   00:5592                      		
     277   00:5592                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     278   00:5592                      		; call	test_star
     279   00:5592                      
     280   00:5592                      		; xor		a
     281   00:5592                      		; out		(0x99),a
     282   00:5592                      		; ld		a,7+128
     283   00:5592                      		; out		(0x99),a
     284   00:5592                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     285   00:5592                      
     286   00:5592                      		
     287   00:5592  3A 9E FC            1:		ld	a,(_jiffy)		; wait for vblank (and not for linit)
     288   00:5595  B7                  		or	a
     289   00:5596  28 FA               		jr	z,1b
     290   00:5598                      	
     291   00:5598  2A 44 CB            		ld	hl,(xmap)
     292   00:559B  01 78 00            		ld	bc,xship_rel
     293   00:559E  09                  		add hl,bc
     294   00:559F  22 49 CB            		ld	(xship),hl
     295   00:55A2                      
     296   00:55A2  3A 43 CB            		ld		a,(dxmap)
     297   00:55A5  32 42 CB            		ld		(_dxmap),a
     298   00:55A8                      
     299   00:55A8  C3 69 55            		jp      main_loop
     300   00:55AB                      
     301   00:55AB                      ;-------------------------------------
     302   00:55AB                      AFXPLAY:
     303   00:55AB  C9                  		ret
     304   00:55AC                      ;	include vuitpakker.asm
     305   00:55AC                      	include print.asm
       1.  00:55AC                      
       2.  00:55AC                      	
       3.  00:55AC                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       4.  00:55AC                      
       5.  00:55AC                      _print_probe
       6.  00:55AC  3A 14 CB            	ld	a,(_mcprobeb)
       7.  00:55AF  5F                  	ld	e,a
       8.  00:55B0  16 00               	ld	d,0
       9.  00:55B2  21 C0 07            	ld	hl,32*(64-2)
      10.  00:55B5  19                  	add	hl,de
      11.  00:55B6  EB                  	ex	de,hl
      12.  00:55B7  21 C0 05            	ld	hl,2*(23*32+0)
      13.  00:55BA                      	; call 	plot_foreground
      14.  00:55BA                      	
      15.  00:55BA  ED 5B 15 CB         	ld	de,(_ticxframe)
      16.  00:55BE  16 00               	ld	d,0
      17.  00:55C0  01 16 CB            	ld	bc,_buffer
      18.  00:55C3  CD 15 56            	call	int2ascii
      19.  00:55C6                      	
      20.  00:55C6  3A 18 CB            	ld	a,(_buffer+2)
      21.  00:55C9  5F                  	ld	e,a
      22.  00:55CA  16 00               	ld	d,0
      23.  00:55CC  21 90 07            	ld	hl,32*(64-2)-'0'
      24.  00:55CF  19                  	add	hl,de
      25.  00:55D0  EB                  	ex	de,hl
      26.  00:55D1  21 80 05            	ld	hl,2*(22*32)
      27.  00:55D4                      	; call 	plot_foreground
      28.  00:55D4                      
      29.  00:55D4  3A 19 CB            	ld	a,(_buffer+3)
      30.  00:55D7  5F                  	ld	e,a
      31.  00:55D8  16 00               	ld	d,0
      32.  00:55DA  21 90 07            	ld	hl,32*(64-2)-'0'
      33.  00:55DD  19                  	add	hl,de
      34.  00:55DE  EB                  	ex	de,hl
      35.  00:55DF  21 82 05            	ld	hl,2*(22*32+1)
      36.  00:55E2                      	; call 	plot_foreground
      37.  00:55E2                      
      38.  00:55E2  3A 1A CB            	ld	a,(_buffer+4)
      39.  00:55E5  5F                  	ld	e,a
      40.  00:55E6  16 00               	ld	d,0
      41.  00:55E8  21 90 07            	ld	hl,32*(64-2)-'0'
      42.  00:55EB  19                  	add	hl,de
      43.  00:55EC  EB                  	ex	de,hl
      44.  00:55ED  21 84 05            	ld	hl,2*(22*32+2)
      45.  00:55F0                      	; call 	plot_foreground
      46.  00:55F0  C9                  	ret
      47.  00:55F1                      	
      48.  00:55F1                      	
      49.  00:55F1                      _print_fps:
      50.  00:55F1  3A 19 CB            	ld	a,(_buffer+3)
      51.  00:55F4  5F                  	ld	e,a
      52.  00:55F5  16 00               	ld	d,0
      53.  00:55F7  21 90 07            	ld	hl,32*(64-2)-'0'
      54.  00:55FA  19                  	add	hl,de
      55.  00:55FB  EB                  	ex	de,hl
      56.  00:55FC                      	
      57.  00:55FC  21 FC 05            	ld	hl,2*(23*32+30)
      58.  00:55FF                      	; call 	plot_foreground
      59.  00:55FF                      
      60.  00:55FF  3A 1A CB            	ld	a,(_buffer+4)
      61.  00:5602  5F                  	ld	e,a
      62.  00:5603  16 00               	ld	d,0
      63.  00:5605  21 90 07            	ld	hl,32*(64-2)-'0'
      64.  00:5608  19                  	add	hl,de
      65.  00:5609  EB                  	ex	de,hl
      66.  00:560A                      	
      67.  00:560A  21 FE 05            	ld	hl,2*(23*32+31)
      68.  00:560D                      	; call 	plot_foreground
      69.  00:560D  C9                  	ret
      70.  00:560E                      
      71.  00:560E                      ;-------------------------------------
      72.  00:560E                      _compute_fps:
      73.  00:560E  ED 5B 26 CB         	ld	de,(_fps)
      74.  00:5612  01 16 CB            	ld	bc,_buffer
      75.  00:5615                      
      76.  00:5615                      int2ascii:
      77.  00:5615                      	
      78.  00:5615                      ; in de input 
      79.  00:5615                      ; in bc output
      80.  00:5615                      
      81.  00:5615  EB                  	ex  de,hl
      82.  00:5616  59                  	ld  e,c
      83.  00:5617  50                  	ld  d,b
      84.  00:5618                      
      85.  00:5618                      Num2asc:
      86.  00:5618  01 F0 D8            	ld  bc,-10000
      87.  00:561B  CD 31 56            	call    Num1
      88.  00:561E  01 18 FC            	ld  bc,-1000
      89.  00:5621  CD 31 56            	call    Num1
      90.  00:5624  01 9C FF            	ld  bc,-100
      91.  00:5627  CD 31 56            	call    Num1
      92.  00:562A  0E F6               	ld  c,-10
      93.  00:562C  CD 31 56            	call    Num1
      94.  00:562F  0E FF               	ld  c,-1
      95.  00:5631                      
      96.  00:5631                      Num1:   
      97.  00:5631  3E 2F               	ld  a,'0'-1  ; '0' in the tileset
      98.  00:5633                      
      99.  00:5633                      Num2:   
     100.  00:5633  3C                  	inc a
     101.  00:5634  09                  	add hl,bc
     102.  00:5635  38 FC               	jr  c,Num2
     103.  00:5637  ED 42               	sbc hl,bc
     104.  00:5639                      
     105.  00:5639  12                  	ld  (de),a
     106.  00:563A  13                  	inc de
     107.  00:563B  C9                  	ret
     306   00:563C                      	include plot_line.asm
       1.  00:563C                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       2.  00:563C                      ; no input
       3.  00:563C                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       4.  00:563C                      
       5.  00:563C                      	
       6.  00:563C                      
       7.  00:563C                      blank_line:
       8.  00:563C  F3                  	di
       9.  00:563D  3E 24               	ld 		a, 36
      10.  00:563F  D3 99               	out 	(0x99),a
      11.  00:5641  3E 91               	ld 		a, 17+128
      12.  00:5643  D3 99               	out 	(0x99),a
      13.  00:5645                      
      14.  00:5645  CD 1F 42            	call _waitvdp		; no need ATM
      15.  00:5648                      	
      16.  00:5648  3A 35 CB            	ld		a,(_xoffset)
      17.  00:564B  83                  	add		a,e
      18.  00:564C  D3 9B               	out 	(0x9B), a 			; dx
      19.  00:564E  AF                  	xor a
      20.  00:564F  D3 9B               	out 	(0x9B), a			; dx (high)
      21.  00:5651                      	
      22.  00:5651  D3 9B               	out 	(0x9B), a			; dy
      23.  00:5653  3A 33 CB            	ld 		a,(_displaypage)	; destination page
      24.  00:5656  D3 9B               	out 	(0x9B), a			; dy (high-> page 0 or 1)
      25.  00:5658                      	
      26.  00:5658  3E 01               	ld		a,1
      27.  00:565A  D3 9B               	out 	(0x9B), a			; x block size
      28.  00:565C  AF                  	xor a
      29.  00:565D  D3 9B               	out 	(0x9B), a
      30.  00:565F                      
      31.  00:565F  3E B0               	ld		a,mapHeight*16
      32.  00:5661  D3 9B               	out 	(0x9B), a			; y block size
      33.  00:5663  AF                  	xor a
      34.  00:5664  D3 9B               	out 	(0x9B), a
      35.  00:5666                      
      36.  00:5666  D3 9B               	out 	(0x9B), a			; color
      37.  00:5668  D3 9B               	out 	(0x9B), a
      38.  00:566A                      
      39.  00:566A  3E C0               	ld		a,11000000B
      40.  00:566C  D3 9B               	out 	(0x9B), a		; command HMMV
      41.  00:566E  FB                  	ei
      42.  00:566F  C9                  	ret
      43.  00:5670                      
      44.  00:5670                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      45.  00:5670                      ; no input
      46.  00:5670                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      47.  00:5670                      
      48.  00:5670                      plot_line_lft1:
      49.  00:5670  2A 2F CB            	ld	hl,(_levelmap_pos)
      50.  00:5673  1E 00               	ld	e,0
      51.  00:5675  C3 81 57            	jp plot_line1
      52.  00:5678                      plot_line_lft2:
      53.  00:5678  2A 2F CB            	ld	hl,(_levelmap_pos)
      54.  00:567B  1E 00               	ld	e,0
      55.  00:567D  C3 98 57            	jp plot_line2
      56.  00:5680                      
      57.  00:5680                      
      58.  00:5680                      ; plot_line_lft:
      59.  00:5680                      	; ld	hl,(_levelmap_pos)
      60.  00:5680                      	; ld	e,0
      61.  00:5680                      	; jp plot_line
      62.  00:5680                      	
      63.  00:5680                      plot_line_rgt1:
      64.  00:5680  2A 2F CB            	ld	hl,(_levelmap_pos)
      65.  00:5683  11 0F 00            	ld	de,15
      66.  00:5686  19                  	add	hl,de
      67.  00:5687  1E F0               	ld	e,240
      68.  00:5689  C3 81 57            	jp plot_line1
      69.  00:568C                      plot_line_rgt2:
      70.  00:568C  2A 2F CB            	ld	hl,(_levelmap_pos)
      71.  00:568F  11 0F 00            	ld	de,15
      72.  00:5692  19                  	add	hl,de
      73.  00:5693  1E F0               	ld	e,240
      74.  00:5695  C3 98 57            	jp plot_line2
      75.  00:5698                      	
      76.  00:5698                      ; plot_line_rgt:
      77.  00:5698                      	; ld	hl,(_levelmap_pos)
      78.  00:5698                      	; ld	de,15
      79.  00:5698                      	; add	hl,de
      80.  00:5698                      	; ld	e,240
      81.  00:5698                      	; jp plot_line
      82.  00:5698                      	
      83.  00:5698                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      84.  00:5698                      ; input
      85.  00:5698                      ; de = y,x configured in window map 256x256
      86.  00:5698                      ; a  tile to be plot
      87.  00:5698                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      88.  00:5698                      plot_tile:
      89.  00:5698  D5                  		push	de
      90.  00:5699  D9                  		exx
      91.  00:569A  D1                  		pop		de
      92.  00:569B                      		
      93.  00:569B  67                  		ld	h,a
      94.  00:569C  07 07 07            [3]		rlca
      95.  00:569F  E6 07               		and	00000111B
      96.  00:56A1  C6 04               		add	a,:_tiles0
      97.  00:56A3  32 00 B0            		ld	(_kBank4),a
      98.  00:56A6  7C                  		ld	a,h
      99.  00:56A7  E6 1F               		and	00011111B
     100.  00:56A9  C6 A0               		add	a,high _tiles0
     101.  00:56AB  67                  		ld	h,a
     102.  00:56AC  2E 00               		ld	l,0
     103.  00:56AE                      
     104.  00:56AE  3A 33 CB            		ld	a,(_displaypage)
     105.  00:56B1                      					; de = y*256+x
     106.  00:56B1  CB 02               		rlc d		; set VDP for writing at address ADE (17-bit) ;
     107.  00:56B3  17                  		rla
     108.  00:56B4  CB 02               		rlc d
     109.  00:56B6  17                  		rla
     110.  00:56B7  CB 3A               		srl d 		 ; first shift
     111.  00:56B9  F3                  		di
     112.  00:56BA  D3 99               		out (0x99),a	; set bits 14-16
     113.  00:56BC  3E 8E               		ld a,14+128
     114.  00:56BE  D3 99               		out (0x99),a
     115.  00:56C0  FB                  		ei
     116.  00:56C1  CB 3A               		srl d 		 ;  second shift.     
     117.  00:56C3  CB F2               		set 6,d		 ;  write access
     118.  00:56C5                      
     119.  00:56C5  01 98 10            		ld	bc,16*256+0x98
     120.  00:56C8                      	
     121.  00:56C8  C5                  2:		push	bc
     122.  00:56C9  06 10               		ld	b,16
     123.  00:56CB  F3                  		di
     124.  00:56CC  7B                  1:		ld a,e 		;set bits 0-7
     125.  00:56CD  D3 99               		out (0x99),a
     126.  00:56CF  7A                  		ld a,d 		;set bits 8-13
     127.  00:56D0  D3 99               		out (0x99),a
     128.  00:56D2  14                  		inc	d
     129.  00:56D3  ED A3               		outi
     130.  00:56D5  C2 CC 56            		jp nz,1b
     131.  00:56D8  FB                  		ei
     132.  00:56D9  3E F0               		ld	a,-16
     133.  00:56DB  82                  		add	a,d
     134.  00:56DC  57                  		ld	d,a
     135.  00:56DD  1C                  		inc	e
     136.  00:56DE  C1                  		pop	bc
     137.  00:56DF  10 E7               		djnz 2b
     138.  00:56E1  D9                  		exx
     139.  00:56E2  C9                  		ret
     140.  00:56E3                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     141.  00:56E3                      ; 		
     142.  00:56E3                      init_page0:
     143.  00:56E3  3A 33 CB            		ld		a,(_displaypage)
     144.  00:56E6  57                  		ld		d,a
     145.  00:56E7  1E F0               		ld		e,240
     146.  00:56E9  CD 0F 57            		call	clrboder
     147.  00:56EC  2A 2F CB            		ld		hl,(_levelmap_pos)
     148.  00:56EF  11 00 00            		ld		de,0x0000			; e=x=0, d=y=0
     149.  00:56F2                      		
     150.  00:56F2  06 0B               		ld		b,11
     151.  00:56F4  C5                  2:		push	bc
     152.  00:56F5  06 0F               		ld		b,15
     153.  00:56F7  7E                  1:		ld		a,(hl)
     154.  00:56F8  CD 98 56            		call 	plot_tile
     155.  00:56FB  23                  		inc		hl
     156.  00:56FC  3E 10               		ld	a,16
     157.  00:56FE  83                  		add	a,e
     158.  00:56FF  5F                  		ld	e,a
     159.  00:5700  10 F5               		djnz	1b
     160.  00:5702                      				
     161.  00:5702  58                  		ld	e,b
     162.  00:5703  3E 10               		ld	a,16
     163.  00:5705  82                  		add	a,d
     164.  00:5706  57                  		ld	d,a
     165.  00:5707  01 F1 00            		ld	bc,mapWidth-15
     166.  00:570A  09                  		add	hl,bc
     167.  00:570B  C1                  		pop	bc
     168.  00:570C  10 E6               		djnz	2b
     169.  00:570E  C9                  		ret
     170.  00:570F                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     171.  00:570F                      ; 		
     172.  00:570F                      ; init_page1:
     173.  00:570F                      		; ld		a,(_displaypage)
     174.  00:570F                      		; ld		d,a
     175.  00:570F                      		; ld		e,0
     176.  00:570F                      		; call	clrboder
     177.  00:570F                      		; ld		hl,(_levelmap_pos)
     178.  00:570F                      		; ld		de,0x0010			; e=x=16, d=y=0
     179.  00:570F                      		
     180.  00:570F                      		; ld		b,11
     181.  00:570F                      ; 2:		push	bc
     182.  00:570F                      		; ld		b,15
     183.  00:570F                      ; 1:		ld		a,(hl)
     184.  00:570F                      		; call 	plot_tile
     185.  00:570F                      		; inc		hl
     186.  00:570F                      		; ld	a,16
     187.  00:570F                      		; add	a,e
     188.  00:570F                      		; ld	e,a
     189.  00:570F                      		; djnz	1b
     190.  00:570F                      		
     191.  00:570F                      		; ld	e,0x10
     192.  00:570F                      		; ld	a,e
     193.  00:570F                      		; add	a,d
     194.  00:570F                      		; ld	d,a
     195.  00:570F                      		; ld	bc,mapWidth-15
     196.  00:570F                      		; add	hl,bc
     197.  00:570F                      		; pop	bc
     198.  00:570F                      		; djnz	2b
     199.  00:570F                      		; ret
     200.  00:570F                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     201.  00:570F                      ; input
     202.  00:570F                      ; d = page
     203.  00:570F                      ; e = dx
     204.  00:570F                      ; l = background color
     205.  00:570F                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     206.  00:570F                      		
     207.  00:570F                      clrboder:
     208.  00:570F  F3                  	di
     209.  00:5710  3E 24               	ld 		a, 36
     210.  00:5712  D3 99               	out 	(0x99),a
     211.  00:5714  3E 91               	ld 		a, 17+128
     212.  00:5716  D3 99               	out 	(0x99),a
     213.  00:5718                      	
     214.  00:5718  CD 1F 42            	call _waitvdp
     215.  00:571B                      	
     216.  00:571B  7B                  	ld		a,e
     217.  00:571C  D3 9B               	out 	(0x9B), a 			; dx
     218.  00:571E  AF                  	xor		a
     219.  00:571F  D3 9B               	out 	(0x9B), a			; dx (high)
     220.  00:5721                      	
     221.  00:5721  D3 9B               	out 	(0x9B), a			; dy
     222.  00:5723  7A                  	ld 		a,d					; destination page
     223.  00:5724  D3 9B               	out 	(0x9B), a			; dy (high-> page 0 or 1)
     224.  00:5726                      	
     225.  00:5726  3E 10               	ld a,16
     226.  00:5728  D3 9B               	out 	(0x9B), a			; x block size
     227.  00:572A  AF                  	xor	a
     228.  00:572B  D3 9B               	out 	(0x9B), a
     229.  00:572D                      
     230.  00:572D  3E B0               	ld		a,mapHeight*16
     231.  00:572F  D3 9B               	out 	(0x9B), a			; y block size
     232.  00:5731  AF                  	xor a
     233.  00:5732  D3 9B               	out 	(0x9B), a
     234.  00:5734                      
     235.  00:5734  3E 00               	ld		a,border_color
     236.  00:5736  D3 9B               	out 	(0x9B), a			; color
     237.  00:5738  AF                  	xor a
     238.  00:5739  D3 9B               	out 	(0x9B), a
     239.  00:573B                      
     240.  00:573B  3E C0               	ld		a,11000000B
     241.  00:573D  D3 9B               	out 	(0x9B), a		; command HMMV
     242.  00:573F  FB                  	ei
     243.  00:5740  C9                  	ret
     244.  00:5741                      
     245.  00:5741                      
     246.  00:5741                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     247.  00:5741                      ; input
     248.  00:5741                      ; e = sx	from not _displaypage
     249.  00:5741                      ; d = dx	to _displaypage
     250.  00:5741                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     251.  00:5741                      
     252.  00:5741                      move_block:
     253.  00:5741  F3                  	di
     254.  00:5742  3E 20               	ld 		a, 32
     255.  00:5744  D3 99               	out 	(0x99),a
     256.  00:5746  3E 91               	ld 		a, 17+128
     257.  00:5748  D3 99               	out 	(0x99),a
     258.  00:574A                      
     259.  00:574A  0E 9B               	ld 		c, 0x9B
     260.  00:574C                      	
     261.  00:574C  CD 1F 42            	call _waitvdp		; no need ATM
     262.  00:574F                      	
     263.  00:574F  ED 59               	out		(c), e 		; sx
     264.  00:5751  AF                  	xor a
     265.  00:5752  D3 9B               	out		(0x9B), a 	; sx (high)
     266.  00:5754                      	
     267.  00:5754  D3 9B               	out		(0x9B), a 	; sy
     268.  00:5756  3A 33 CB            	ld 		a,(_displaypage)	; source page
     269.  00:5759  D3 9B               	out 	(0x9B), a 	; sy 	(high-> page 0 or 1)
     270.  00:575B                      
     271.  00:575B  ED 51               	out 	(c), d 		; dx
     272.  00:575D  AF                  	xor a
     273.  00:575E  D3 9B               	out 	(0x9B), a	; dx (high)
     274.  00:5760                      	
     275.  00:5760  D3 9B               	out 	(0x9B), a 		; dy
     276.  00:5762  3A 33 CB            	ld 		a,(_displaypage)	; destination page
     277.  00:5765  EE 01               	xor	1				
     278.  00:5767  D3 9B               	out 	(0x9B), a	; dy 	(high-> page 0 or 1)
     279.  00:5769                      
     280.  00:5769  3E 10               	ld 		a,16 		; block size
     281.  00:576B  D3 9B               	out 	(0x9B), a
     282.  00:576D  AF                  	xor a
     283.  00:576E  D3 9B               	out 	(0x9B), a	
     284.  00:5770  3E B0               	ld		a,mapHeight*16
     285.  00:5772  D3 9B               	out 	(0x9B), a
     286.  00:5774  AF                  	xor		a
     287.  00:5775  D3 9B               	out 	(0x9B), a
     288.  00:5777  D3 9B               	out 	(0x9B), a
     289.  00:5779  D3 9B               	out 	(0x9B), a
     290.  00:577B                      
     291.  00:577B  3E D0               	ld		a,11010000B
     292.  00:577D  D3 9B               	out 	(0x9B), a		; command HMMM
     293.  00:577F  FB                  	ei
     294.  00:5780  C9                  	ret
     295.  00:5781                      	
     307   00:5781                      	include plot_line2.asm
       1.  00:5781                      plot_line1:
       2.  00:5781  3A 35 CB            	ld	a,(_xoffset)
       3.  00:5784  83                  	add a,e
       4.  00:5785  5F                  	ld	e,a		; de = y*256+x
       5.  00:5786                      
       6.  00:5786  3A 33 CB            	ld	a,(_displaypage)
       7.  00:5789  87 87               [2] add a,a
       8.  00:578B  F3                  	di
       9.  00:578C  D3 99               	out (0x99),a 	; set bits 14-16
      10.  00:578E  3E 8E               	ld a,14+128
      11.  00:5790  D3 99               	out (0x99),a
      12.  00:5792  FB                  	ei
      13.  00:5793  16 40               	ld	d,0x40		; write access
      14.  00:5795  C3 D9 57            	jp	_1stblock	; trace 16 pixels
      15.  00:5798                      
      16.  00:5798                      plot_line2:
      17.  00:5798  24                  	inc	h
      18.  00:5799  3A 35 CB            	ld	a,(_xoffset)
      19.  00:579C  83                  	add a,e
      20.  00:579D  5F                  	ld	e,a		; de = y*256+x
      21.  00:579E                      
      22.  00:579E  3A 33 CB            	ld	a,(_displaypage)
      23.  00:57A1  87 87               [2] add a,a
      24.  00:57A3  F3                  	di
      25.  00:57A4  D3 99               	out (0x99),a 	; set bits 14-16
      26.  00:57A6  3E 8E               	ld a,14+128
      27.  00:57A8  D3 99               	out (0x99),a
      28.  00:57AA  FB                  	ei
      29.  00:57AB  16 50               	ld	d,0x50		; write access
      30.  00:57AD  CD 31 58            	call	_2nd	; trace 48 pixels
      31.  00:57B0                      	
      32.  00:57B0  3A 33 CB            	ld	a,(_displaypage)
      33.  00:57B3  87 87               [2] add a,a
      34.  00:57B5  F6 01               	or	1
      35.  00:57B7  F3                  	di
      36.  00:57B8  D3 99               	out (0x99),a 	; set bits 14-16
      37.  00:57BA  3E 8E               	ld a,14+128
      38.  00:57BC  D3 99               	out (0x99),a
      39.  00:57BE  FB                  	ei
      40.  00:57BF  16 40               	ld	d,0x40		; write access
      41.  00:57C1  CD 04 58            	call	_1st	; trace 64 pixels
      42.  00:57C4                      	
      43.  00:57C4  3A 33 CB            	ld	a,(_displaypage)
      44.  00:57C7  87 87               [2] add a,a
      45.  00:57C9  F6 02               	or	2
      46.  00:57CB  F3                  	di
      47.  00:57CC  D3 99               	out (0x99),a 	; set bits 14-16
      48.  00:57CE  3E 8E               	ld a,14+128
      49.  00:57D0  D3 99               	out (0x99),a
      50.  00:57D2  FB                  	ei
      51.  00:57D3  16 40               	ld	d,0x40		; write access
      52.  00:57D5  CD 31 58            	call	_2nd	; trace 48 pixels
      53.  00:57D8                      
      54.  00:57D8  C9                  	ret
      55.  00:57D9                      
      56.  00:57D9                      
      57.  00:57D9                      ; plot_line:
      58.  00:57D9                      	; ld	a,(_xoffset)
      59.  00:57D9                      	; add a,e
      60.  00:57D9                      	; ld	e,a		; de = y*256+x
      61.  00:57D9                      
      62.  00:57D9                      	; ld	a,(_displaypage)
      63.  00:57D9                      ; [2] add a,a
      64.  00:57D9                      	; di
      65.  00:57D9                      	; out (0x99),a 	; set bits 14-16
      66.  00:57D9                      	; ld a,14+128
      67.  00:57D9                      	; out (0x99),a
      68.  00:57D9                      	; ei
      69.  00:57D9                      	; ld	d,0x40		; write access
      70.  00:57D9                      	; call	_1st
      71.  00:57D9                      	
      72.  00:57D9                      	; ld	a,(_displaypage)
      73.  00:57D9                      ; [2] add a,a
      74.  00:57D9                      	; or	1
      75.  00:57D9                      	; di
      76.  00:57D9                      	; out (0x99),a 	; set bits 14-16
      77.  00:57D9                      	; ld a,14+128
      78.  00:57D9                      	; out (0x99),a
      79.  00:57D9                      	; ei
      80.  00:57D9                      	; ld	d,0x40		; write access
      81.  00:57D9                      	; call	_1st	
      82.  00:57D9                      	
      83.  00:57D9                      	; ld	a,(_displaypage)
      84.  00:57D9                      ; [2] add a,a
      85.  00:57D9                      	; or	2
      86.  00:57D9                      	; di
      87.  00:57D9                      	; out (0x99),a 	; set bits 14-16
      88.  00:57D9                      	; ld a,14+128
      89.  00:57D9                      	; out (0x99),a
      90.  00:57D9                      	; ei
      91.  00:57D9                      	; ld	d,0x40		; write access
      92.  00:57D9                      	; call	_2nd
      93.  00:57D9                      
      94.  00:57D9                      	; ret
      95.  00:57D9                      	
      96.  00:57D9                      _1stblock:
      97.  00:57D9                      ; hl ->   Map in RAM
      98.  00:57D9  7E                  	ld	a,(hl)
      99.  00:57DA  07 07 07            [3]	rlca
     100.  00:57DD  E6 07               	and	00000111B
     101.  00:57DF  C6 04               	add	a,:_tiles0
     102.  00:57E1  32 00 B0            	ld	(_kBank4),a
     103.  00:57E4  7E                  	ld	a,(hl)
     104.  00:57E5  E6 1F               	and	00011111B
     105.  00:57E7  C6 A0               	add	a,high _tiles0
     106.  00:57E9  67                  	ld	h,a
     107.  00:57EA  3A 35 CB            	ld	a,(_xoffset)
     108.  00:57ED  87 87 87 87         [4]	add	a,a
     109.  00:57F1  6F                  	ld	l,a
     110.  00:57F2                      
     111.  00:57F2                      	; hl -> tile column
     112.  00:57F2                      
     113.  00:57F2  01 98 10            	ld	bc,16*256+0x98
     114.  00:57F5  F3                  	di
     115.  00:57F6  7B                  1:	ld a,e 		;set bits 0-7
     116.  00:57F7  D3 99               	out (0x99),a
     117.  00:57F9  7A                  	ld a,d 		;set bits 8-13
     118.  00:57FA  D3 99               	out (0x99),a
     119.  00:57FC  14                  	inc	d
     120.  00:57FD  ED A3               	outi
     121.  00:57FF  C2 F6 57            	jp	nz,1b
     122.  00:5802  FB                  	ei
     123.  00:5803  C9                  	ret
     124.  00:5804                      	
     125.  00:5804                      _1st:
     126.  00:5804                      ; hl ->   Map in RAM
     127.  00:5804  E5                  	push	hl
     128.  00:5805                      		
     129.  00:5805  7E                  	ld	a,(hl)
     130.  00:5806  07 07 07            [3]	rlca
     131.  00:5809  E6 07               	and	00000111B
     132.  00:580B  C6 04               	add	a,:_tiles0
     133.  00:580D  32 00 B0            	ld	(_kBank4),a
     134.  00:5810  7E                  	ld	a,(hl)
     135.  00:5811  E6 1F               	and	00011111B
     136.  00:5813  C6 A0               	add	a,high _tiles0
     137.  00:5815  67                  	ld	h,a
     138.  00:5816  3A 35 CB            	ld	a,(_xoffset)
     139.  00:5819  87 87 87 87         [4]	add	a,a
     140.  00:581D  6F                  	ld	l,a
     141.  00:581E                      
     142.  00:581E                      	; hl -> tile column
     143.  00:581E                      
     144.  00:581E  01 98 10            	ld	bc,16*256+0x98
     145.  00:5821  F3                  	di
     146.  00:5822  7B                  1:	ld a,e 		;set bits 0-7
     147.  00:5823  D3 99               	out (0x99),a
     148.  00:5825  7A                  	ld a,d 		;set bits 8-13
     149.  00:5826  D3 99               	out (0x99),a
     150.  00:5828  14                  	inc	d
     151.  00:5829  ED A3               	outi
     152.  00:582B  C2 22 58            	jp	nz,1b
     153.  00:582E  FB                  	ei
     154.  00:582F                      	
     155.  00:582F  E1                  	pop	hl
     156.  00:5830  24                  	inc h
     157.  00:5831                      _2nd:
     158.  00:5831                      	repeat 3
     159.  00:5831                    < 	push	hl
     160.  00:5831                    < 		
     161.  00:5831                    < 	ld	a,(hl)
     162.  00:5831                    < [3]	rlca
     163.  00:5831                    < 	and	00000111B
     164.  00:5831                    < 	add	a,:_tiles0
     165.  00:5831                    < 	ld	(_kBank4),a
     166.  00:5831                    < 	ld	a,(hl)
     167.  00:5831                    < 	and	00011111B
     168.  00:5831                    < 	add	a,high _tiles0
     169.  00:5831                    < 	ld	h,a
     170.  00:5831                    < 	ld	a,(_xoffset)
     171.  00:5831                    < [4]	add	a,a
     172.  00:5831                    < 	ld	l,a
     173.  00:5831                    < 
     174.  00:5831                    < 	; hl -> tile column
     175.  00:5831                    < 
     176.  00:5831                    < 	ld	bc,16*256+0x98
     177.  00:5831                    < 	di
     178.  00:5831                    < 1:	ld a,e 		;set bits 0-7
     179.  00:5831                    < 	out (0x99),a
     180.  00:5831                    < 	ld a,d 		;set bits 8-13
     181.  00:5831                    < 	out (0x99),a
     182.  00:5831                    < 	inc	d
     183.  00:5831                    < 	outi
     184.  00:5831                    < 	jp	nz,1b
     185.  00:5831                    < 	ei
     186.  00:5831                    < 	
     187.  00:5831                    < 	pop	hl
     188.  00:5831                    < 	inc h
     189.  00:5831                    < 	endrepeat
     189.  00:5831  E5 7E 07 07 07 E6 07 C6 04 32 00 B0 7E E6 1F C6 
     189.  00:5841  A0 67 3A 35 CB 87 87 87 87 6F 01 98 10 F3 7B D3 
     189.  00:5851  99 7A D3 99 14 ED A3 C2 4F 58 FB E1 24 E5 7E 07 
     189.  00:5861  07 07 E6 07 C6 04 32 00 B0 7E E6 1F C6 A0 67 3A 
     189.  00:5871  35 CB 87 87 87 87 6F 01 98 10 F3 7B D3 99 7A D3 
     189.  00:5881  99 14 ED A3 C2 7C 58 FB E1 24 E5 7E 07 07 07 E6 
     189.  00:5891  07 C6 04 32 00 B0 7E E6 1F C6 A0 67 3A 35 CB 87 
     189.  00:58A1  87 87 87 6F 01 98 10 F3 7B D3 99 7A D3 99 14 ED 
     189.  00:58B1  A3 C2 A9 58 FB E1 24 
     190.  00:58B8  C9                  	ret
     191.  00:58B9                      	
     308   00:58B9                      	include color_update.asm
       1.  00:58B9                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       2.  00:58B9                      ; update main ship
       3.  00:58B9                      ;
       4.  00:58B9                      	
       5.  00:58B9                      _plot_spt:
       6.  00:58B9  0E 00               	ld		c,0
       7.  00:58BB  11 00 F0            	ld		de,0F000h
       8.  00:58BE  CD A5 41            	call	_vdpsetvramwr
       9.  00:58C1                      	
      10.  00:58C1  3E 03               	ld	a, :ms_spt
      11.  00:58C3  32 00 B0            	ld	(_kBank4),a
      12.  00:58C6                      
      13.  00:58C6  2A 4B CB            	ld	hl,(aniframe)
      14.  00:58C9  7D                  	ld	a,l
      15.  00:58CA  BC                  	cp	h
      16.  00:58CB  C8                  	ret	z
      17.  00:58CC  32 4D CB            	ld	(old_aniframe),a
      18.  00:58CF  21 EB 48            	ld	hl,ms_ani
      19.  00:58D2  4F                  	ld	c,a
      20.  00:58D3  06 00               	ld	b,0
      21.  00:58D5  09                  	add	hl,bc
      22.  00:58D6  6E                  	ld	l,(hl)
      23.  00:58D7  60                  	ld	h,b
      24.  00:58D8  29 29 29 29 29      [5]	add hl,hl
      25.  00:58DD  5D                  	ld	e,l
      26.  00:58DE  54                  	ld	d,h
      27.  00:58DF  29                  	add	hl,hl
      28.  00:58E0  19                  	add	hl,de
      29.  00:58E1  11 80 A6            	ld	de,ms_spt
      30.  00:58E4  19                  	add hl,de
      31.  00:58E5  0E 98               	ld	c,0x98
      32.  00:58E7  CD EF 58            	call	out48
      33.  00:58EA  3E FF               	ld	a,-1
      34.  00:58EC  32 34 CB            	ld	(_mccolorchange),a
      35.  00:58EF                      out48:
      36.  00:58EF                      [16]	outi
      36.  00:58EF  ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 
      36.  00:58FF  ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 
      37.  00:590F                      out32:
      38.  00:590F                      [16]	outi
      38.  00:590F  ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 
      38.  00:591F  ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 
      39.  00:592F                      out16:
      40.  00:592F                      [16]	outi
      40.  00:592F  ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 
      40.  00:593F  ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 ED A3 
      41.  00:594F  C9                  	ret
      42.  00:5950                      	
      43.  00:5950                      
      44.  00:5950                      set_manta_color
      45.  00:5950  3A 34 CB            	ld	a,(_mccolorchange)
      46.  00:5953  A7                  	and	a
      47.  00:5954  C8                  	ret z
      48.  00:5955  F3                  	di
      49.  00:5956  7B                  	ld a,e 					; set bits 0-7
      50.  00:5957  D3 99               	out (0x99),a
      51.  00:5959  7A                  	ld a,d 					; set bits 8-13 with write access
      52.  00:595A  D3 99               	out (0x99),a
      53.  00:595C                      
      54.  00:595C  AF                  	xor	a
      55.  00:595D  32 34 CB            	ld	(_mccolorchange),a
      56.  00:5960  F3                  	di
      57.  00:5961  3E 03               	ld	a, :manta_color
      58.  00:5963  32 00 B0            	ld	(_kBank4),a
      59.  00:5966                      	
      60.  00:5966  ED 4B 4B CB         	ld	bc,(aniframe)
      61.  00:596A  06 00               	ld	b,0
      62.  00:596C  21 EB 48            	ld	hl,ms_ani
      63.  00:596F  09                  	add	hl,bc
      64.  00:5970  6E                  	ld	l,(hl)
      65.  00:5971  60                  	ld	h,b
      66.  00:5972  29 29 29 29 29      [5]	add hl,hl
      67.  00:5977  01 00 A0            	ld  bc,manta_color
      68.  00:597A  09                  	add	hl,bc
      69.  00:597B  0E 98               	ld	c,0x98
      70.  00:597D  CD 0F 59            	call	out32
      71.  00:5980  C9                  	ret
      72.  00:5981                      		
      73.  00:5981                      
      74.  00:5981                      color_enemy:
      75.  00:5981  CD B9 58            	call 	_plot_spt
      76.  00:5984  3A 53 CB            	ld	a,(flip_flop)
      77.  00:5987  E6 01               	and	1
      78.  00:5989  C2 DF 59            	jp nz, reversecolor_enemy
      79.  00:598C                      	
      80.  00:598C                      directcolor_enemy:		
      81.  00:598C                      		
      82.  00:598C  3E 03               	ld	a,3
      83.  00:598E  D3 99               	out (0x99),a 		;set bits 14-16 of F800h
      84.  00:5990  3E 8E               	ld a,14+128
      85.  00:5992  D3 99               	out (0x99),a
      86.  00:5994                      		
      87.  00:5994  11 00 78            	ld		de,07800h	; F800h 3 positions  for bullets and manta
      88.  00:5997                      	
      89.  00:5997  CD 50 59            	call	set_manta_color
      90.  00:599A                      
      91.  00:599A  3E 1C               	ld	a, :color_base
      92.  00:599C  32 00 B0            	ld	(_kBank4),a
      93.  00:599F                      
      94.  00:599F  11 80 78            	ld		de,16*(3+max_bullets+max_enem_bullets)+07800h	; F800h 6 positions for bullets
      95.  00:59A2                      	
      96.  00:59A2  DD 21 AB CB         	ld	ix,enemies		; process two layer enemies
      97.  00:59A6                      
      98.  00:59A6  01 98 0C            	ld	bc,256*max_enem+0x98
      99.  00:59A9                      		
     100.  00:59A9  DD CB 07 46         1:	bit	0,(ix+enemy_data.status)
     101.  00:59AD  CA D0 59            	jp	z,.next
     102.  00:59B0                      		
     103.  00:59B0  DD 7E 0A            	ld	a,(ix+enemy_data.frame)
     104.  00:59B3  DD BE 0B            	cp  (ix+enemy_data.color)
     105.  00:59B6  CA D0 59            	jp	z,.next
     106.  00:59B9                      	
     107.  00:59B9  DD 77 0B            	ld   (ix+enemy_data.color),a
     108.  00:59BC                      	
     109.  00:59BC  6F                  	ld	l,a					; color x 4
     110.  00:59BD  26 00               	ld	h,0
     111.  00:59BF  29 29               [2]	add hl,hl				; color x 16
     112.  00:59C1                      		
     113.  00:59C1  3E A0               	ld	a,high color_base	; nb: the first 16 patterns reserved to mship, explosions and bullets
     114.  00:59C3  84                  	add	a,h
     115.  00:59C4  67                  	ld	h,a
     116.  00:59C5                      	
     117.  00:59C5  7B                  	ld a,e 					; set bits 0-7
     118.  00:59C6  D3 99               	out (0x99),a
     119.  00:59C8  7A                  	ld a,d 					; set bits 8-13 with write access
     120.  00:59C9  D3 99               	out (0x99),a
     121.  00:59CB  78                  	ld	a,b
     122.  00:59CC  CD 0F 59            	call out32
     123.  00:59CF  47                  	ld b,a
     124.  00:59D0                      
     125.  00:59D0                      .next
     126.  00:59D0  C5                  	push bc
     127.  00:59D1  01 0F 00            	ld	bc,enemy_data
     128.  00:59D4  DD 09               	add ix,bc
     129.  00:59D6  C1                  	pop bc
     130.  00:59D7  21 20 00            	ld hl,32
     131.  00:59DA  19                  	add hl,de
     132.  00:59DB  EB                  	ex de,hl
     133.  00:59DC                      	
     134.  00:59DC  10 CB               	djnz	1b
     135.  00:59DE  C9                  	ret
     136.  00:59DF                      
     137.  00:59DF                      reversecolor_enemy:
     138.  00:59DF  11 00 7C            	ld		de,07C00h	; FC00h 6 positions for bullets
     139.  00:59E2                      
     140.  00:59E2  3E 03               	ld	a,3
     141.  00:59E4  D3 99               	out (0x99),a 		;set bits 14-16 of F800h
     142.  00:59E6  3E 8E               	ld a,14+128
     143.  00:59E8  D3 99               	out (0x99),a
     144.  00:59EA                      	
     145.  00:59EA  3E 1C               	ld	a, :color_base
     146.  00:59EC  32 00 B0            	ld	(_kBank4),a
     147.  00:59EF                      	
     148.  00:59EF  DD 21 50 CC         	ld	ix,enemies+(max_enem-1)*enemy_data
     149.  00:59F3                      	
     150.  00:59F3  01 98 0C            	ld	bc,0x98+256*max_enem
     151.  00:59F6                      	
     152.  00:59F6  DD CB 07 46         1:	bit	0,(ix+enemy_data.status)
     153.  00:59FA  CA 1D 5A            	jp	z,.next
     154.  00:59FD                      	
     155.  00:59FD  DD 7E 0A            	ld	a,(ix+enemy_data.frame)
     156.  00:5A00  DD BE 0C            	cp  (ix+enemy_data.color2)
     157.  00:5A03  CA 1D 5A            	jp	z,.next
     158.  00:5A06                      	
     159.  00:5A06  DD 77 0C            	ld   (ix+enemy_data.color2),a
     160.  00:5A09                      	
     161.  00:5A09  6F                  	ld	l,a					; color x 4
     162.  00:5A0A  26 00               	ld	h,0
     163.  00:5A0C  29 29               [2]	add hl,hl				; color x 16
     164.  00:5A0E                      	
     165.  00:5A0E  3E A0               	ld	a,high color_base	; nb: the first 16 patterns reserved to mship, explosions and bullets
     166.  00:5A10  84                  	add	a,h
     167.  00:5A11  67                  	ld	h,a
     168.  00:5A12                      	
     169.  00:5A12  7B                  	ld a,e 					; set bits 0-7
     170.  00:5A13  D3 99               	out (0x99),a
     171.  00:5A15  7A                  	ld a,d 					; set bits 8-13 with write access
     172.  00:5A16  D3 99               	out (0x99),a
     173.  00:5A18  78                  	ld	a,b
     174.  00:5A19  CD 0F 59            	call out32
     175.  00:5A1C  47                  	ld b,a
     176.  00:5A1D                      
     177.  00:5A1D                      .next
     178.  00:5A1D  C5                  	push bc
     179.  00:5A1E  01 F1 FF            	ld	bc,-enemy_data
     180.  00:5A21  DD 09               	add ix,bc
     181.  00:5A23  C1                  	pop bc
     182.  00:5A24  21 20 00            	ld hl,32
     183.  00:5A27  19                  	add hl,de
     184.  00:5A28  EB                  	ex de,hl
     185.  00:5A29                      	
     186.  00:5A29  10 CB               	djnz	1b
     187.  00:5A2B                      		
     188.  00:5A2B                      	
     189.  00:5A2B  11 D0 7D            	ld	de,07C00h+16*(2*max_enem+max_bullets + max_enem_bullets)	; FC00h 6 positions for bullets
     190.  00:5A2E                      
     191.  00:5A2E  C3 50 59            	jp	set_manta_color
     192.  00:5A31                      
     193.  00:5A31                      
     309   00:5A31                      ms_bllts_col_win:
     310   00:5A31                      	include ms_bllts_frm_coll_wind.asm
       1.  00:5A31                      ms_bllts_coll_wind:
       2.  00:5A31  05 0B 02 0E             defb 5,11,2,14 ; xmin,xmax,ymin,ymax
       3.  00:5A35  05 0B 04 0D             defb 5,11,4,13 
       4.  00:5A39  05 0B 06 0B             defb 5,11,6,11 
       5.  00:5A3D  05 0B 07 0A             defb 5,11,7,10 
       6.  00:5A41  05 0B 08 08             defb 5,11,8,8 
       7.  00:5A45  05 0B 07 0A             defb 5,11,7,10 
       8.  00:5A49  05 0B 06 0B             defb 5,11,6,11 
       9.  00:5A4D  05 0B 04 0D             defb 5,11,4,13 
      10.  00:5A51                      
     311   00:5A51                      	include	ms_bllts.asm
       1.  00:5A51                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       2.  00:5A51                      ; activate ms bullets
       3.  00:5A51                      ;
       4.  00:5A51  (00:0005)           max_bullet_rate equ 5
       5.  00:5A51                      
       6.  00:5A51                      ms_shoot:
       7.  00:5A51  3A 40 CB            	ld	a,(bullet_rate)
       8.  00:5A54  A7                  	and a
       9.  00:5A55  CA 5D 5A            	jp	z,.book_bullet
      10.  00:5A58  3D                  	dec a
      11.  00:5A59  32 40 CB            	ld	(bullet_rate),a
      12.  00:5A5C  C9                  	ret
      13.  00:5A5D                      .book_bullet:
      14.  00:5A5D  3E 05               	ld	a,max_bullet_rate
      15.  00:5A5F  32 40 CB            	ld	(bullet_rate),a
      16.  00:5A62                      
      17.  00:5A62  DD 21 60 CB         	ld	ix,ms_bullets
      18.  00:5A66  06 02               	ld	b,max_bullets
      19.  00:5A68  11 0F 00            	ld	de,enemy_data
      20.  00:5A6B  DD CB 07 46         1:	bit	0,(ix+enemy_data.status)
      21.  00:5A6F  28 05               	jr	z,.activate_this
      22.  00:5A71  DD 19               	add ix,de
      23.  00:5A73  10 F6               	djnz   1b
      24.  00:5A75  C9                  	ret
      25.  00:5A76                      
      26.  00:5A76                      .activate_this:
      27.  00:5A76  AF                  	xor	a				; ms bullet
      28.  00:5A77  CD AB 55            	call AFXPLAY
      29.  00:5A7A                      
      30.  00:5A7A  3A 4C CB            	ld	a,(ms_state)	; in states 0-3 ms faces right
      31.  00:5A7D  E6 04               	and 0x04
      32.  00:5A7F  20 0A               	jr	nz,.shootsx
      33.  00:5A81                      .shootdx
      34.  00:5A81  DD 36 07 01         	ld	(ix+enemy_data.status),1
      35.  00:5A85  21 08 00            	ld	hl,8
      36.  00:5A88  C3 92 5A            	jp	1f
      37.  00:5A8B                      
      38.  00:5A8B                      .shootsx
      39.  00:5A8B  DD 36 07 41         	ld	(ix+enemy_data.status),1 + 64
      40.  00:5A8F  21 F8 FF            	ld	hl,-8
      41.  00:5A92                      1:
      42.  00:5A92  3A 4B CB            	ld	a,(aniframe)
      43.  00:5A95  E6 07               	and 7
      44.  00:5A97  C6 08               	add a,8
      45.  00:5A99  87                  	add a,a
      46.  00:5A9A  87                  	add a,a
      47.  00:5A9B  DD 77 0A            	ld	(ix+enemy_data.frame),a
      48.  00:5A9E                      
      49.  00:5A9E  CD C4 47            	call	bullet_set_size	; set  xoff,yoff,xsize,ysize for sprite collision
      50.  00:5AA1                      
      51.  00:5AA1  3A 43 CB            	ld	a,(dxmap)
      52.  00:5AA4  CB 2F CB 2F         [2] sra a
      53.  00:5AA8  5F                  	ld	e,a
      54.  00:5AA9  17                  	rla
      55.  00:5AAA  9F                  	sbc a,a
      56.  00:5AAB  57                  	ld	d,a
      57.  00:5AAC                      
      58.  00:5AAC  19                  	add hl,de
      59.  00:5AAD  DD 75 0D            	ld	(ix+enemy_data.speed),l
      60.  00:5AB0  DD 74 0E            	ld	(ix+enemy_data.speed+1),h
      61.  00:5AB3                      
      62.  00:5AB3  2A 49 CB            	ld	hl,(xship)
      63.  00:5AB6  DD 75 01            	ld	(ix+enemy_data.x),l
      64.  00:5AB9  DD 74 02            	ld	(ix+enemy_data.x+1),h
      65.  00:5ABC                      
      66.  00:5ABC  3A 48 CB            	ld	a,(yship)
      67.  00:5ABF  DD 77 00            	ld	(ix+enemy_data.y),a
      68.  00:5AC2  DD 36 08 11         	ld	(ix+enemy_data.cntr),17
      69.  00:5AC6  C9                  	ret
      70.  00:5AC7                      
      71.  00:5AC7                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      72.  00:5AC7                      ; manage active ms bullets
      73.  00:5AC7                      ;
      74.  00:5AC7                      
      75.  00:5AC7                      bullet_loop:
      76.  00:5AC7  DD 21 60 CB         	ld	ix,ms_bullets
      77.  00:5ACB                      	
      78.  00:5ACB                      	repeat	max_bullets
      79.  00:5ACB                    < 	bit	 0,(ix+enemy_data.status)
      80.  00:5ACB                    < 	jr	z,1f
      81.  00:5ACB                    < 
      82.  00:5ACB                    < 	; move right or	 left
      83.  00:5ACB                    < 
      84.  00:5ACB                    < 	ld	l,(ix+enemy_data.x)
      85.  00:5ACB                    < 	ld	h,(ix+enemy_data.x+1)
      86.  00:5ACB                    < 	ld	e,(ix+enemy_data.speed)
      87.  00:5ACB                    < 	ld	d,(ix+enemy_data.speed+1)
      88.  00:5ACB                    < 	add hl,de
      89.  00:5ACB                    < 	ld	(ix+enemy_data.x),l
      90.  00:5ACB                    < 	ld	(ix+enemy_data.x+1),h
      91.  00:5ACB                    < 
      92.  00:5ACB                    < 	ld	a,(ix+enemy_data.y)
      93.  00:5ACB                    < 
      94.  00:5ACB                    < 	call	.test_obstacles
      95.  00:5ACB                    < 	jr		z,.blocked
      96.  00:5ACB                    < 	
      97.  00:5ACB                    < 	dec	(ix+enemy_data.cntr)
      98.  00:5ACB                    < 	jr	nz,1f
      99.  00:5ACB                    < .blocked
     100.  00:5ACB                    < 	res 0,(ix+enemy_data.status)
     101.  00:5ACB                    < 1:
     102.  00:5ACB                    < 	ld	de,enemy_data
     103.  00:5ACB                    < 	add ix,de
     104.  00:5ACB                    < 	
     105.  00:5ACB                    < 	endrepeat
     105.  00:5ACB  DD CB 07 46 28 24 DD 6E 01 DD 66 02 DD 5E 0D DD 
     105.  00:5ADB  56 0E 19 DD 75 01 DD 74 02 DD 7E 00 CD 2A 5B 28 
     105.  00:5AEB  05 DD 35 08 20 04 DD CB 07 86 11 0F 00 DD 19 DD 
     105.  00:5AFB  CB 07 46 28 24 DD 6E 01 DD 66 02 DD 5E 0D DD 56 
     105.  00:5B0B  0E 19 DD 75 01 DD 74 02 DD 7E 00 CD 2A 5B 28 05 
     105.  00:5B1B  DD 35 08 20 04 DD CB 07 86 11 0F 00 DD 19 
     106.  00:5B29  C9                  	ret
     107.  00:5B2A                      
     108.  00:5B2A                      ; hl  = X, a = Y
     109.  00:5B2A                      ; de = x_speed
     110.  00:5B2A                      ;
     111.  00:5B2A                      ; return Z is an obstacle is found
     112.  00:5B2A                      .test_obstacles:
     113.  00:5B2A  DD 4E 0A            	ld	c,(ix+enemy_data.frame)
     114.  00:5B2D  06 00               	ld	b,0
     115.  00:5B2F  FD 21 11 5A         	ld	iy,ms_bllts_col_win-32	; bullet frames go from 32 to 60 step 4
     116.  00:5B33  FD 09               	add	iy,bc					; here iy points to the collision window of the current frame of the bullet
     117.  00:5B35                      
     118.  00:5B35  CB 7A               	bit	7,d						; test direction of the bullet
     119.  00:5B37  28 06               	jr	z,2f					
     120.  00:5B39  FD 5E 00            	ld	e,(iy+0)				; direction x negative -> take xmin of the frame
     121.  00:5B3C  C3 42 5B            	jp	3f
     122.  00:5B3F                      
     123.  00:5B3F  FD 5E 01            2:	ld	e,(iy+1)				; direction x positive  -> take xmax of the frame
     124.  00:5B42                      	
     125.  00:5B42  16 00               3:	ld	d,0
     126.  00:5B44  19                  	add hl,de
     127.  00:5B45                      	
     128.  00:5B45  FD 86 02            	add	a,(iy+2)				; add ymin to y
     129.  00:5B48                      	
     130.  00:5B48  57                  	ld	d,a						; HL is x, A is y
     131.  00:5B49                      	
     132.  00:5B49  01 00 C0            	ld	bc,_levelmap
     133.  00:5B4C  0F 0F 0F 0F         [4]	rrca
     134.  00:5B50  E6 0F               	and 15
     135.  00:5B52  29 29 29 29         [4]	add	hl,hl
     136.  00:5B56  6C                  	ld	l,h
     137.  00:5B57  67                  	ld	h,a
     138.  00:5B58  09                  	add	hl,bc
     139.  00:5B59  7E                  	ld	a,(hl)
     140.  00:5B5A                      	;XXXXXXX add actual test for obstacles
     141.  00:5B5A  FE F0               	cp 	240
     142.  00:5B5C  C8                  	ret	z
     143.  00:5B5D  FE F1               	cp 	241
     144.  00:5B5F  C8                  	ret	z						; skip the rest if already hit
     145.  00:5B60                      
     146.  00:5B60  7A                  	ld	a,d
     147.  00:5B61  E6 F0               	and	0xF0
     148.  00:5B63  57                  	ld	d,a
     149.  00:5B64  DD 7E 00            	ld	a,(ix+enemy_data.y)
     150.  00:5B67  FD 86 03            	add	a,(iy+3)
     151.  00:5B6A  E6 F0               	and	0xF0
     152.  00:5B6C  BA                  	cp	d
     153.  00:5B6D  CA 78 5B            	jp	z,1f					; avoid testing twice the same 16x16 tile
     154.  00:5B70  24                  	inc	h
     155.  00:5B71  7E                  	ld	a,(hl)
     156.  00:5B72                      	;XXXXXXX add actual test for obstacles
     157.  00:5B72  FE F0               	cp 	240
     158.  00:5B74  C8                  	ret	z
     159.  00:5B75  FE F1               	cp 	241
     160.  00:5B77  C9                  	ret
     161.  00:5B78                      1:	
     162.  00:5B78  3C                  	inc	a
     163.  00:5B79  BA                  	cp	d				; ret with nz
     164.  00:5B7A  C9                  	ret
     165.  00:5B7B                      	
     166.  00:5B7B                      
     167.  00:5B7B                      	
     168.  00:5B7B                      
     169.  00:5B7B                      
     170.  00:5B7B                      	
     171.  00:5B7B                      	
     172.  00:5B7B                      ; .tst_block:
     173.  00:5B7B                      	; call test_obstacles.meta_tile_peek
     174.  00:5B7B                      	; ld	e,a
     175.  00:5B7B                      	; dec	a					; deal with space apart
     176.  00:5B7B                      	; cp	nblock-1
     177.  00:5B7B                      	
     178.  00:5B7B                      	; jp	nc,.no_blocking		; a>22
     179.  00:5B7B                      	
     180.  00:5B7B                      ; .blocking:	
     181.  00:5B7B                      	; res 0,(ix+enemy_data.status)
     182.  00:5B7B                      	; ld	a,10			; hit solid wall
     183.  00:5B7B                      	; call AFXPLAY
     184.  00:5B7B                      	; xor	a
     185.  00:5B7B                      	; ret					; obstacle found - return Z
     186.  00:5B7B                      	
     187.  00:5B7B                      ; .no_blocking:
     188.  00:5B7B                      	; cp	nblock+n_d2x1-1
     189.  00:5B7B                      	; jp	nc,.no_2x1		; a>26
     190.  00:5B7B                      	
     191.  00:5B7B                      	; cp	nblock+1
     192.  00:5B7B                      	; jr	c,.left2x1		; two 2x1 items
     193.  00:5B7B                      	
     194.  00:5B7B                      ; .right2x1:
     195.  00:5B7B                      	; ld	a,(hl)
     196.  00:5B7B                      	; add	a,n_d2x1
     197.  00:5B7B                      	; ld	(hl),a
     198.  00:5B7B                      	; dec	hl
     199.  00:5B7B                      	; jr	1f
     200.  00:5B7B                      	
     201.  00:5B7B                      ; .left2x1:
     202.  00:5B7B                      	; ld	a,(hl)
     203.  00:5B7B                      	; add	a,n_d2x1
     204.  00:5B7B                      	; ld	(hl),a
     205.  00:5B7B                      	; inc	hl
     206.  00:5B7B                      ; 1:	ld	a,(hl)
     207.  00:5B7B                      	; add	a,n_d2x1
     208.  00:5B7B                      	; ld	(hl),a
     209.  00:5B7B                      
     210.  00:5B7B                      	; res 0,(ix+enemy_data.status)
     211.  00:5B7B                      	; ld	a,11			; destroy small ground item
     212.  00:5B7B                      	; call AFXPLAY
     213.  00:5B7B                      	; ld	bc,5			; score for destruction of a small ground item
     214.  00:5B7B                      	; call	add_bc_score_bin
     215.  00:5B7B                      	
     216.  00:5B7B                      	; call	land_now_test	; make LAND NOW arrive sooner
     217.  00:5B7B                      	; ret
     218.  00:5B7B                      	
     219.  00:5B7B                      ; .no_2x1:
     220.  00:5B7B                      	
     221.  00:5B7B                      	; cp	nblock+n_d2x1*2-1
     222.  00:5B7B                      	; jr	z,.left_up3x2
     223.  00:5B7B                      	; cp	nblock+n_d2x1*2+0
     224.  00:5B7B                      	; jr	z,.left_dw3x2
     225.  00:5B7B                      	; cp	nblock+n_d2x1*2+1
     226.  00:5B7B                      	; jr	z,.left_up3x2
     227.  00:5B7B                      	; cp	nblock+n_d2x1*2+2
     228.  00:5B7B                      	; jr	z,.left_dw3x2
     229.  00:5B7B                      
     230.  00:5B7B                      	; cp	nblock+n_d2x1*2+7
     231.  00:5B7B                      	; jr	z,.right_up3x2
     232.  00:5B7B                      	; cp	nblock+n_d2x1*2+8
     233.  00:5B7B                      	; jr	z,.right_dw3x2
     234.  00:5B7B                      	; cp	nblock+n_d2x1*2+9
     235.  00:5B7B                      	; jr	z,.right_up3x2
     236.  00:5B7B                      	; cp	nblock+n_d2x1*2+10
     237.  00:5B7B                      	; jr	z,.right_dw3x2
     238.  00:5B7B                      	
     239.  00:5B7B                      	; ret				; obstacle not found - return NZ
     240.  00:5B7B                      	
     241.  00:5B7B                      ; .left_dw3x2:
     242.  00:5B7B                      	; ld	bc,-LvlWidth
     243.  00:5B7B                      	; add hl,bc
     244.  00:5B7B                      	; jr	.left_up3x2
     245.  00:5B7B                      
     246.  00:5B7B                      ; .right_up3x2:
     247.  00:5B7B                      ; [2]	dec hl
     248.  00:5B7B                      	; jr	.left_up3x2
     249.  00:5B7B                      
     250.  00:5B7B                      ; .right_dw3x2:
     251.  00:5B7B                      	; ld	bc,-LvlWidth-2
     252.  00:5B7B                      	; add hl,bc
     253.  00:5B7B                      
     254.  00:5B7B                      ; .left_up3x2:
     255.  00:5B7B                      	; repeat 3
     256.  00:5B7B                      	; ld	a,(hl)
     257.  00:5B7B                      	; add	a,n_d3x2
     258.  00:5B7B                      	; ld	(hl),a
     259.  00:5B7B                      	; inc	hl
     260.  00:5B7B                      	; endrepeat
     261.  00:5B7B                      	; ld	bc,LvlWidth-3
     262.  00:5B7B                      	; add hl,bc
     263.  00:5B7B                      	; repeat 3
     264.  00:5B7B                      	; ld	a,(hl)
     265.  00:5B7B                      	; add	a,n_d3x2
     266.  00:5B7B                      	; ld	(hl),a
     267.  00:5B7B                      	; inc	hl
     268.  00:5B7B                      	; endrepeat
     269.  00:5B7B                      	
     270.  00:5B7B                      	; res 0,(ix+enemy_data.status)
     271.  00:5B7B                      	; ld	a,12				; destroy large ground item
     272.  00:5B7B                      	; call AFXPLAY
     273.  00:5B7B                      	; ld	bc,50				; score for destruction of a large ground item
     274.  00:5B7B                      	; call	add_bc_score_bin
     275.  00:5B7B                      	
     276.  00:5B7B                      	; call	land_now_test	; make LAND NOW arrive sooner
     277.  00:5B7B                      	; ret
     278.  00:5B7B                      	
     279.  00:5B7B                      
     280.  00:5B7B                      	
     312   00:5B7B                      		
     313   00:5B7B                      ;-------------------------------------
     314   00:5B7B                      
     315   00:5B7B                      	
     316   00:5B7B  (01)                		page 1
     317   01:6000                      
     318   01:6000                      		include	ms_crtl.asm
       1.  01:6000                      	
       2.  01:6000  (01:0000)           ms_fly__right				equ	0
       3.  01:6000  (01:0001)           ms_spin_face_right			equ	1
       4.  01:6000  (01:0002)           ms_side_dwn_face_right		equ	2
       5.  01:6000  (01:0003)           ms_side_up__face_right		equ	3
       6.  01:6000                      
       7.  01:6000  (01:0004)           ms_fly__left				equ	4
       8.  01:6000  (01:0005)           ms_spin_face_left			equ	5
       9.  01:6000  (01:0006)           ms_side_dwn_face_left		equ	6
      10.  01:6000  (01:0007)           ms_side_up__face_left		equ	7
      11.  01:6000                      
      12.  01:6000  (01:0008)           ms_loop_right2left			equ	8
      13.  01:6000  (01:0009)           ms_loop_left2right			equ	9
      14.  01:6000                      
      15.  01:6000  (01:000A)           ms_explode					equ	10
      16.  01:6000  (01:000B)           ms_landing					equ	11
      17.  01:6000  (01:000C)           ms_reset					equ	12
      18.  01:6000                      
      19.  01:6000                      ;%%%%%%%%%%%%%%%%%%%%%%
      20.  01:6000                      ms_ctrl:
      21.  01:6000  3A 04 CB            		ld	a,(_mcdivider)
      22.  01:6003  3C                  		inc	a
      23.  01:6004  32 04 CB            		ld	(_mcdivider),a
      24.  01:6007  E6 01               		and	1
      25.  01:6009  C0                  		ret	nz
      26.  01:600A  3A 4C CB            		ld	a,(ms_state)
      27.  01:600D  FE 09               		cp	ms_explode-1		; ms cannot move while exploding landing or at level reset
      28.  01:600F  DC 5D 60            		call	c,.ms_directions
      29.  01:6012                      
      30.  01:6012                      .intro:
      31.  01:6012  3A 4C CB            		ld	a,(ms_state)
      32.  01:6015  FE 00               		cp	ms_fly__right
      33.  01:6017  CA 4F 61            		jp	z,.ms_fly__right
      34.  01:601A                      	
      35.  01:601A  FE 08               		cp	ms_loop_right2left
      36.  01:601C  CA 9E 61            		jp	z,.ms_loop_right2left
      37.  01:601F                      		
      38.  01:601F  FE 05               		cp	ms_spin_face_left
      39.  01:6021  CA B4 61            		jp	z,.ms_spin_face_left
      40.  01:6024                      		
      41.  01:6024  FE 04               		cp	ms_fly__left
      42.  01:6026  CA CA 61            		jp	z,.ms_fly__left
      43.  01:6029                      		
      44.  01:6029  FE 09               		cp	ms_loop_left2right
      45.  01:602B  CA 1C 62            		jp	z,.ms_loop_left2right
      46.  01:602E                      
      47.  01:602E  FE 01               		cp	ms_spin_face_right
      48.  01:6030  CA 32 62            		jp	z,.ms_spin_face_right
      49.  01:6033                      		
      50.  01:6033  FE 02               		cp	ms_side_dwn_face_right
      51.  01:6035  CA 48 62            		jp	z,.ms_side_dwn_face_right
      52.  01:6038                      
      53.  01:6038  FE 03               		cp	ms_side_up__face_right
      54.  01:603A  CA 7F 62            		jp	z,.ms_side_up__face_right
      55.  01:603D                      		
      56.  01:603D  FE 06               		cp	ms_side_dwn_face_left
      57.  01:603F  CA B6 62            		jp	z,.ms_side_dwn_face_left
      58.  01:6042                      
      59.  01:6042  FE 07               		cp	ms_side_up__face_left
      60.  01:6044  CA EE 62            		jp	z,.ms_side_up__face_left
      61.  01:6047                      
      62.  01:6047  FE 0A               		cp	ms_explode
      63.  01:6049  CA 26 63            		jp	z,.ms_explode
      64.  01:604C                      		
      65.  01:604C  FE 0B               		cp	ms_landing
      66.  01:604E  CA 5C 60            		jp	z,.ms_landing
      67.  01:6051                      
      68.  01:6051  FE 0C               		cp	ms_reset
      69.  01:6053  CA 5C 60            		jp	z,.ms_reset
      70.  01:6056                      	
      71.  01:6056                      ;	abnormal end
      72.  01:6056  3E 00               		ld	a,ms_fly__right
      73.  01:6058  32 4C CB            		ld	(ms_state),a
      74.  01:605B  C9                  		ret
      75.  01:605C                      	
      76.  01:605C                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      77.  01:605C                      ;	FAKE FOR TEST
      78.  01:605C                      .ms_landing	
      79.  01:605C                      .ms_reset 
      80.  01:605C  C9                  	ret
      81.  01:605D                      	
      82.  01:605D                         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      83.  01:605D                          ;	control X and Y 
      84.  01:605D                      
      85.  01:605D                      .ms_directions:
      86.  01:605D                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      87.  01:605D                      	; read joystick and keyboard
      88.  01:605D  CD CD 60            		call	.rd_joy
      89.  01:6060                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      90.  01:6060                          ; x speed control of the screen and of the main ship
      91.  01:6060  CD 49 61            		call    .right
      92.  01:6063  CC 93 60            		call	z,.test_move_right
      93.  01:6066                      
      94.  01:6066  CD 43 61            		call    .left
      95.  01:6069  CC A6 60            		call	z,.test_move_left
      96.  01:606C                      
      97.  01:606C                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      98.  01:606C                          ; y control of the main ship
      99.  01:606C                      
     100.  01:606C  CD 31 61            		call    .up
     101.  01:606F  20 0D               		jr  nz,1f
     102.  01:6071  CD C4 60            		call	._up
     103.  01:6074  3A 48 CB            		ld  a,(yship)
     104.  01:6077  D6 04               		sub	a,4
     105.  01:6079  38 03               		jr  c,1f
     106.  01:607B  32 48 CB            		ld  (yship),a
     107.  01:607E                      1:
     108.  01:607E  CD 3D 61            		call    .dwn
     109.  01:6081  20 0F               		jr  nz,1f
     110.  01:6083  CD B9 60            		call	._dw
     111.  01:6086  3A 48 CB            		ld  a,(yship)
     112.  01:6089  C6 04               		add	a,4
     113.  01:608B  FE A1               		cp  mapHeight*16-16+1
     114.  01:608D  30 03               		jr  nc,1f
     115.  01:608F  32 48 CB            		ld  (yship),a
     116.  01:6092                      1:
     117.  01:6092  C9                  		ret
     118.  01:6093                      
     119.  01:6093                      ;-------------------------------------
     120.  01:6093                      .test_move_right:
     121.  01:6093  3A 43 CB            		ld		a,(dxmap)
     122.  01:6096  3C                  		inc		a
     123.  01:6097  CA A1 60            		jp      z,1f
     124.  01:609A  FE 05               		cp 		maxspeed+1
     125.  01:609C  F0                  		ret		p
     126.  01:609D  32 43 CB            		ld		(dxmap),a			; moving right
     127.  01:60A0  C9                  		ret
     128.  01:60A1  3C                  1:		inc     a
     129.  01:60A2  32 43 CB            		ld		(dxmap),a			; moving right
     130.  01:60A5  C9                  		ret
     131.  01:60A6                      		
     132.  01:60A6                      .test_move_left
     133.  01:60A6  3A 43 CB            		ld		a,(dxmap)
     134.  01:60A9  3D                  		dec		a
     135.  01:60AA  CA B4 60            		jp      z,1f
     136.  01:60AD  FE FC               		cp		-maxspeed
     137.  01:60AF  F8                  		ret		m
     138.  01:60B0  32 43 CB            		ld		(dxmap),a			; moving left
     139.  01:60B3  C9                  		ret
     140.  01:60B4  3D                  1:		dec     a
     141.  01:60B5  32 43 CB            		ld		(dxmap),a			; moving left
     142.  01:60B8  C9                  		ret
     143.  01:60B9                      ;-------------------------------------
     144.  01:60B9                      
     145.  01:60B9  3A 36 CB            ._dw:	ld		a,(_yoffset)
     146.  01:60BC  3C                  		inc		a
     147.  01:60BD  FE 08               		cp		mapHeight*16-YSIZE
     148.  01:60BF  F0                  		ret 	p
     149.  01:60C0  32 36 CB            		ld		(_yoffset),a
     150.  01:60C3  C9                  		ret
     151.  01:60C4                      
     152.  01:60C4  3A 36 CB            ._up:	ld		a,(_yoffset)
     153.  01:60C7  3D                  		dec		a
     154.  01:60C8  F8                  		ret		m
     155.  01:60C9  32 36 CB            		ld		(_yoffset),a
     156.  01:60CC  C9                  		ret
     157.  01:60CD                      
     158.  01:60CD                      ;-------------------------------------
     159.  01:60CD                      	
     160.  01:60CD                      ; PSG I/O port A (r#14) – read-only
     161.  01:60CD                      ; Bit	Description	Comment
     162.  01:60CD                      ; 0	Input joystick pin 1	(up)
     163.  01:60CD                      ; 1	Input joystick pin 2	(down)
     164.  01:60CD                      ; 2	Input joystick pin 3	(left)
     165.  01:60CD                      ; 3	Input joystick pin 4	(right)
     166.  01:60CD                      ; 4	Input joystick pin 6	(trigger A)
     167.  01:60CD                      ; 5	Input joystick pin 7	(trigger B)
     168.  01:60CD                      ; 6	Japanese keyboard layout bit	(1=JIS, 0=ANSI)
     169.  01:60CD                      ; 7	Cassette input signal	
     170.  01:60CD                      
     171.  01:60CD                      .rd_joy:
     172.  01:60CD  3E 0F               	ld	a,#0f
     173.  01:60CF  D3 A0               	out	(#a0),a
     174.  01:60D1  3E 8F               	ld	a,0x8F
     175.  01:60D3  D3 A1               	out	(#a1),a		; select port A
     176.  01:60D5  3E 0E               	ld	a,#0e
     177.  01:60D7  D3 A0               	out	(#a0),a
     178.  01:60D9  DB A2               	in	a,(#a2)
     179.  01:60DB                      .rd_key:	
     180.  01:60DB  DD 21 03 CB         	ld	ix,joystick
     181.  01:60DF  DD 77 00            	ld	(ix),a
     182.  01:60E2                      	
     183.  01:60E2  1E 08               	ld  e,8
     184.  01:60E4  CD C9 44                call    checkkbd
     185.  01:60E7  CB 47               	bit	0,a				; space
     186.  01:60E9  20 04               	jr	nz,1f
     187.  01:60EB  DD CB 00 A6         	res	4,(ix)			; (trigger A)
     188.  01:60EF                      1:
     189.  01:60EF  CB 7F               	bit	7,a				; RIGHT
     190.  01:60F1  20 04               	jr	nz,1f
     191.  01:60F3  DD CB 00 9E         	res	3,(ix)			; (right joy)
     192.  01:60F7                      1:
     193.  01:60F7  CB 77               	bit	6,a				; DOWN
     194.  01:60F9  20 04               	jr	nz,1f
     195.  01:60FB  DD CB 00 8E         	res	1,(ix)			; (down joy)
     196.  01:60FF                      1:
     197.  01:60FF  CB 6F               	bit	5,a				; UP
     198.  01:6101  20 04               	jr	nz,1f
     199.  01:6103  DD CB 00 86         	res	0,(ix)			; (up joy)
     200.  01:6107                      1:
     201.  01:6107  CB 67               	bit	4,a				; LEFT
     202.  01:6109  20 04               	jr	nz,1f
     203.  01:610B  DD CB 00 96         	res	2,(ix)			; (left joy)
     204.  01:610F                      1:
     205.  01:610F  1E 05               	ld  e,5
     206.  01:6111  CD C9 44                call    checkkbd
     207.  01:6114  CB 6F               	bit	5,a				; X
     208.  01:6116  20 04               	jr	nz,1f
     209.  01:6118  DD CB 00 AE         	res	5,(ix)			; (trigger B)
     210.  01:611C                      1:
     211.  01:611C  CB 7F               	bit	7,a				; Z
     212.  01:611E  20 04               	jr	nz,1f
     213.  01:6120  DD CB 00 A6         	res	4,(ix)			; (trigger A)
     214.  01:6124                      1:
     215.  01:6124  C9                  	ret
     216.  01:6125                      
     217.  01:6125                      	
     218.  01:6125                      	
     219.  01:6125                      ;    5   |    Z     Y     X     W     V     U     T     S
     220.  01:6125                      ;    6   |   F3    F2    F1   CODE   CAP  GRAPH CTRL  SHIFT
     221.  01:6125                      ;    7   |   RET   SEL   BS   STOP   TAB   ESC   F5    F4
     222.  01:6125                      ;    8   |  RIGHT DOWN   UP   LEFT   DEL   INS  HOME  SPACE
     223.  01:6125                      .z_or_space:
     224.  01:6125  3A 03 CB            	ld	a,(joystick)
     225.  01:6128  E6 10               	and	16
     226.  01:612A  C9                  	ret
     227.  01:612B                      .x_and_up:
     228.  01:612B  3A 03 CB            	ld	a,(joystick)
     229.  01:612E  E6 20               	and	32
     230.  01:6130  C0                  	ret	nz
     231.  01:6131                      .up:
     232.  01:6131  3A 03 CB            	ld	a,(joystick)
     233.  01:6134  E6 01               	and	1
     234.  01:6136  C9                  	ret
     235.  01:6137                      .x_and_dwn:
     236.  01:6137  3A 03 CB            	ld	a,(joystick)
     237.  01:613A  E6 20               	and	32
     238.  01:613C  C0                  	ret	nz
     239.  01:613D                      .dwn:
     240.  01:613D  3A 03 CB            	ld	a,(joystick)
     241.  01:6140  E6 02               	and	2
     242.  01:6142  C9                  	ret
     243.  01:6143                      .left:
     244.  01:6143  3A 03 CB            	ld	a,(joystick)
     245.  01:6146  E6 04               	and	4
     246.  01:6148  C9                  	ret
     247.  01:6149                      .right:
     248.  01:6149  3A 03 CB            	ld	a,(joystick)
     249.  01:614C  E6 08               	and	8
     250.  01:614E  C9                  	ret
     251.  01:614F                      
     252.  01:614F                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     253.  01:614F                      .ms_fly__right:		
     254.  01:614F  3A 43 CB            	ld  a,(dxmap)
     255.  01:6152  CB 7F               	bit	7,a
     256.  01:6154  28 0A               	jr z,1f
     257.  01:6156                      	
     258.  01:6156  AF                  	xor	a
     259.  01:6157  32 4B CB            	ld  (aniframe),a
     260.  01:615A  3E 08               	ld	a,ms_loop_right2left
     261.  01:615C  32 4C CB            	ld	(ms_state),a
     262.  01:615F  C9                  	ret
     263.  01:6160                      1:
     264.  01:6160  3E 20               	ld	a,32
     265.  01:6162  32 4B CB            	ld  (aniframe),a
     266.  01:6165  CD 2B 61            	call	.x_and_up
     267.  01:6168  C2 76 61            	jp	nz,1f
     268.  01:616B  3E 20               	ld	a,32
     269.  01:616D  32 4B CB            	ld  (aniframe),a
     270.  01:6170  3E 03               	ld	a,ms_side_up__face_right
     271.  01:6172  32 4C CB            	ld	(ms_state),a
     272.  01:6175  C9                  	ret
     273.  01:6176  CD 37 61            1:	call	.x_and_dwn
     274.  01:6179  C2 87 61            	jp	nz,1f
     275.  01:617C  3E 28               	ld	a,40
     276.  01:617E  32 4B CB            	ld  (aniframe),a
     277.  01:6181  3E 02               	ld	a,ms_side_dwn_face_right
     278.  01:6183  32 4C CB            	ld	(ms_state),a
     279.  01:6186  C9                  	ret
     280.  01:6187  CD 43 61            1:	call	.left
     281.  01:618A  C2 97 61            	jp	nz,1f
     282.  01:618D  AF                  	xor	a
     283.  01:618E  32 4B CB            	ld  (aniframe),a
     284.  01:6191  3E 08               	ld	a,ms_loop_right2left
     285.  01:6193  32 4C CB            	ld	(ms_state),a
     286.  01:6196  C9                  	ret
     287.  01:6197  CD 25 61            1:	call	.z_or_space
     288.  01:619A  CA 51 5A            	jp		z,ms_shoot
     289.  01:619D  C9                  	ret
     290.  01:619E                      	
     291.  01:619E                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     292.  01:619E                      .ms_loop_right2left:
     293.  01:619E  3A 4B CB            	ld	a,(aniframe)
     294.  01:61A1  3C                  	inc	a
     295.  01:61A2  32 4B CB            	ld	(aniframe),a
     296.  01:61A5  FE 04               	cp	4
     297.  01:61A7  CA B3 61            	jp	z,1f
     298.  01:61AA  FE 08               	cp	8
     299.  01:61AC  C0                  	ret	nz
     300.  01:61AD  3E 05               	ld	a,ms_spin_face_left
     301.  01:61AF  32 4C CB            	ld	(ms_state),a
     302.  01:61B2  C9                  	ret
     303.  01:61B3                      1:
     304.  01:61B3                      	; xor	a
     305.  01:61B3                          ; ld  (dxmap),a
     306.  01:61B3  C9                  	ret
     307.  01:61B4                      	
     308.  01:61B4                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     309.  01:61B4                      .ms_spin_face_left:
     310.  01:61B4  CD 25 61            	call	.z_or_space
     311.  01:61B7  CC 51 5A            	call	z,ms_shoot
     312.  01:61BA  3A 4B CB            	ld	a,(aniframe)
     313.  01:61BD  3C                  	inc	a
     314.  01:61BE  32 4B CB            	ld	(aniframe),a
     315.  01:61C1  FE 10               	cp	16
     316.  01:61C3  C0                  	ret	nz
     317.  01:61C4  3E 04               	ld	a,ms_fly__left
     318.  01:61C6  32 4C CB            	ld	(ms_state),a
     319.  01:61C9  C9                  	ret
     320.  01:61CA                      	
     321.  01:61CA                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     322.  01:61CA                      .ms_fly__left:
     323.  01:61CA  3A 43 CB            	ld  a,(dxmap)
     324.  01:61CD  3D                  	dec	a
     325.  01:61CE  CB 7F               	bit	7,a
     326.  01:61D0  20 0B               	jr nz,1f
     327.  01:61D2                      	
     328.  01:61D2  3E 10               	ld	a,16
     329.  01:61D4  32 4B CB            	ld  (aniframe),a
     330.  01:61D7  3E 09               	ld	a,ms_loop_left2right
     331.  01:61D9  32 4C CB            	ld	(ms_state),a
     332.  01:61DC  C9                  	ret	
     333.  01:61DD                      1:
     334.  01:61DD  3E 30               	ld	a,48
     335.  01:61DF  32 4B CB            	ld  (aniframe),a
     336.  01:61E2  CD 2B 61            	call	.x_and_up
     337.  01:61E5  C2 F3 61            	jp	nz,1f
     338.  01:61E8  3E 30               	ld	a,48
     339.  01:61EA  32 4B CB            	ld  (aniframe),a
     340.  01:61ED  3E 07               	ld	a,ms_side_up__face_left
     341.  01:61EF  32 4C CB            	ld	(ms_state),a
     342.  01:61F2  C9                  	ret
     343.  01:61F3  CD 37 61            1:	call	.x_and_dwn
     344.  01:61F6  C2 04 62            	jp	nz,1f
     345.  01:61F9  3E 38               	ld	a,56
     346.  01:61FB  32 4B CB            	ld  (aniframe),a
     347.  01:61FE  3E 06               	ld	a,ms_side_dwn_face_left
     348.  01:6200  32 4C CB            	ld	(ms_state),a
     349.  01:6203  C9                  	ret
     350.  01:6204  CD 49 61            1:	call	.right
     351.  01:6207  C2 15 62            	jp	nz,1f
     352.  01:620A  3E 10               	ld	a,16
     353.  01:620C  32 4B CB            	ld  (aniframe),a
     354.  01:620F  3E 09               	ld	a,ms_loop_left2right
     355.  01:6211  32 4C CB            	ld	(ms_state),a
     356.  01:6214  C9                  	ret
     357.  01:6215  CD 25 61            1:	call	.z_or_space
     358.  01:6218  CA 51 5A            	jp		z,ms_shoot
     359.  01:621B  C9                  	ret
     360.  01:621C                      	
     361.  01:621C                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     362.  01:621C                      .ms_loop_left2right:
     363.  01:621C  3A 4B CB            	ld	a,(aniframe)
     364.  01:621F  3C                  	inc	a
     365.  01:6220  32 4B CB            	ld	(aniframe),a
     366.  01:6223  FE 14               	cp	20
     367.  01:6225  CA 31 62            	jp	z,1f
     368.  01:6228  FE 18               	cp	24
     369.  01:622A  C0                  	ret	nz
     370.  01:622B  3E 01               	ld	a,ms_spin_face_right
     371.  01:622D  32 4C CB            	ld	(ms_state),a
     372.  01:6230  C9                  	ret
     373.  01:6231                      1:	; xor	a
     374.  01:6231                          ; ld  (dxmap),a
     375.  01:6231  C9                  	ret
     376.  01:6232                      
     377.  01:6232                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     378.  01:6232                      .ms_spin_face_right:
     379.  01:6232  CD 25 61            	call	.z_or_space
     380.  01:6235  CC 51 5A            	call	z,ms_shoot
     381.  01:6238  3A 4B CB            	ld	a,(aniframe)
     382.  01:623B  3C                  	inc	a
     383.  01:623C  32 4B CB            	ld	(aniframe),a
     384.  01:623F  FE 20               	cp	32
     385.  01:6241  C0                  	ret	nz
     386.  01:6242  3E 00               	ld	a,ms_fly__right
     387.  01:6244  32 4C CB            	ld	(ms_state),a
     388.  01:6247  C9                  	ret
     389.  01:6248                      	
     390.  01:6248                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     391.  01:6248                      .ms_side_dwn_face_right:
     392.  01:6248  CD 25 61            	call	.z_or_space
     393.  01:624B  CC 51 5A            	call	z,ms_shoot
     394.  01:624E  3A 4B CB            	ld	a,(aniframe)
     395.  01:6251  FE 2C               	cp	44
     396.  01:6253  CA 68 62            	jp	z,1f
     397.  01:6256                      
     398.  01:6256  3C                  	inc	a
     399.  01:6257  32 4B CB            	ld	(aniframe),a
     400.  01:625A  FE 2F               	cp	47
     401.  01:625C  C0                  	ret	nz
     402.  01:625D  3E 20               	ld	a,32
     403.  01:625F  32 4B CB            	ld	(aniframe),a
     404.  01:6262  3E 00               	ld	a,ms_fly__right
     405.  01:6264  32 4C CB            	ld	(ms_state),a
     406.  01:6267  C9                  	ret
     407.  01:6268  3A 43 CB            1:	ld  a,(dxmap)
     408.  01:626B  CB 7F               	bit	7,a
     409.  01:626D  20 0A               	jr nz,1f
     410.  01:626F  CD 2B 61            	call	.x_and_up
     411.  01:6272  CA 79 62            	jp		z,1f
     412.  01:6275  CD 43 61            	call	.left
     413.  01:6278  C0                  	ret	nz
     414.  01:6279  3E 2D               1:	ld	a,45
     415.  01:627B  32 4B CB            	ld	(aniframe),a
     416.  01:627E  C9                  	ret
     417.  01:627F                      
     418.  01:627F                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     419.  01:627F                      .ms_side_up__face_right	
     420.  01:627F  CD 25 61            	call	.z_or_space
     421.  01:6282  CC 51 5A            	call	z,ms_shoot
     422.  01:6285  3A 4B CB            	ld	a,(aniframe)
     423.  01:6288  FE 24               	cp	36
     424.  01:628A  CA 9F 62            	jp	z,1f
     425.  01:628D                      
     426.  01:628D  3C                  	inc	a
     427.  01:628E  32 4B CB            	ld	(aniframe),a
     428.  01:6291  FE 28               	cp	40
     429.  01:6293  C0                  	ret	nz
     430.  01:6294  3E 20               	ld	a,32
     431.  01:6296  32 4B CB            	ld	(aniframe),a
     432.  01:6299  3E 00               	ld	a,ms_fly__right
     433.  01:629B  32 4C CB            	ld	(ms_state),a
     434.  01:629E  C9                  	ret
     435.  01:629F  3A 43 CB            1:	ld  a,(dxmap)
     436.  01:62A2  CB 7F               	bit	7,a
     437.  01:62A4  20 0A               	jr nz,1f
     438.  01:62A6  CD 37 61            	call	.x_and_dwn
     439.  01:62A9  CA B0 62            	jp		z,1f
     440.  01:62AC  CD 43 61            	call	.left
     441.  01:62AF  C0                  	ret	nz
     442.  01:62B0  3E 25               1:	ld	a,37
     443.  01:62B2  32 4B CB            	ld	(aniframe),a
     444.  01:62B5  C9                  	ret
     445.  01:62B6                      
     446.  01:62B6                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     447.  01:62B6                      .ms_side_dwn_face_left	
     448.  01:62B6  CD 25 61            	call	.z_or_space
     449.  01:62B9  CC 51 5A            	call	z,ms_shoot
     450.  01:62BC  3A 4B CB            	ld	a,(aniframe)
     451.  01:62BF  FE 3C               	cp	60
     452.  01:62C1  CA D6 62            	jp	z,1f
     453.  01:62C4                      
     454.  01:62C4  3C                  	inc	a
     455.  01:62C5  32 4B CB            	ld	(aniframe),a
     456.  01:62C8  FE 3F               	cp	63
     457.  01:62CA  C0                  	ret	nz
     458.  01:62CB  3E 30               	ld	a,48
     459.  01:62CD  32 4B CB            	ld	(aniframe),a
     460.  01:62D0  3E 04               	ld	a,ms_fly__left
     461.  01:62D2  32 4C CB            	ld	(ms_state),a
     462.  01:62D5  C9                  	ret
     463.  01:62D6  3A 43 CB            1:	ld  a,(dxmap)
     464.  01:62D9  3D                  	dec	a
     465.  01:62DA  CB 7F               	bit	7,a
     466.  01:62DC  28 0A               	jr z,1f
     467.  01:62DE  CD 2B 61            	call	.x_and_up
     468.  01:62E1  CA E8 62            	jp		z,1f
     469.  01:62E4  CD 49 61            	call	.right
     470.  01:62E7  C0                  	ret	nz
     471.  01:62E8  3E 3D               1:	ld	a,61
     472.  01:62EA  32 4B CB            	ld	(aniframe),a
     473.  01:62ED  C9                  	ret
     474.  01:62EE                      
     475.  01:62EE                      
     476.  01:62EE                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     477.  01:62EE                      .ms_side_up__face_left	
     478.  01:62EE  CD 25 61            	call	.z_or_space
     479.  01:62F1  CC 51 5A            	call	z,ms_shoot
     480.  01:62F4  3A 4B CB            	ld	a,(aniframe)
     481.  01:62F7  FE 34               	cp	52
     482.  01:62F9  CA 0E 63            	jp	z,1f
     483.  01:62FC                      
     484.  01:62FC  3C                  	inc	a
     485.  01:62FD  32 4B CB            	ld	(aniframe),a
     486.  01:6300  FE 38               	cp	56
     487.  01:6302  C0                  	ret	nz
     488.  01:6303  3E 30               	ld	a,48
     489.  01:6305  32 4B CB            	ld	(aniframe),a
     490.  01:6308  3E 04               	ld	a,ms_fly__left
     491.  01:630A  32 4C CB            	ld	(ms_state),a
     492.  01:630D  C9                  	ret
     493.  01:630E  3A 43 CB            1:	ld  a,(dxmap)
     494.  01:6311  3D                  	dec	a
     495.  01:6312  CB 7F               	bit	7,a
     496.  01:6314  28 0A               	jr z,1f
     497.  01:6316  CD 37 61            	call	.x_and_dwn
     498.  01:6319  CA 20 63            	jp		z,1f
     499.  01:631C  CD 49 61            	call	.right
     500.  01:631F  C0                  	ret	nz
     501.  01:6320  3E 35               1:	ld	a,53
     502.  01:6322  32 4B CB            	ld	(aniframe),a
     503.  01:6325  C9                  	ret
     504.  01:6326                      
     505.  01:6326                      
     506.  01:6326                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     507.  01:6326                      .ms_explode:
     508.  01:6326  3A 4E CB            	ld	a,(anispeed)
     509.  01:6329  3C                  	inc	a
     510.  01:632A  E6 03               	and	3
     511.  01:632C  32 4E CB            	ld	(anispeed),a
     512.  01:632F  C0                  	ret nz
     513.  01:6330  3A 4B CB            	ld	a,(aniframe)
     514.  01:6333  3C                  	inc	a
     515.  01:6334  32 4B CB            	ld	(aniframe),a
     516.  01:6337  FE 50               	cp	80
     517.  01:6339  C0                  	ret	nz
     518.  01:633A  AF                  	xor	a
     519.  01:633B  32 48 CB            	ld	(yship),a
     520.  01:633E                      	; call	put_ms_sprt.expl
     521.  01:633E  3E 0C               	ld	a,ms_reset
     522.  01:6340  32 4C CB            	ld	(ms_state),a
     523.  01:6343                      	
     524.  01:6343  0E 01               	ld	c,1						; show lives on screen 
     525.  01:6345                      	; call	sub_c_lives_bin
     526.  01:6345                      	
     527.  01:6345  3E FF               	ld	a,-1
     528.  01:6347  32 4F CB            	ld	(already_dead),a	; reset at level start, set after you die
     529.  01:634A                      
     530.  01:634A  3A 50 CB            	ld	a,(lives_bin)
     531.  01:634D  A7                  	and	a
     532.  01:634E  C0                  	ret	nz
     533.  01:634F                      		
     534.  01:634F                      	; call	PT3_MUTE
     535.  01:634F  3E 13               	ld	a,19			; game over
     536.  01:6351  CD AB 55            	call AFXPLAY
     537.  01:6354                      	
     538.  01:6354                      	; ld	hl,GameOver
     539.  01:6354                      	; ld	de,0x1C00+8*3*32
     540.  01:6354                      	; call	print_strf
     541.  01:6354  06 00               	ld	b,0
     542.  01:6356  76                  1:	halt	
     543.  01:6357  10 FD               	djnz	1b
     544.  01:6359                      
     545.  01:6359                      	; you've lost 
     546.  01:6359                      	; pop af
     547.  01:6359                      	; jp	title_screen
     548.  01:6359                      
     549.  01:6359  C9                  	ret
     550.  01:635A                      
     319   01:635A                      		include	put_ms_sprt.asm
       1.  01:635A                      
       2.  01:635A                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       3.  01:635A                      ;
       4.  01:635A                      ;	manage SAT entries of the main ship
       5.  01:635A                      ;
       6.  01:635A                      
       7.  01:635A                      put_ms_sprt:
       8.  01:635A  3A 4C CB            	ld	a,(ms_state)
       9.  01:635D  FE 0A               	cp	ms_explode
      10.  01:635F  28 3E               	jr	z,.expl
      11.  01:6361                      						; manage SAT entries of the main ship
      12.  01:6361  21 54 CB            	ld	hl,ram_sat
      13.  01:6364  3A 48 CB            	ld	a,(yship)
      14.  01:6367  3D                  	dec	a
      15.  01:6368  77                  	ld	(hl),a
      16.  01:6369  23                  	inc hl
      17.  01:636A  3A 35 CB            	ld	a,(_xoffset)		; compensate R#18 
      18.  01:636D  C6 78               	add	a,xship_rel
      19.  01:636F  77                  	ld	(hl),a
      20.  01:6370  23                  	inc hl
      21.  01:6371  36 00               	ld	(hl),0		; shape 0 hard wired
      22.  01:6373                      	; ld	(hl),64		; shape 0 hard wired
      23.  01:6373  23                  	inc hl
      24.  01:6374  36 0F               	ld	(hl),15
      25.  01:6376  23                  	inc hl
      26.  01:6377                      
      27.  01:6377  3A 48 CB            	ld	a,(yship)
      28.  01:637A  3D                  	dec	a
      29.  01:637B  77                  	ld	(hl),a
      30.  01:637C  23                  	inc hl
      31.  01:637D  3A 35 CB            	ld	a,(_xoffset)		; compensate R#18 
      32.  01:6380  C6 78               	add	a,xship_rel
      33.  01:6382  77                  	ld	(hl),a
      34.  01:6383  23                  	inc hl
      35.  01:6384  36 04               	ld	(hl),4		; shape 4 hard wired
      36.  01:6386                      	; ld	(hl),64+4		; shape 4 hard wired
      37.  01:6386  4F                  	ld	c,a
      38.  01:6387  23                  	inc hl
      39.  01:6388  36 07               	ld	(hl),7
      40.  01:638A  23                  	inc hl
      41.  01:638B                      
      42.  01:638B  3A 48 CB            	ld	a,(yship)
      43.  01:638E  C6 0F               	add a,16-1
      44.  01:6390  77                  	ld	(hl),a
      45.  01:6391  23                  	inc hl
      46.  01:6392  3A 35 CB            	ld	a,(_xoffset)		; compensate R#18 
      47.  01:6395  C6 88               	add	a,xship_rel+16
      48.  01:6397  77                  	ld	(hl),a
      49.  01:6398  23                  	inc hl
      50.  01:6399  36 08               	ld	(hl),8		; shape 8 hard wired
      51.  01:639B                      	; ld	(hl),64+4		; shape 8 hard wired
      52.  01:639B  23                  	inc hl
      53.  01:639C  36 01               	ld	(hl),1
      54.  01:639E  C9                  	ret
      55.  01:639F                      .expl:
      56.  01:639F                      						; manage SAT entries of the main ship
      57.  01:639F  21 54 CB            	ld	hl,ram_sat
      58.  01:63A2  3A 48 CB            	ld	a,(yship)
      59.  01:63A5  77                  	ld	(hl),a
      60.  01:63A6  23                  	inc hl
      61.  01:63A7  3A 35 CB            	ld	a,(_xoffset)		; compensate R#18 
      62.  01:63AA  C6 78               	add	a,xship_rel
      63.  01:63AC  77                  	ld	(hl),a
      64.  01:63AD  23                  	inc hl
      65.  01:63AE  36 00               	ld	(hl),0		; shape 0 hard wired
      66.  01:63B0  23                  	inc hl
      67.  01:63B1                      ;	ld	(hl),10
      68.  01:63B1  23                  	inc hl
      69.  01:63B2                      
      70.  01:63B2  3A 48 CB            	ld	a,(yship)
      71.  01:63B5  77                  	ld	(hl),a
      72.  01:63B6  23                  	inc hl
      73.  01:63B7  3A 35 CB            	ld	a,(_xoffset)		; compensate R#18 
      74.  01:63BA  C6 78               	add	a,xship_rel
      75.  01:63BC  77                  	ld	(hl),a
      76.  01:63BD  23                  	inc hl
      77.  01:63BE  36 04               	ld	(hl),4		; shape 4 hard wired
      78.  01:63C0  4F                  	ld	c,a
      79.  01:63C1  23                  	inc hl
      80.  01:63C2                      ;	ld	(hl),11
      81.  01:63C2  23                  	inc hl
      82.  01:63C3                      
      83.  01:63C3  3A 48 CB            	ld	a,(yship)
      84.  01:63C6  77                  	ld	(hl),a
      85.  01:63C7  23                  	inc hl
      86.  01:63C8  3A 35 CB            	ld	a,(_xoffset)		; compensate R#18 
      87.  01:63CB  C6 78               	add	a,xship_rel
      88.  01:63CD  77                  	ld	(hl),a
      89.  01:63CE  23                  	inc hl
      90.  01:63CF  36 08               	ld	(hl),8		; shape 8 hard wired
      91.  01:63D1                      ;	inc hl
      92.  01:63D1                      ;	ld	(hl),6
      93.  01:63D1  C9                  	ret
      94.  01:63D2                      	
      95.  01:63D2                      .landing:
      96.  01:63D2  21 5C CB            	ld	hl,ram_sat+4*2
      97.  01:63D5  3A 48 CB            	ld	a,(yship)
      98.  01:63D8  3D                  	dec	a
      99.  01:63D9  77                  	ld	(hl),a
     100.  01:63DA  23                  	inc hl
     101.  01:63DB  3A 44 CB            	ld	a,(xmap)
     102.  01:63DE  57                  	ld  d,a
     103.  01:63DF  3A 49 CB            	ld	a,(xship)
     104.  01:63E2  92                  	sub	a,d
     105.  01:63E3  77                  	ld	(hl),a		; xship_rel
     106.  01:63E4  23                  	inc hl
     107.  01:63E5  36 00               	ld	(hl),0		; shape 0 hard wired
     108.  01:63E7  23                  	inc hl
     109.  01:63E8  36 0F               	ld	(hl),15
     110.  01:63EA                      	
     111.  01:63EA  11 F9 FF            	ld  de,-7
     112.  01:63ED  19                  	add hl,de
     113.  01:63EE                      	
     114.  01:63EE  3A 48 CB            	ld	a,(yship)
     115.  01:63F1  3D                  	dec	a
     116.  01:63F2  77                  	ld	(hl),a
     117.  01:63F3  23                  	inc hl
     118.  01:63F4  3A 44 CB            	ld	a,(xmap)
     119.  01:63F7  57                  	ld  d,a
     120.  01:63F8  3A 49 CB            	ld	a,(xship)
     121.  01:63FB  92                  	sub	a,d
     122.  01:63FC  77                  	ld	(hl),a		; xship_rel
     123.  01:63FD  23                  	inc hl
     124.  01:63FE  36 04               	ld	(hl),4		; shape 4 hard wired
     125.  01:6400  4F                  	ld	c,a
     126.  01:6401  23                  	inc hl
     127.  01:6402  36 07               	ld	(hl),7
     128.  01:6404                      
     129.  01:6404  11 F9 FF            	ld  de,-7
     130.  01:6407  19                  	add hl,de
     131.  01:6408                      
     132.  01:6408  3A 48 CB            	ld	a,(yship)
     133.  01:640B  80                  	add a,b 
     134.  01:640C  77                  	ld	(hl),a
     135.  01:640D  23                  	inc hl
     136.  01:640E                      
     137.  01:640E  3A 44 CB            	ld	a,(xmap)
     138.  01:6411  57                  	ld  d,a
     139.  01:6412  3A 49 CB            	ld	a,(xship)
     140.  01:6415  92                  	sub	a,d
     141.  01:6416  80                  	add	a,b
     142.  01:6417  77                  	ld	(hl),a
     143.  01:6418  23                  	inc hl
     144.  01:6419  36 08               	ld	(hl),8		; shape 8 hard wired
     145.  01:641B  23                  	inc hl
     146.  01:641C  36 01               	ld	(hl),1
     147.  01:641E  C9                  	ret
     320   01:641F                      		include probe_level.asm				
       1.  01:641F                       
       2.  01:641F                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
       3.  01:641F                      ;	peek a tile
       4.  01:641F                      ; in	a:	y (screen coordinate)
       5.  01:641F                      ;		hl: x (level coordinate)
       6.  01:641F                      ; out	a:  tile at x,y
       7.  01:641F                      ;		hl: pointer in level_buffer to  tile
       8.  01:641F                       
       9.  01:641F                      probe_level:
      10.  01:641F                      
      11.  01:641F  01 00 C0            	ld	bc,_levelmap
      12.  01:6422  0F 0F 0F 0F         [4]	rrca
      13.  01:6426  E6 0F               	and 15
      14.  01:6428  29 29 29 29         [4]	add	hl,hl
      15.  01:642C  6C                  	ld	l,h
      16.  01:642D  67                  	ld	h,a
      17.  01:642E  09                  	add	hl,bc
      18.  01:642F  7E                  	ld	a,(hl)
      19.  01:6430  C9                  	ret
      20.  01:6431                      	
      21.  01:6431                      	struct star_data
      22.  01:6431                    < x	db	0
      23.  01:6431                    < y	db	0
      24.  01:6431                    < add	dw	0
      25.  01:6431                    < 	ends
      26.  01:6431                      	
      27.  01:6431                      starlist:
      28.  01:6431  20 4A 02 00         	star_data	 32,64+10, 32/16+(10/16)*256
      29.  01:6435  D0 72 0D 03         	star_data	208,64+50,208/16+(50/16)*256
      30.  01:6439  80 74 08 03         	star_data	128,64+52,128/16+(52/16)*256
      31.  01:643D                      starlist2:
      32.  01:643D  10 45 01 04             star_data	 16,64+5,  16/16+((64+ 5)/16)*256
      33.  01:6441  30 51 03 05             star_data	 48,64+17, 48/16+((64+17)/16)*256
      34.  01:6445  70 5A 07 05         	star_data	112,64+26,112/16+((64+26)/16)*256
      35.  01:6449                      starlist3:
      36.  01:6449  30 51 03 09             star_data	 48,64+17, 48/16+((128+17)/16)*256
      37.  01:644D  70 5A 07 09         	star_data	112,64+26,112/16+((128+26)/16)*256
      38.  01:6451  E0 6A 0E 0A         	star_data	224,64+42,224/16+((128+42)/16)*256
      39.  01:6455                      	
      40.  01:6455                      test_star:
      41.  01:6455  F3                  	di
      42.  01:6456  3A 35 CB            	ld	a,(_xoffset)
      43.  01:6459  87 87 87 87         [4]	add	a,a
      44.  01:645D  4F                  	ld  c,a
      45.  01:645E                      	
      46.  01:645E  3A 33 CB            	ld	a,(_displaypage)
      47.  01:6461  87 87               [2]	add	a,a
      48.  01:6463  47                  	ld	b,a
      49.  01:6464                      	
      50.  01:6464  DD 21 31 64         	ld	ix,starlist
      51.  01:6468  CD 7D 64            	call	.star_loop	
      52.  01:646B                      
      53.  01:646B  04                  	inc	b
      54.  01:646C  78                  	ld	a,b
      55.  01:646D                      
      56.  01:646D  CD 7D 64            	call	.star_loop
      57.  01:6470                      
      58.  01:6470  04                  	inc	b
      59.  01:6471  78                  	ld	a,b
      60.  01:6472                      
      61.  01:6472  CD 7D 64            	call	.star_loop
      62.  01:6475                      
      63.  01:6475  3A 35 CB            	ld	a,(_xoffset)		
      64.  01:6478  32 37 CB            	ld	(__xoffset),a
      65.  01:647B  FB                  	ei
      66.  01:647C  C9                  	ret
      67.  01:647D                      	
      68.  01:647D                      .star_loop
      69.  01:647D  D3 99               	out (0x99),a ;set bits 14-16
      70.  01:647F  3E 8E               	ld a,14+128
      71.  01:6481  D3 99               	out (0x99),a
      72.  01:6483                      
      73.  01:6483                      
      74.  01:6483                      	repeat 3
      75.  01:6483                    < 1:	ld	e,(ix+star_data.add)
      76.  01:6483                    < 	ld	d,(ix+star_data.add+1)
      77.  01:6483                    < 	ld	hl,(_levelmap_pos)
      78.  01:6483                    < 	add	hl,de
      79.  01:6483                    < 	ld	a,(hl)
      80.  01:6483                    < 	and	a
      81.  01:6483                    < 	jp	nz,2f
      82.  01:6483                    < 	ld	a,(__xoffset)		; compensate R#18 
      83.  01:6483                    < 	add	a,(ix+star_data.x)
      84.  01:6483                    < 	out (0x99),a
      85.  01:6483                    < 	ld a,(ix+star_data.y) 	;	set bits 8-13
      86.  01:6483                    < 	out (0x99),a
      87.  01:6483                    < 	xor	a
      88.  01:6483                    < 	out	(0x98),a
      89.  01:6483                    < 	call	.set_star
      90.  01:6483                    < 2:	ld	de,star_data
      91.  01:6483                    < 	add	ix,de
      92.  01:6483                    < 	endrepeat
      92.  01:6483  DD 5E 02 DD 56 03 2A 2F CB 19 7E A7 C2 A5 64 3A 
      92.  01:6493  37 CB DD 86 00 D3 99 DD 7E 01 D3 99 AF D3 98 CD 
      92.  01:64A3  F9 64 11 04 00 DD 19 DD 5E 02 DD 56 03 2A 2F CB 
      92.  01:64B3  19 7E A7 C2 CC 64 3A 37 CB DD 86 00 D3 99 DD 7E 
      92.  01:64C3  01 D3 99 AF D3 98 CD F9 64 11 04 00 DD 19 DD 5E 
      92.  01:64D3  02 DD 56 03 2A 2F CB 19 7E A7 C2 F3 64 3A 37 CB 
      92.  01:64E3  DD 86 00 D3 99 DD 7E 01 D3 99 AF D3 98 CD F9 64 
      92.  01:64F3  11 04 00 DD 19 
      93.  01:64F8  C9                  	ret
      94.  01:64F9                      	
      95.  01:64F9                      .set_star:
      96.  01:64F9  79                  	ld	a,c
      97.  01:64FA  DD BE 00            	cp	(ix+star_data.x)
      98.  01:64FD  C8                  	ret	z
      99.  01:64FE  3A 35 CB            	ld	a,(_xoffset)		; compensate R#18 
     100.  01:6501  DD 86 00            	add	a,(ix+star_data.x)
     101.  01:6504  D3 99               	out (0x99),a
     102.  01:6506  DD 7E 01            	ld a,(ix+star_data.y) 	;	set bits 8-13
     103.  01:6509  D3 99               	out (0x99),a
     104.  01:650B  3E FF               	ld	a,255
     105.  01:650D  D3 98               	out	(0x98),a
     106.  01:650F  C9                  	ret
     107.  01:6510                      	
     108.  01:6510                      ; unused_other:
     109.  01:6510                      	; ld	hl,(xship)
     110.  01:6510                      	; ld	a,(yship)
     111.  01:6510                      	; call	probe_level
     112.  01:6510                      	; exx
     113.  01:6510                      	; ld	hl,_levelmap+256
     114.  01:6510                      	; ld	bc,13
     115.  01:6510                      	; cpir
     116.  01:6510                      	; ret nz
     117.  01:6510                      	; dec	h
     118.  01:6510                      	; dec l
     119.  01:6510                      	; ld  a,(hl)
     120.  01:6510                      	; exx
     121.  01:6510                      	; ld  (hl),a
     122.  01:6510                      	; exx
     123.  01:6510                      	; ld  a,l
     124.  01:6510                      	; sub	a,low _levelmap
     125.  01:6510                      	; ld  l,a
     126.  01:6510                      	; push	hl					; L block#
     127.  01:6510                      		
     128.  01:6510                      	; ld		a,(_displaypage)
     129.  01:6510                      	; ld		h,a
     130.  01:6510                      	; ld		a,(_xoffset)		; compensate R#18 
     131.  01:6510                      	; add		a,xship_rel
     132.  01:6510                      	; and		0xF0
     133.  01:6510                      	; ld		e,a					; destX
     134.  01:6510                      	; ld		a,(yship)
     135.  01:6510                      	; and 	0xF0
     136.  01:6510                      	; ld		d,a					; destY
     137.  01:6510                      
     138.  01:6510                      	; push	de
     139.  01:6510                      	; call	_plot_distrucable
     140.  01:6510                      	; pop		de
     141.  01:6510                      	
     142.  01:6510                      	; pop		hl
     143.  01:6510                      	; ld		a,h
     144.  01:6510                      	; xor		1
     145.  01:6510                      	; ld		h,a
     146.  01:6510                      	
     147.  01:6510                      	; ret
     148.  01:6510                      	; ld		a,(dxmap)
     149.  01:6510                      	; rlc a
     150.  01:6510                      	; jp	nc,1f		; >0 == dx
     151.  01:6510                      					; ; <0 == sx
     152.  01:6510                      	; ld	a,-16
     153.  01:6510                      	; add	a,e
     154.  01:6510                      	; ld	e,a
     155.  01:6510                      	; jp		_plot_distrucable
     156.  01:6510                      	
     157.  01:6510                      ; 1:	ld	a,+16
     158.  01:6510                      	; add	a,e
     159.  01:6510                      	; ld	e,a
     160.  01:6510                      	; jp		_plot_distrucable
     321   01:6510                      		include opening.asm		
       1.  01:6510                      
       2.  01:6510                      
       3.  01:6510                      opening:
       4.  01:6510  0E 00               		ld		c,0
       5.  01:6512  51                  		ld		d,c
       6.  01:6513  59                  		ld		e,c
       7.  01:6514  CD A5 41            		call	_vdpsetvramwr
       8.  01:6517                      
       9.  01:6517  11 07 10            		ld	de,256*:_opening+7
      10.  01:651A  CD 39 65            		call	outvram
      11.  01:651D                      		
      12.  01:651D  CD CD 60            1:		call	ms_ctrl.rd_joy
      13.  01:6520  CD 25 61            		call	ms_ctrl.z_or_space
      14.  01:6523  20 F8               		jr		nz,1b
      15.  01:6525                      
      16.  01:6525  CD 78 41            		call	_cls
      17.  01:6528                      		
      18.  01:6528  F3                  		di
      19.  01:6529  3A E8 FF            		ld		a,(RG9SAV)		
      20.  01:652C  E6 7F               		and		01111111B		; Set 192 lines
      21.  01:652E  32 E8 FF            		ld		(RG9SAV),a
      22.  01:6531  D3 99               		out		(0x99),a
      23.  01:6533  3E 89               		ld		a,128+9
      24.  01:6535  D3 99               		out		(0x99),a
      25.  01:6537  FB                  		ei
      26.  01:6538                      		
      27.  01:6538  C9                  		ret
     322   01:6539                      outvram:
     323   01:6539  7A                  2:		ld	a,d
     324   01:653A  32 00 B0            		ld	(_kBank4),a
     325   01:653D  21 00 A0            		ld	hl,0xA000
     326   01:6540  01 98 00            		ld	bc,0x98
     327   01:6543  3E 20               		ld	a,32
     328   01:6545  ED B3               1:		otir
     329   01:6547  3D                  		dec	a
     330   01:6548  C2 45 65            		jp	nz,1b
     331   01:654B  14                  		inc	d
     332   01:654C  1D                  		dec	e
     333   01:654D  20 EA               		jr	nz,2b
     334   01:654F  C9                  		ret
     335   01:6550                      		
     336   01:6550  (02)                		page 2
     337   02:8000                      	; include mainhero_LMMM.asm
     338   02:8000                      
     339   02:8000                      	
     340   02:8000  (03)                		page 3
     341   03:A000                      manta_color:
     342   03:A000  (0680)              		incbin mship03_clr.bin
     343   03:A680                      ms_spt:
     344   03:A680  (1380)              		incbin mship03_frm.bin
     345   03:BA00                      		
     346   03:BA00  (04)                		page 4
     347   04:A000                      _tiles0:
     348   04:A000  (2000)              		incbin "tiles.bin",0x0000,0x2000
     349   04:C000  (05)                		page 5
     350   05:A000  (2000)              		incbin "tiles.bin",0x2000,0x2000
     351   05:C000  (06)                		page 6
     352   06:A000  (2000)              		incbin "tiles.bin",0x4000,0x2000
     353   06:C000  (07)                		page 7
     354   07:A000  (2000)              		incbin "tiles.bin",0x6000,0x2000
     355   07:C000  (08)                		page 8
     356   08:A000  (2000)              		incbin "tiles.bin",0x8000,0x2000
     357   08:C000  (09)                		page 9
     358   09:A000  (2000)              		incbin "tiles.bin",0xA000,0x2000
     359   09:C000  (0A)                		page 10
     360   0A:A000  (2000)              		incbin "tiles.bin",0xC000,0x2000
     361   0A:C000  (0B)                		page 11
     362   0B:A000  (1100)              		incbin "tiles.bin",0xE000;,0x2000
     363   0B:B100                      
     364   0B:B100  (0C)                		page 12
     365   0C:A000                      
     366   0C:A000  (0F)                		page 15
     367   0F:A000                      _level:
     368   0F:A000  (0B00)              		incbin "datamap.bin"
     369   0F:AB00                      	
     370   0F:AB00  (10)                		page 16
     371   10:A000                      _opening:
     372   10:A000  (2000)              		incbin "opening.bin",0x0000,0x2000
     373   10:C000  (11)                		page 17
     374   11:A000  (2000)              		incbin "opening.bin",0x2000,0x2000
     375   11:C000  (12)                		page 18
     376   12:A000  (2000)              		incbin "opening.bin",0x4000,0x2000
     377   12:C000  (13)                		page 19
     378   13:A000  (2000)              		incbin "opening.bin",0x6000,0x2000
     379   13:C000  (14)                		page 20
     380   14:A000  (2000)              		incbin "opening.bin",0x8000,0x2000
     381   14:C000  (15)                		page 21
     382   15:A000  (2000)              		incbin "opening.bin",0xA000,0x2000
     383   15:C000  (16)                		page 22
     384   16:A000  (1400)              		incbin "opening.bin",0xC000;,0x2000
     385   16:B400  (17)                		page 23
     386   17:A000                      		; incbin "opening.bin",0xE000;,,0x2000
     387   17:A000                      	
     388   17:A000  (18)                		page 24
     389   18:A000                      _scorebar:	
     390   18:A000  (1800)              		incbin scorebar.bin
     391   18:B800                      	
     392   18:B800  (19)                		page 25
     393   19:A000                      _animated:	
     394   19:A000  (2000)              		incbin animated.bin,0x0000,0x2000
     395   19:C000  (1A)                		page 26
     396   1A:A000  (2000)              		incbin animated.bin,0x2000,0x2000
     397   1A:C000                      
     398   1A:C000  (1B)                		page 27
     399   1B:A000                      sprtdata:
     400   1B:A000  (0200)              		incbin 	uridium_revA.bin,,16*32
     401   1B:A200  (0600)              		incbin 	enemies_frm.bin
     402   1B:A800                      
     403   1B:A800  (1C)                		page 28
     404   1C:A000                      color_base:
     405   1C:A000                      		repeat 4
     406   1C:A000                    < 		ds	16,8
     407   1C:A000                    < 		ds	16,10+64
     408   1C:A000  08 (16)           < 		endrepeat
     409   1C:A080                      		repeat 4
     410   1C:A080                    < 		ds	16,8
     411   1C:A080                    < 		ds	16,10+64
     412   1C:A080  08 (16)           < 		endrepeat
     413   1C:A100                      
     414   1C:A100                      		
     415   1C:A100  (0300)              		incbin 	enemies_clr.bin
     416   1C:A400                      		
     417   1C:A400                      FINISH:
     418   1C:A400                      
     419   1C:A400                      
     420   1C:A400                      ;---------------------------------------------------------
     421   1C:A400                      ; Variables
     422   1C:A400                      ;---------------------------------------------------------
     423   1C:A400                      	
     424   1C:A400                      	
     425   1C:A400  (C000)              	MAP 0xC000
     426   1C:A400                      
     427   1C:A400  (1C:C000)           _levelmap:			#mapWidth*mapHeight
     428   1C:A400                      
     429   1C:A400  (1C:CB00)           slotvar				#1
     430   1C:A400  (1C:CB01)           slotram				#1
     431   1C:A400  (1C:CB02)           SEL_NTSC			#1
     432   1C:A400                      
     433   1C:A400  (1C:CB03)           joystick			#1
     434   1C:A400                      
     435   1C:A400  (1C:CB04)           _mcdivider			#1
     436   1C:A400                      
     437   1C:A400  (1C:CB05)           _mcx				#2	; relative with in the frame on the screen
     438   1C:A400  (1C:CB07)           _mcy				#2
     439   1C:A400                      
     440   1C:A400  (1C:CB09)           _mclx				#2	; absolute with the level in ram
     441   1C:A400  (1C:CB0B)           _mcly				#2
     442   1C:A400                      
     443   1C:A400  (1C:CB0D)           _mcframe			#1
     444   1C:A400  (1C:CB0E)           _mcstate			#1
     445   1C:A400                      
     446   1C:A400  (1C:CB0F)           _mcdx				#2
     447   1C:A400  (1C:CB11)           _mcdy				#2
     448   1C:A400                      
     449   1C:A400  (1C:CB13)           _mcprobe:			#1
     450   1C:A400  (1C:CB14)           _mcprobeb:			#1
     451   1C:A400                      
     452   1C:A400  (1C:CB15)           _ticxframe			#1
     453   1C:A400                      
     454   1C:A400  (1C:CB16)           _buffer:			#16
     455   1C:A400  (1C:CB26)           _fps:				#2
     456   1C:A400  (1C:CB28)           _nframes:			#2
     457   1C:A400  (1C:CB2A)           _vbit16:			#2
     458   1C:A400                      
     459   1C:A400  (1C:CB2C)           _ymappos:			#1
     460   1C:A400  (1C:CB2D)           _xmappos:			#2
     461   1C:A400  (1C:CB2F)           _levelmap_pos:		#2
     462   1C:A400                      
     463   1C:A400  (1C:CB31)           _shadowbuff:		#2
     464   1C:A400                      
     465   1C:A400  (1C:CB33)           _displaypage:		#1
     466   1C:A400                      
     467   1C:A400  (1C:CB34)           _mccolorchange:		#1
     468   1C:A400  (1C:CB35)           _xoffset:			#1
     469   1C:A400  (1C:CB36)           _yoffset:			#1
     470   1C:A400                      
     471   1C:A400  (1C:CB37)           __xoffset:			#1
     472   1C:A400  (1C:CB38)           __r18:				#1
     473   1C:A400                      
     474   1C:A400  (1C:CB39)           randSeed:			#2
     475   1C:A400  (1C:CB3B)           cur_level:			#1
     476   1C:A400  (1C:CB3C)           wave_count:			#1
     477   1C:A400  (1C:CB3D)           landing_permission:	#1
     478   1C:A400  (1C:CB3E)           assault_wave_timer:	#2
     479   1C:A400  (1C:CB40)           bullet_rate:		#1
     480   1C:A400  (1C:CB41)           _dxchng:			#1		; <>0 if direction changes
     481   1C:A400  (1C:CB42)           _dxmap:				#1		; previous dxmap
     482   1C:A400  (1C:CB43)           dxmap:				#1
     483   1C:A400  (1C:CB44)           xmap:				#2
     484   1C:A400  (1C:CB46)           _xmapx4:			#2		; xmap x 4
     485   1C:A400  (1C:CB48)           yship:				#1
     486   1C:A400  (1C:CB49)           xship:				#2
     487   1C:A400  (1C:CB4B)           aniframe:			#1
     488   1C:A400  (1C:CB4C)           ms_state:			#1
     489   1C:A400  (1C:CB4D)           old_aniframe:		#1
     490   1C:A400  (1C:CB4E)           anispeed:			#1
     491   1C:A400  (1C:CB4F)           already_dead:		#1
     492   1C:A400  (1C:CB50)           lives_bin:			#1
     493   1C:A400                      
     494   1C:A400  (1C:CB51)           god_mode:			#1
     495   1C:A400  (1C:CB52)           visible_sprts:		#1
     496   1C:A400  (1C:CB53)           flip_flop:			#1
     497   1C:A400                      
     498   1C:A400  (1C:CB54)           ram_sat:			#3*4
     499   1C:A400                      
     500   1C:A400                      	struct enemy_data
     501   1C:A400                    < y				db	0
     502   1C:A400                    < x				dw	0
     503   1C:A400                    < xoff			db	0
     504   1C:A400                    < yoff			db	0
     505   1C:A400                    < xsize			db	0
     506   1C:A400                    < ysize			db	0
     507   1C:A400                    < status			db	0	; B7 = DWN/UP | B6 = RIGHT/LEFT | B5 = ok/wrong clr | B0 = Inactive/Active
     508   1C:A400                    < cntr			db	0
     509   1C:A400                    < kind			db	0
     510   1C:A400                    < frame			db	0
     511   1C:A400                    < color			db	0
     512   1C:A400                    < color2			db	0
     513   1C:A400                    < speed			dw	0
     514   1C:A400                    < 	ends
     515   1C:A400                      	
     516   1C:A400  (1C:CB60)           any_object:			#0
     517   1C:A400  (1C:CB60)           ms_bullets:			#enemy_data*max_bullets
     518   1C:A400  (1C:CB7E)           enem_bullets:		#enemy_data*max_enem_bullets
     519   1C:A400  (1C:CBAB)           enemies:			#enemy_data*max_enem
     520   1C:A400  (1C:CC5F)           endram:				#1
     521   1C:A400  (0000)              	ENDMAP

    LABELS
-------------------------------------------------
00:00005000   _kBank1
00:00007000   _kBank2
00:00009000   _kBank3
00:0000B000   _kBank4
00:0000000C   max_enem
00:00000003   max_enem_bullets
00:00000002   max_bullets
00:00000004   maxspeed
00:000000B4   assault_wave_timer_preset
00:00000002   enemy_bullet_speed
00:00000078   xship_rel
00:00000100   mapWidth
00:0000000B   mapHeight
00:000000A8   YSIZE
00:00000024 X ENASLT
00:00000138   RSLREG
00:0000FCC1   EXPTBL
00:00004010   search_slot
00:0000402F   search_slotram
00:00004050   search_slotram0
00:00004055 X setrompage0
00:0000405B   setrampage0
00:00004061   setrompage2
00:00004067 X setrampage2
00:0000406D X setrompage3
00:00004073 X setrampage3
00:00004079 X recbios
00:0000407C   setslotpage0
00:000040B3 X setslotpage1
00:000040F2   setslotpage2
00:00004139   setslotpage3
00:00004178   _cls
00:00004190   _cls0
00:00000099 X vdpport1
00:0000009A X vdpport2
00:000041A5   _vdpsetvramwr
00:000041A6 X _vdpsetvramwr2
00:000041B6 X _vdpsetvramwr14
00:000041BF X _vdpsetvramrd
00:000041D9   _setpage
00:0000005F   chgmod
00:0000000C X RDSLT
00:00000156 X KILBUF
00:000041EA   set_scr
00:0000421F   _waitvdp
00:0000000C X rdslt
00:0000001C X CALSLT
00:00000180   chgcpu
00:0000FCC1 X exttbl
00:0000422E   _set_r800
00:0000424F   set_turbo_tr
00:0000F3DF   RG0SAV
00:0000F3E0   RG1SAV
00:0000F3E1 X RG2SAV
00:0000F3E2 X RG3SAV
00:0000F3E3 X RG4SAV
00:0000F3E4 X RG5SAV
00:0000F3E5 X RG6SAV
00:0000F3E6   RG7SAV
00:0000FFE7   RG8SAV
00:0000FFE8   RG9SAV
00:0000FFE9 X RG10SAV
00:0000FFEA X RG11SAV
00:0000FFEB X RG12SAV
00:0000FFEC X RG13SAV
00:0000FFED X RG14SAV
00:0000FFEE X RG15SAV
00:0000FFEF X RG16SAV
00:0000FFF0 X RG17SAV
00:0000FFF1 X RG18SAV
00:0000FFF2 X RG19SAV
00:0000FFF3 X RG20SAV
00:0000FFF4 X RG21SAV
00:0000FFF5 X RG22SAV
00:0000FFF7 X RG23SAV
00:0000FC9E   _jiffy
00:00004257   _fake_isr
00:0000427E   _isrinit
00:000042A2   _intreset
00:000042BE   _scroll
00:000042DD X waitHBLANK
00:000042ED   lint
00:0000432F   lint.exit
00:00000000   border_color
00:00004349   vblank
00:00004373   _blank_line_lft
00:00004379   _blank_line_rgt
00:0000437F   inc_xoffset
00:0000438B   inc_xoffset.movex
00:00004391 X inc_xoffset.case0
00:0000439C   inc_xoffset.case1_15
00:000043A7   dec_xoffset
00:000043B3   dec_xoffset.movex
00:000043BA X dec_xoffset.case15
00:000043C5   dec_xoffset.case0_14
00:000043D0   newxmap
00:00004413   activate_window
00:00004452   changedir
00:0000446A X changedir.left
00:0000447E   changedir.right
00:00004492   nodirchange
00:000044A9 X nodirchange.left
00:000044B9   nodirchange.right
00:000044C9   checkkbd
00:000044D6   _hw_sprite_init
00:00000004 S teller
00:0000451F   load_colors
00:00004536   bull_color
00:0000453F   set_manta
00:00004548   plot_enemy
00:00004553 X directplot_enemy
00:000045A2   directplot_enemy.next1
00:000045EB   directplot_enemy.next2
00:000045F7   directplot_enemy.spriteoff1
00:00004604   directplot_enemy.spriteoff2
00:00004619   reverseplot_enemy
00:00004670   reverseplot_enemy.next2
00:000046AE   reverseplot_enemy.next1
00:000046BD   reverseplot_enemy.spriteoff1
00:000046CA   reverseplot_enemy.spriteoff2
00:00004700   sprite_collision_windows
00:00004700 X sprite_0
00:00004704 X sprite_1
00:00004708 X sprite_2
00:0000470C X sprite_3
00:00004710 X sprite_4
00:00004714 X sprite_5
00:00004718 X sprite_6
00:0000471C X sprite_7
00:00004720 X sprite_8
00:00004724 X sprite_9
00:00004728 X sprite_10
00:0000472C X sprite_11
00:00004730 X sprite_12
00:00004734 X sprite_13
00:00004738 X sprite_14
00:0000473C X sprite_15
00:00004740 X sprite_16
00:00004744 X sprite_17
00:00004748 X sprite_18
00:0000474C X sprite_19
00:00004750 X sprite_20
00:00004754 X sprite_21
00:00004758 X sprite_22
00:0000475C X sprite_23
00:00004760   set_size
00:00004783   bullet_set_size2
00:000047A4   bullet_sprite_collision_windows
00:000047A4 X bullet_sprite_collision_windows.sprite_8
00:000047A8 X bullet_sprite_collision_windows.sprite_9
00:000047AC X bullet_sprite_collision_windows.sprite_10
00:000047B0 X bullet_sprite_collision_windows.sprite_11
00:000047B4 X bullet_sprite_collision_windows.sprite_12
00:000047B8 X bullet_sprite_collision_windows.sprite_13
00:000047BC X bullet_sprite_collision_windows.sprite_14
00:000047C0 X bullet_sprite_collision_windows.sprite_15
00:000047C4   bullet_set_size
00:000047E5   test_collision_enemy_bullets
00:00004825   test_collision_msbullets
00:0000483E   test_collision
00:00004874   CalcCollision
00:0000487E   CalcCollision.switch
00:00004884   CollisionCheck_8b
00:0000488A   CollisionCheck_8b.other
00:00000000   obj_data.y
00:00000001   obj_data.x
00:00000003   obj_data.xoff
00:00000004   obj_data.yoff
00:00000005   obj_data.xsize
00:00000006   obj_data.ysize
00:00000007 X obj_data
00:0000488E X _check_obj_collision
00:00004894 X check_obj_collision_8_16
00:000048AD X swap_objects_y
00:000048DB X swap_objects_x
00:000048EB   ms_ani
00:000048EB X mship03_ani
00:0000493B   ms_col_win
00:0000493B X mship03_coll_wind
00:00004A0B   add_bc_score_bin
00:00004A0C   rand8_init
00:00004A15   rand8
00:00004A22   land_now_test
00:00004A40   npc_init
00:00004A6D X bull_init
00:00004A86 X manual_wave_ctrl
00:00004A90 X levels_0_8
00:00004A94   levels_8_16
00:00004AC5   wave_timer
00:00004B0C   wave0
00:00004B0C   wave1
00:00004B22 X wave1.neg
00:00004B33   wave1.pos
00:00004B8E   wave1.next
00:00004B98   wave2
00:00004BA6 X wave2.neg
00:00004BBB   wave2.pos
00:00004C1D   wave2.next
00:00004C24   wave3
00:00004C32 X wave3.neg
00:00004C3A   wave3.pos
00:00004C95   wave3.next
00:00004C9C   wave4
00:00004CAB   _wave4_cont
00:00004CAE X _wave4_cont.neg
00:00004CC2   _wave4_cont.pos
00:00004D29   _wave4_cont.next
00:00004D30   wave5
00:00004D3E X wave5.neg
00:00004D45   wave5.pos
00:00004D9D   wave5.next
00:00004DA4   wave6
00:00004DAF   wave7
00:00004DC1 X wave7.neg
00:00004DC8   wave7.pos
00:00004E16   wave7.next
00:00004E1D   npc_loop
00:00004E4D   next
00:00004E56   npcdies
00:00004E7D   enemy255
00:00004E99   enemy0
00:00004E99 X enemy1
00:00004E9F X enemy1.go_left
00:00004EC2   enemy1.go_right
00:00004EF4   enemy2
00:00004EF4 X enemy3
00:00004F0D X enemy3.go_left
00:00004F23   enemy3.go_right
00:00004F48   enemy4
00:00004F61 X enemy4.go_left
00:00004F77   enemy4.go_right
00:00004F94 X enemy4.go_up
00:00004F9E   enemy4.go_dwn
00:00005000   rotation
00:00005004   rotate
00:00005100   sinewave
00:00005140   enemy5
00:00005159 X enemy5.go_left
00:0000516F   enemy5.go_right
00:000051A7   enemy6
00:000051C0 X enemy6.go_left
00:000051DE   enemy6.go_right
00:00005206 X enemy6.go_up
00:00005210   enemy6.go_dwn
00:0000522D   enemy7
00:00005246 X enemy7.go_left
00:00005264   enemy7.go_right
00:000052A7   book_enemy_shoot
00:000052EE   book_enemy_shoot.activate_this
00:000052F4 X book_enemy_shoot.shootdx
00:00005303   book_enemy_shoot.shootsx
00:00005339   enemy_bullet_loop
00:00005423   test_obstacles.found
00:0000543D X _plot_distrucable
00:0000547F   START
00:0000548C   _ntsc
00:00005500   restart
00:00005569   main_loop
00:000055AB   AFXPLAY
00:000055AC X _print_probe
00:000055F1 X _print_fps
00:0000560E X _compute_fps
00:00005615   int2ascii
00:00005618 X Num2asc
00:00005631   Num1
00:00005633   Num2
00:0000563C   blank_line
00:00005670   plot_line_lft1
00:00005678   plot_line_lft2
00:00005680   plot_line_rgt1
00:0000568C   plot_line_rgt2
00:00005698   plot_tile
00:000056E3 X init_page0
00:0000570F   clrboder
00:00005741   move_block
00:00005781   plot_line1
00:00005798   plot_line2
00:000057D9   _1stblock
00:00005804   _1st
00:00005831   _2nd
00:000058B9   _plot_spt
00:000058EF   out48
00:0000590F   out32
00:0000592F X out16
00:00005950   set_manta_color
00:00005981   color_enemy
00:0000598C X directcolor_enemy
00:000059D0   directcolor_enemy.next
00:000059DF   reversecolor_enemy
00:00005A1D   reversecolor_enemy.next
00:00005A31   ms_bllts_col_win
00:00005A31 X ms_bllts_coll_wind
00:00000005   max_bullet_rate
00:00005A51   ms_shoot
00:00005A5D   ms_shoot.book_bullet
00:00005A76   ms_shoot.activate_this
00:00005A81 X ms_shoot.shootdx
00:00005A8B   ms_shoot.shootsx
00:00005AC7   bullet_loop
00:00005B2A   bullet_loop.test_obstacles
01:00000000   ms_fly__right
01:00000001   ms_spin_face_right
01:00000002   ms_side_dwn_face_right
01:00000003   ms_side_up__face_right
01:00000004   ms_fly__left
01:00000005   ms_spin_face_left
01:00000006   ms_side_dwn_face_left
01:00000007   ms_side_up__face_left
01:00000008   ms_loop_right2left
01:00000009   ms_loop_left2right
01:0000000A   ms_explode
01:0000000B   ms_landing
01:0000000C   ms_reset
01:00006000   ms_ctrl
01:00006012 X ms_ctrl.intro
01:0000605C   ms_ctrl.ms_landing
01:0000605C   ms_ctrl.ms_reset
01:0000605D   ms_ctrl.ms_directions
01:00006093   ms_ctrl.test_move_right
01:000060A6   ms_ctrl.test_move_left
01:000060B9   ms_ctrl._dw
01:000060C4   ms_ctrl._up
01:000060CD   ms_ctrl.rd_joy
01:000060DB X ms_ctrl.rd_key
01:00006125   ms_ctrl.z_or_space
01:0000612B   ms_ctrl.x_and_up
01:00006131   ms_ctrl.up
01:00006137   ms_ctrl.x_and_dwn
01:0000613D   ms_ctrl.dwn
01:00006143   ms_ctrl.left
01:00006149   ms_ctrl.right
01:0000614F   ms_ctrl.ms_fly__right
01:0000619E   ms_ctrl.ms_loop_right2left
01:000061B4   ms_ctrl.ms_spin_face_left
01:000061CA   ms_ctrl.ms_fly__left
01:0000621C   ms_ctrl.ms_loop_left2right
01:00006232   ms_ctrl.ms_spin_face_right
01:00006248   ms_ctrl.ms_side_dwn_face_right
01:0000627F   ms_ctrl.ms_side_up__face_right
01:000062B6   ms_ctrl.ms_side_dwn_face_left
01:000062EE   ms_ctrl.ms_side_up__face_left
01:00006326   ms_ctrl.ms_explode
01:0000635A   put_ms_sprt
01:0000639F   put_ms_sprt.expl
01:000063D2 X put_ms_sprt.landing
01:0000641F X probe_level
00:00000000   star_data.x
00:00000001   star_data.y
00:00000002   star_data.add
00:00000004   star_data
01:00006431   starlist
01:0000643D X starlist2
01:00006449 X starlist3
01:00006455   test_star
01:0000647D   test_star.star_loop
01:000064F9   test_star.set_star
01:00006510   opening
01:00006539   outvram
03:0000A000   manta_color
03:0000A680   ms_spt
04:0000A000   _tiles0
0F:0000A000   _level
10:0000A000   _opening
18:0000A000   _scorebar
19:0000A000   _animated
1B:0000A000   sprtdata
1C:0000A000   color_base
1C:0000A400 X FINISH
1C:0000C000   _levelmap
1C:0000CB00   slotvar
1C:0000CB01   slotram
1C:0000CB02   SEL_NTSC
1C:0000CB03   joystick
1C:0000CB04   _mcdivider
1C:0000CB05 X _mcx
1C:0000CB07 X _mcy
1C:0000CB09 X _mclx
1C:0000CB0B X _mcly
1C:0000CB0D   _mcframe
1C:0000CB0E X _mcstate
1C:0000CB0F   _mcdx
1C:0000CB11 X _mcdy
1C:0000CB13 X _mcprobe
1C:0000CB14   _mcprobeb
1C:0000CB15   _ticxframe
1C:0000CB16   _buffer
1C:0000CB26   _fps
1C:0000CB28   _nframes
1C:0000CB2A X _vbit16
1C:0000CB2C   _ymappos
1C:0000CB2D   _xmappos
1C:0000CB2F   _levelmap_pos
1C:0000CB31 X _shadowbuff
1C:0000CB33   _displaypage
1C:0000CB34   _mccolorchange
1C:0000CB35   _xoffset
1C:0000CB36   _yoffset
1C:0000CB37   __xoffset
1C:0000CB38 X __r18
1C:0000CB39   randSeed
1C:0000CB3B   cur_level
1C:0000CB3C   wave_count
1C:0000CB3D   landing_permission
1C:0000CB3E   assault_wave_timer
1C:0000CB40   bullet_rate
1C:0000CB41   _dxchng
1C:0000CB42   _dxmap
1C:0000CB43   dxmap
1C:0000CB44   xmap
1C:0000CB46   _xmapx4
1C:0000CB48   yship
1C:0000CB49   xship
1C:0000CB4B   aniframe
1C:0000CB4C   ms_state
1C:0000CB4D   old_aniframe
1C:0000CB4E   anispeed
1C:0000CB4F   already_dead
1C:0000CB50   lives_bin
1C:0000CB51   god_mode
1C:0000CB52 X visible_sprts
1C:0000CB53   flip_flop
1C:0000CB54   ram_sat
00:00000000   enemy_data.y
00:00000001   enemy_data.x
00:00000003   enemy_data.xoff
00:00000004   enemy_data.yoff
00:00000005   enemy_data.xsize
00:00000006   enemy_data.ysize
00:00000007   enemy_data.status
00:00000008   enemy_data.cntr
00:00000009   enemy_data.kind
00:0000000A   enemy_data.frame
00:0000000B   enemy_data.color
00:0000000C   enemy_data.color2
00:0000000D   enemy_data.speed
00:0000000F   enemy_data
1C:0000CB60   any_object
1C:0000CB60   ms_bullets
1C:0000CB7E   enem_bullets
1C:0000CBAB   enemies
1C:0000CC5F X endram


 Output: main.out
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: *  Used: 00000000

    No output

 Output: urd_scr8.rom
-------------------------------------------------

 Page: 00
  Org: 00004000  Size: 00002000  Used: 00001B7B

   Address   Length Align   Label
   00004000    7035         search_slot
   00005B7B    1157       <empty>

 Page: 01
  Org: 00006000  Size: 00002000  Used: 00000550

   Address   Length Align   Label
   00006000    1360         ms_ctrl
   00006550    6832       <empty>

 Page: 02
  Org: 00008000  Size: 00002000  Used: 00000000

   00008000    8192       <empty>

 Page: 03
  Org: 0000A000  Size: 00002000  Used: 00001A00

   Address   Length Align   Label
   0000A000    6656         manta_color
   0000BA00    1536       <empty>

 Page: 04
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         _tiles0

 Page: 05
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         

 Page: 06
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         

 Page: 07
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         

 Page: 08
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         

 Page: 09
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         

 Page: 0A
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         

 Page: 0B
  Org: 0000A000  Size: 00002000  Used: 00001100

   Address   Length Align   Label
   0000A000    4352         
   0000B100    3840       <empty>

 Page: 0C
  Org: 0000A000  Size: 00002000  Used: 00000000

   0000A000    8192       <empty>

 Page: 0D
  Org: 00006000  Size: 00002000  Used: 00000000

   00006000    8192       <empty>

 Page: 0E
  Org: 00008000  Size: 00002000  Used: 00000000

   00008000    8192       <empty>

 Page: 0F
  Org: 0000A000  Size: 00002000  Used: 00000B00

   Address   Length Align   Label
   0000A000    2816         _level
   0000AB00    5376       <empty>

 Page: 10
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         _opening

 Page: 11
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         

 Page: 12
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         

 Page: 13
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         

 Page: 14
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         

 Page: 15
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         

 Page: 16
  Org: 0000A000  Size: 00002000  Used: 00001400

   Address   Length Align   Label
   0000A000    5120         
   0000B400    3072       <empty>

 Page: 17
  Org: 0000A000  Size: 00002000  Used: 00000000

   0000A000    8192       <empty>

 Page: 18
  Org: 0000A000  Size: 00002000  Used: 00001800

   Address   Length Align   Label
   0000A000    6144         _scorebar
   0000B800    2048       <empty>

 Page: 19
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         _animated

 Page: 1A
  Org: 0000A000  Size: 00002000  Used: 00002000

   Address   Length Align   Label
   0000A000    8192         

 Page: 1B
  Org: 0000A000  Size: 00002000  Used: 00000800

   Address   Length Align   Label
   0000A000    2048         sprtdata
   0000A800    6144       <empty>

 Page: 1C
  Org: 0000A000  Size: 00002000  Used: 00000400

   Address   Length Align   Label
   0000A000    1024         color_base
   0000A400    7168       <empty>

 Page: 1D
  Org: 0000A000  Size: 00002000  Used: 00000000

   0000A000    8192       <empty>

 Page: 1E
  Org: 0000A000  Size: 00002000  Used: 00000000

   0000A000    8192       <empty>

 Page: 1F
  Org: 0000A000  Size: 00002000  Used: 00000000

   0000A000    8192       <empty>
